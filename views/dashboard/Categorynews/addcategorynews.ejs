<!-- Tiêu đề -->
<div class="dashboard-header-row">
    <h2 class="dashboard-title">Thêm danh mục tin</h2>
</div>

<!-- Layout -->
<div class="add-room-container">
    <!-- Form -->
    <div class="room-form-column">
        <div class="form-section">
            <h3 class="section-title">Thông tin danh mục tin</h3>

            <div class="form-row">
                <div class="form-group">
                    <label for="roomName">Tên danh mục tin</label>
                    <input type="text" id="roomName" class="form-control" placeholder="Nhập tên danh mục tin" />
                </div>
                <div class="form-group">
                    <label for="roomSlug">Slug</label>
                    <input type="text" id="roomSlug" class="form-control" placeholder="Có thể tự tạo nếu bỏ trống" />
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label for="roomPriority">Mức ưu tiên</label>
                    <input type="number" id="roomPriority" class="form-control" placeholder="Thứ tự ưu tiên (số)" />
                </div>
                <div class="form-group">
                    <label for="roomStatus">Trạng thái</label>
                    <div class="select-wrapper">
                        <select id="roomStatus" class="form-control">
                            <option value="1">Hiển thị</option>
                            <option value="0">Ẩn</option>
                        </select>
                        <i class="fas fa-chevron-down"></i>
                    </div>
                </div>
            </div>
        </div>

        <!-- Nút -->
        <div class="form-actions">
            <button type="button" class="btn btn-cancel">Hủy</button>
            <button type="button" class="btn btn-save">Lưu</button>
        </div>
    </div>

    <!-- Cột phải: Upload ảnh -->
    <div class="image-upload-column">
        <div class="image-upload-container">
            <div class="upload-title">Ảnh đại diện</div>
            <div class="main-upload-area">
                <div class="upload-placeholder" id="avatarDropArea">
                    <i class="far fa-image"></i>
                    <p>Drop avatar image here, or browse</p>
                    <p class="upload-hint">jpeg, png - kích thước vuông</p>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- JS xử lý -->
<script>
    let avatarFile = null;

    document.addEventListener("DOMContentLoaded", () => {
        bindUpload("#avatarDropArea", (file) => (avatarFile = file));
        document
            .querySelector(".btn-save")
            .addEventListener("click", handleSaveCategory);
    });

    document.getElementById("roomName").addEventListener("input", () => {
    const nameInput = document.getElementById("roomName");
    const slugInput = document.getElementById("roomSlug");

    // Chỉ tự động tạo slug nếu ô slug hiện tại còn trống hoặc đúng với slug cũ
    if (!slugInput.dataset.manual) {
        slugInput.value = generateSlug(nameInput.value);
    }
});
    document.querySelector(".btn-cancel").addEventListener("click", () => {
        window.history.back();
    });
document.getElementById("roomSlug").addEventListener("input", (e) => {
    // Đánh dấu rằng người dùng đã chỉnh sửa slug thủ công
    e.target.dataset.manual = true;
});

    function bindUpload(selector, setter) {
        const dropArea = document.querySelector(selector);
        dropArea.addEventListener("click", () => {
            const input = document.createElement("input");
            input.type = "file";
            input.accept = "image/*";
            input.click();
            input.onchange = () => {
                const file = input.files[0];
                if (file) {
                    setter(file);
                    dropArea.innerHTML = `<img src="${URL.createObjectURL(
                        file
                    )}" style="width:100%; border-radius:6px;">`;
                }
            };
        });
    }

    async function uploadImage(file) {
        if (!file) return null;
        const formData = new FormData();
        formData.append("image", file);
        formData.append("folder", "SonaSpace/NewsCategories");

        const res = await fetch("/api/upload/newscategorynews", {
            method: "POST",
            body: formData,
        });

        const data = await res.json();
        return data.url || null;
    }

    function generateSlug(str) {
        return str
            .toLowerCase()
            .normalize("NFD")
            .replace(/[\u0300-\u036f]/g, "")
            .replace(/đ/g, "d")
            .replace(/[^a-z0-9\s-]/g, "")
            .trim()
            .replace(/\s+/g, "-")
            .replace(/\-+/g, "-");
    }

    async function handleSaveCategory() {
        const name = document.getElementById("roomName").value.trim();
        let slug = document.getElementById("roomSlug").value.trim();
        const priorityRaw = document.getElementById("roomPriority").value.trim();
        const status = parseInt(document.getElementById("roomStatus").value);

        const saveBtn = document.querySelector(".btn-save");
        saveBtn.disabled = true;
        saveBtn.innerText = "Đang lưu...";

        if (!name) {
            showToast("Vui lòng nhập tên danh mục tin", "danger");
            resetBtn();
            return;
        }

        if (priorityRaw === "") {
            showToast("Vui lòng nhập độ ưu tiên", "danger");
            resetBtn();
            return;
        }

        const priority = parseInt(priorityRaw);
        if (isNaN(priority) || priority < 0) {
            showToast("Độ ưu tiên phải là số lớn hơn hoặc bằng 0", "danger");
            resetBtn();
            return;
        }

        if (!slug) {
            slug = generateSlug(name);
        }

        try {
            const image = await uploadImage(avatarFile);
            if (!image) {
                showToast("Vui lòng chọn ảnh danh mục", "danger");
                resetBtn();
                return;
            }

            const payload = {
                name,
                slug,
                image,
                priority,
                status,
            };

            const res = await fetch("/api/news-categories", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(payload),
            });

            const data = await res.json();

            if (data.error) {
                showToast(data.error, "danger");
            } else {
                showToast("Tạo danh mục thành công", "success");
                setTimeout(() => {
                    window.location.href = "/dashboard/Categorynews";
                }, 1500);
            }
        } catch (err) {
            showToast("Có lỗi khi tạo danh mục", "danger");
        } finally {
            resetBtn();
        }

        function resetBtn() {
            saveBtn.disabled = false;
            saveBtn.innerText = "Lưu";
        }
    }

    function showToast(message, type = "success") {
        let toastContainer = document.getElementById("toastContainer");
        if (!toastContainer) {
            toastContainer = document.createElement("div");
            toastContainer.id = "toastContainer";
            toastContainer.className = "position-fixed top-0 end-0 p-3";
            toastContainer.style.zIndex = "1050";
            document.body.appendChild(toastContainer);
        }

        const toast = document.createElement("div");
        toast.className = `toast align-items-center text-white bg-${type} border-0`;
        toast.setAttribute("role", "alert");
        toast.setAttribute("aria-live", "assertive");
        toast.setAttribute("aria-atomic", "true");

        toast.innerHTML = `
        <div class="d-flex">
          <div class="toast-body">${message}</div>
          <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
        </div>
      `;

        toastContainer.appendChild(toast);
        const bsToast = new bootstrap.Toast(toast, { delay: 4000 });
        bsToast.show();

        toast.addEventListener("hidden.bs.toast", () => toast.remove());
    }
</script>