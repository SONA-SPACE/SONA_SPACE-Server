<!-- Tiêu đề và Thanh công cụ -->
<div class="dashboard-header-row">
    <h2 class="dashboard-title">Màu sắc</h2>
    <div class="action-buttons">
        <button class="add-category-btn" onclick="window.location.href='/dashboard/colors/add'">
            <i class="fas fa-plus"></i> Thêm màu
        </button>
    </div>
</div>

<!-- Bộ lọc và Tìm kiếm -->
<div class="filter-row">
    <div class="search-container">
        <i class="fas fa-search search-icon"></i>
        <input type="text" class="search-input" placeholder="Tìm kiếm danh mục..." />
    </div>
    <div class="date-range">
        <i class="far fa-calendar-alt"></i>
        <span>01/04/2023 - 30/04/2023</span>
    </div>
    <div class="results-info">Đang tải dữ liệu...</div>
</div>

<!-- Bảng Danh mục -->
<div class="category-table-container">
    <table class="category-table" id="colorsTable">

        <thead>
            <tr>
                <th>Màu</th>
                <th>Sản phẩm</th>
                <th>Trạng thái</th>
                <th>Vị trí</th>
                <th>Ngày tạo</th>
                <th>Ngày cập nhật</th>
                <th>Slug</th>
                <th>Thao tác</th>
            </tr>
        </thead>
        <tbody>
            <!-- Dữ liệu sẽ được JS đổ vào -->
        </tbody>
    </table>
</div>

<script>
    // COLOR MANAGEMENT PAGE SCRIPT

    // Ensure DOM loaded
    document.addEventListener("DOMContentLoaded", function () {
        const token = localStorage.getItem("token");
        if (!token) {
            window.location.href = "/login";
            return;
        }

        getColors();

        function getColors() {
            fetch("http://localhost:3501/api/color/admin", {
                headers: {
                    Authorization: `Bearer ${token}`,
                },
            })
                .then((res) => res.json())
                .then((data) => renderColors(data))
                .catch((err) => {
                    console.error("Lỗi khi lấy dữ liệu màu sắc:", err);
                    document.querySelector(".results-info").textContent = "Không thể tải dữ liệu.";
                });
        }

        function renderColors(colors) {
            const tbody = document.querySelector("#colorsTable tbody");
            tbody.innerHTML = "";

            colors.forEach((color) => {
                const status = color.status === 1 ? "visible" : "hidden";
                const row = document.createElement("tr");

                row.innerHTML = `
                <td>
            <div class="category-info">
              <div class="category-image">
             
                    <div class="color-preview" style="background-color: ${color.color_hex}; width: 40px; height: 40px; border-radius: 4px;"></div>
              </div>
              <div class="color-name">${color.color_name}</div>
            </div>
          </td>

        <td>${color.product_count}</td>
        
        <td>
            <span class="status-indicator ${status === "visible" ? "visible" : "hidden"
                    }">
              <i class="fas ${status === "visible" ? "fa-eye" : "fa-eye-slash"
                    }"></i>
              ${status === "visible" ? "Hiển thị" : "Ẩn"}
            </span>
          </td>
        <td>${color.color_priority}</td>
        <td>${formatDate(color.created_at)}</td>
        <td>${formatDate(color.updated_at)}</td>
        <td>${color.color_slug}</td>
        <td>
          <div class="action-cell">
            <button class="action-button edit" onclick="window.location.href='/dashboard/colors/edit/${color.color_slug}'" title="Chỉnh sửa">
              <i class="fas fa-edit"></i>
            </button>
            <button class="action-button visibility" data-id="${color.color_id}" data-status="${status}" title="${status === "visible" ? "Ẩn màu" : "Hiển thị màu"}">
              <i class="fas ${status === "visible" ? "fa-eye-slash" : "fa-eye"}"></i>
            </button>
            <button class="action-button delete" data-id="${color.color_id}" data-name="${color.color_name}" title="Xóa màu">
              <i class="fas fa-trash"></i>
            </button>
          </div>
        </td>`;

                tbody.appendChild(row);
            });

            document.querySelectorAll(".action-button.delete").forEach((btn) => {
                btn.addEventListener("click", () => {
                    const id = btn.getAttribute("data-id");
                    const name = btn.getAttribute("data-name");
                    deleteColor(id, name);
                });
            });

            document.querySelectorAll(".action-button.visibility").forEach((btn) => {
                btn.addEventListener("click", () => {
                    const id = btn.getAttribute("data-id");
                    const currentStatus = btn.getAttribute("data-status");
                    changeStatus(id, currentStatus);
                });
            });

            document.querySelector(".results-info").textContent = `Hiển thị ${colors.length} kết quả`;
        }

        function deleteColor(id, name) {
            showConfirm({
                message: `Bạn có chắc muốn xóa màu \"${name}\"?`,
                onConfirm: () => {
                    fetch(`http://localhost:3501/api/color/${id}`, {
                        method: "DELETE",
                        headers: {
                            Authorization: `Bearer ${token}`,
                        },
                    })
                        .then((res) => res.json())
                        .then((data) => {
                            if (data.error) {
                                showToast(data.error, "danger");
                            } else {
                                showToast("Đã xóa màu thành công", "success");
                                setTimeout(getColors, 1000);
                            }
                        })
                        .catch(() => showToast("Lỗi khi xóa màu", "danger"));
                },
            });
        }

        function changeStatus(id, currentStatus) {
            const newStatus = currentStatus === "visible" ? 0 : 1;
            fetch(`http://localhost:3501/api/color/${id}`, {
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${token}`,
                },
                body: JSON.stringify({ status: newStatus }),
            })
                .then((res) => res.json())
                .then((data) => {
                    if (data.error) showToast(data.error, "danger");
                    else {
                        showToast("Đã cập nhật trạng thái màu", "success");
                        setTimeout(getColors, 1000);
                    }
                })
                .catch(() => showToast("Lỗi cập nhật trạng thái", "danger"));
        }

        function formatDate(dateStr) {
            if (!dateStr) return "-";
            return new Date(dateStr).toLocaleDateString("vi-VN");
        }

        function showToast(message, type = "success") {
            let toastContainer = document.getElementById("toastContainer");
            if (!toastContainer) {
                toastContainer = document.createElement("div");
                toastContainer.id = "toastContainer";
                toastContainer.className = "position-fixed top-0 end-0 p-3";
                toastContainer.style.zIndex = "1050";
                document.body.appendChild(toastContainer);
            }

            const toast = document.createElement("div");
            toast.className = `toast align-items-center text-white bg-${type} border-0`;
            toast.setAttribute("role", "alert");
            toast.setAttribute("aria-live", "assertive");
            toast.setAttribute("aria-atomic", "true");

            toast.innerHTML = `
      <div class="d-flex">
        <div class="toast-body">${message}</div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
      </div>
    `;

            toastContainer.appendChild(toast);
            const bsToast = new bootstrap.Toast(toast, { delay: 3000 });
            bsToast.show();

            toast.addEventListener("hidden.bs.toast", () => toast.remove());
        }

        function showConfirm({ message, confirmText = "Xác nhận", cancelText = "Hủy", onConfirm = () => { }, onCancel = () => { } }) {
            let popup = document.getElementById("confirmPopup");
            if (popup) popup.remove();

            popup = document.createElement("div");
            popup.id = "confirmPopup";
            popup.innerHTML = `
      <div class="confirm-dialog">
        <div class="confirm-message">${message}</div>
        <div class="confirm-actions">
          <button class="btn btn-confirm">${confirmText}</button>
          <button class="btn btn-cancel">${cancelText}</button>
        </div>
      </div>
      <div class="confirm-overlay"></div>
    `;

            document.body.appendChild(popup);

            popup.querySelector(".btn-confirm").onclick = () => {
                popup.remove();
                onConfirm();
            };
            popup.querySelector(".btn-cancel").onclick = () => {
                popup.remove();
                onCancel();
            };
            popup.querySelector(".confirm-overlay").onclick = () => {
                popup.remove();
                onCancel();
            };
        }
    });

</script>