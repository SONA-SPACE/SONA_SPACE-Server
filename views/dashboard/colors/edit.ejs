<div class="dashboard-header-row">
    <h2 class="dashboard-title">Sửa màu sắc</h2>
</div>

<div class="add-category-container">
    <div class="category-form-column">
        <div class="form-section">
            <h3 class="section-title">Thông tin màu sắc</h3>

            <div class="form-row">
                <div class="form-group">
                    <label for="colorName">Tên màu</label>
                    <input type="text" id="colorName" class="form-control" placeholder="Nhập tên màu" />
                </div>
                <div class="form-group">
                    <label for="colorHex">Chọn màu</label>
                    <div style="display: flex; align-items: center; gap: 12px;">
                        <input type="color" id="colorHex" class="form-control" />

                    </div>
                    <div style="margin-top: 8px;">
                        Mã màu: <input type="text" id="colorHexInput" class="form-control"
                            style="width: 120px; display: inline-block; margin-left: 5px;" value="#000000"
                            maxlength="7" />
                        <div class="invalid-feedback" id="hexValidationMessage" style="display: none;">
                            Mã màu không hợp lệ.
                        </div>
                    </div>
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label for="colorSlug">Slug</label>
                    <input type="text" id="colorSlug" class="form-control" />
                </div>
                <div class="form-group">
                    <label for="colorStatus">Trạng thái</label>
                    <div class="select-wrapper">
                        <select id="colorStatus" class="form-control">
                            <option value="1">Hiển thị</option>
                            <option value="0">Ẩn</option>
                        </select>
                        <i class="fas fa-chevron-down"></i>
                    </div>
                </div>
            </div>

            <div class="form-group">
                <label for="colorPriority">Độ ưu tiên</label>
                <input type="number" id="colorPriority" class="form-control" placeholder="Ví dụ: 1, 2, 3..." />
            </div>
        </div>

        <div class="form-actions">
            <button type="button" class="btn btn-cancel" onclick="window.history.back()">Hủy</button>
            <button type="button" class="btn btn-save">Lưu</button>
        </div>
    </div>
</div>
<script>
    const slug = window.location.pathname.split("/").pop();

    document.addEventListener("DOMContentLoaded", () => {
        const colorHexInput = document.getElementById("colorHexInput");
        const colorHexPicker = document.getElementById("colorHex");
        const colorPreviewCircle = document.getElementById("colorPreviewCircle");
        const colorNameInput = document.getElementById("colorName");
        const colorSlugInput = document.getElementById("colorSlug");
        const hexValidationMessage = document.getElementById("hexValidationMessage");

        // Function to update all color-related elements
        function updateColorDisplay(hex) {
            colorHexInput.value = hex;
            colorHexPicker.value = hex;
            colorPreviewCircle.style.backgroundColor = hex;
        }

        // Function to convert text to slug
        function convertToSlug(text) {
            return text
                .toLowerCase()
                .normalize("NFD") // Chuyển các ký tự có dấu thành không dấu
                .replace(/[\u0300-\u036f]/g, "") // Xóa các ký tự dấu
                .replace(/đ/g, "d") // Xử lý riêng chữ đ
                .replace(/[^a-z0-9\s-]/g, "") // Xóa các ký tự không phải chữ, số, khoảng trắng, dấu gạch ngang
                .replace(/\s+/g, "-") // Thay thế khoảng trắng bằng dấu gạch ngang
                .replace(/-+/g, "-") // Xóa nhiều dấu gạch ngang liên tiếp
                .trim(); // Cắt bỏ khoảng trắng ở đầu và cuối
        }

        fetch(`/api/color/admin`)
            .then(res => res.json())
            .then(colors => {
                const color = colors.find(c => c.color_slug === slug);
                if (!color) return showToast("Không tìm thấy màu", "danger");

                colorNameInput.value = color.color_name;
                colorSlugInput.value = color.color_slug;
                document.getElementById("colorPriority").value = color.color_priority || 0;
                document.getElementById("colorStatus").value = color.status;

                // Initialize color display
                updateColorDisplay(color.color_hex);

                document.querySelector(".btn-save").addEventListener("click", () => handleUpdate(color.color_id));
            });

        // Listen for changes from the color picker
        colorHexPicker.addEventListener("input", (e) => {
            const hex = e.target.value;
            updateColorDisplay(hex);
            colorHexInput.classList.remove("is-invalid"); // Remove validation styling
            hexValidationMessage.style.display = "none";
        });

        // Listen for changes from the hex code input
        colorHexInput.addEventListener("input", (e) => {
            let hex = e.target.value.trim();
            const isValid = /^#[0-9A-Fa-f]{6}$/i.test(hex);

            if (isValid) {
                updateColorDisplay(hex);
                colorHexInput.classList.remove("is-invalid");
                hexValidationMessage.style.display = "none";
            } else {
                // Only add invalid class, don't update color picker/circle until valid
                colorHexInput.classList.add("is-invalid");
                hexValidationMessage.style.display = "block"; // Show validation message
            }
        });

        // Listen for changes from the color name input to generate slug
        colorNameInput.addEventListener("input", (e) => {
            colorSlugInput.value = convertToSlug(e.target.value);
        });
    });

    async function handleUpdate(colorId) {
        const saveBtn = document.querySelector(".btn-save");
        saveBtn.disabled = true;
        saveBtn.innerText = "Đang lưu...";

        const color_name = document.getElementById("colorName").value.trim();
        const color_hex = document.getElementById("colorHexInput").value.trim();
        const color_slug = document.getElementById("colorSlug").value.trim();
        const color_priority = parseInt(document.getElementById("colorPriority").value) || 0;
        const status = parseInt(document.getElementById("colorStatus").value);

        // Final validation for hex code before sending to API
        if (!/^#[0-9A-Fa-f]{6}$/i.test(color_hex)) {
            showToast("Mã màu không hợp lệ. Vui lòng nhập mã HEX 6 ký tự bắt đầu bằng #.", "danger");
            document.getElementById("colorHexInput").classList.add("is-invalid");
            document.getElementById("hexValidationMessage").style.display = "block";
            saveBtn.disabled = false;
            saveBtn.innerText = "Lưu";
            return;
        }

        try {
            const res = await fetch(`/api/color/admin/${colorId}`, {
                method: "PUT",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ color_name, color_hex, color_slug, color_priority, status }),
            });

            const data = await res.json();

            if (data.error) {
                showToast(data.error, "danger");
            } else {
                showToast("Cập nhật màu thành công", "success");
                setTimeout(() => window.location.href = "/dashboard/colors", 1500);
            }
        } catch (err) {
            console.error("Update failed:", err);
            showToast("Lỗi khi cập nhật", "danger");
        } finally {
            saveBtn.disabled = false;
            saveBtn.innerText = "Lưu";
        }
    }

    function showToast(message, type = "success") {
        let toastContainer = document.getElementById("toastContainer");
        if (!toastContainer) {
            toastContainer = document.createElement("div");
            toastContainer.id = "toastContainer";
            toastContainer.className = "position-fixed top-0 end-0 p-3";
            toastContainer.style.zIndex = "1050";
            document.body.appendChild(toastContainer);
        }

        const toast = document.createElement("div");
        toast.className = `toast align-items-center text-white bg-${type} border-0`;
        toast.setAttribute("role", "alert");
        toast.setAttribute("aria-live", "assertive");
        toast.setAttribute("aria-atomic", "true");

        toast.innerHTML = `
            <div class="d-flex">
                <div class="toast-body">${message}</div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
            </div>`;

        toastContainer.appendChild(toast);
        const bsToast = new bootstrap.Toast(toast, { delay: 4000 });
        bsToast.show();
        toast.addEventListener("hidden.bs.toast", () => toast.remove());
    }
</script>
<style>
    input[type="color"] {
        width: 40px;
        height: 40px;
        padding: 0;
        border: 1px solid #ccc;
        border-radius: 50%;
        background-color: #fff;
        cursor: pointer;
    }

    /* Thêm CSS cho trường hợp input không hợp lệ */
    .form-control.is-invalid {
        border-color: #dc3545;
        padding-right: calc(1.5em + 0.75rem);
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: right calc(0.375em + 0.1875rem) center;
        background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
    }

    .invalid-feedback {
        color: #dc3545;
        font-size: 0.875em;
        margin-top: 0.25rem;
    }
</style>