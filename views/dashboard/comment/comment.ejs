<!-- HTML hiển thị danh sách vật liệu -->
<div class="dashboard-header-row">
    <h2 class="dashboard-title">Quản lý bình luận</h2>
    <!-- <div class="action-buttons">
        <button class="add-category-btn" onclick="window.location.href='/dashboard/material/add'">
            <i class="fas fa-plus"></i> Thêm vật liệu
        </button>
    </div> -->
</div>

<div class="filter-row">
    <div class="search-container">
        <i class="fas fa-search search-icon"></i>
        <input type="text" class="search-input" placeholder="Tìm kiếm bình luận..." id="searchInput" />
    </div>
    <!-- <div class="date-range">
        <i class="far fa-calendar-alt"></i>
        <span>01/04/2023 - 30/04/2023</span>
    </div> -->
    <div class="results-info">Đang tải dữ liệu...</div>
</div>

<div class="category-table-container">
    <table class="category-table" id="materialsTable">
        <thead>
            <tr>
                <th class="filterable" data-column="order_hash">Mã đơn hàng</th>
                <th class="filterable" data-column="user_name">
                    Khách hàng
                    <div class="header-filter">
                        <i class="fas fa-chevron-down filter-icon"></i>
                        <div class="filter-dropdown">
                            <a class="filter-item" href="#" data-sort-order="asc">A-Z</a>
                            <a class="filter-item" href="#" data-sort-order="desc">Z-A</a>
                            <a class="filter-item" href="#" data-filter-value="all">Tất cả</a>
                        </div>
                    </div>
                </th>
                <th class="filterable" data-column="product_name">
                    Sản phẩm
                    <div class="header-filter">
                        <i class="fas fa-chevron-down filter-icon"></i>
                        <div class="filter-dropdown">
                            <a class="filter-item" href="#" data-sort-order="asc">A-Z</a>
                            <a class="filter-item" href="#" data-sort-order="desc">Z-A</a>
                            <a class="filter-item" href="#" data-filter-value="all">Tất cả</a>
                        </div>
                    </div>
                </th>
                <th class="filterable" data-column="comment_rating">
                    Sao
                    <div class="header-filter">
                        <i class="fas fa-chevron-down filter-icon"></i>
                        <div class="filter-dropdown">
                            <a class="filter-item" href="#" data-sort-order="desc">Cao nhất</a>
                            <a class="filter-item" href="#" data-sort-order="asc">Thấp nhất</a>
                            <a class="filter-item" href="#" data-filter-value="all">Tất cả</a>
                        </div>
                    </div>
                </th>
                <th>Tiêu đề</th>
                <th>Bình luận</th>
                <th>Lượt thích bình luận</th>
                <th class="filterable" data-column="comment_status">
                    Trạng thái
                    <div class="header-filter">
                        <i class="fas fa-chevron-down filter-icon"></i>
                        <div class="filter-dropdown">
                            <a class="filter-item" href="#" data-filter-value="1">Hiển thị</a>
                            <a class="filter-item" href="#" data-filter-value="0">Ẩn</a>
                            <a class="filter-item" href="#" data-filter-value="all">Tất cả</a>
                        </div>
                    </div>
                </th>
                <th class="filterable" data-column="created_at">
                    Ngày bình luận
                    <div class="header-filter">
                        <i class="fas fa-chevron-down filter-icon"></i>
                        <div class="filter-dropdown">
                            <a class="filter-item" href="#" data-sort-order="desc">Mới nhất</a>
                            <a class="filter-item" href="#" data-sort-order="asc">Cũ nhất</a>
                            <a class="filter-item" href="#" data-filter-value="all">Tất cả</a>
                        </div>
                    </div>
                </th>
                <th>Ngày cập nhật</th>
                <th>Thao tác</th>
            </tr>
        </thead>
        <tbody>
            <!-- Dữ liệu sẽ được JS đổ vào -->
        </tbody>
    </table>
</div>
<div id="confirmationModal" class="modal-overlay hidden1">
    <div class="modal-content">
        <h3 id="modalTitle">Xác nhận hành động</h3>
        <p id="modalMessage"></p>
        <div class="modal-buttons">
            <button id="cancelBtn" class="cancel-btn">Hủy</button>
            <button id="confirmBtn" class="confirm-btn">Xác nhận</button>
        </div>
    </div>
</div>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const AUTH_TOKEN = localStorage.getItem("token");
        let allComments = [];
        let currentFilteredComments = [];

        const modal = document.getElementById('confirmationModal');
        const modalTitle = document.getElementById('modalTitle');
        const modalMessage = document.getElementById('modalMessage');
        const confirmBtn = document.getElementById('confirmBtn');
        const cancelBtn = document.getElementById('cancelBtn');

        let currentConfirmCallback = null;

        function showModal(title, message, onConfirmCallback) {
            modalTitle.textContent = title;
            modalMessage.textContent = message;
            currentConfirmCallback = onConfirmCallback;
            modal.classList.remove('hidden1');
        }

        function hideModal() {
            modal.classList.add('hidden1');
            currentConfirmCallback = null;
        }

        confirmBtn.addEventListener('click', () => {
            if (currentConfirmCallback) {
                currentConfirmCallback();
            }
            hideModal();
        });

        cancelBtn.addEventListener('click', () => {
            hideModal();
        });

        // Tìm kiếm
        document.getElementById("searchInput").addEventListener("keyup", function () {
            const searchTerm = this.value.toLowerCase();
            const filtered = allComments.filter(comment =>
                (comment.user_name || "").toLowerCase().includes(searchTerm) ||
                (comment.product_name || "").toLowerCase().includes(searchTerm) ||
                (comment.comment_title || "").toLowerCase().includes(searchTerm) ||
                (comment.comment_description || "").toLowerCase().includes(searchTerm)
            );
            currentFilteredComments = filtered;
            renderComments(currentFilteredComments);
        });

        // Filter/sort logic
        document.querySelectorAll('.header-filter').forEach(filter => {
            filter.addEventListener('click', function (e) {
                e.preventDefault();
                e.stopPropagation();
                this.classList.toggle('active');
                document.querySelectorAll('.header-filter').forEach(otherFilter => {
                    if (otherFilter !== this) {
                        otherFilter.classList.remove('active');
                    }
                });
            });
        });
        document.querySelectorAll('.filter-dropdown .filter-item').forEach(item => {
            item.addEventListener('click', function (e) {
                e.preventDefault();
                e.stopPropagation();
                const th = this.closest('th');
                const columnDataName = th.getAttribute('data-column');
                const filterValue = this.getAttribute('data-filter-value');
                const sortOrder = this.getAttribute('data-sort-order');
                if (sortOrder) {
                    sortComments(columnDataName, sortOrder);
                } else if (filterValue) {
                    filterCommentsByColumn(columnDataName, filterValue);
                }
                this.closest('.header-filter').classList.remove('active');
            });
        });
        document.addEventListener('click', function () {
            document.querySelectorAll('.header-filter').forEach(filter => {
                filter.classList.remove('active');
            });
        });

        function sortComments(columnDataName, sortOrder) {
            let commentsToSort = [...currentFilteredComments];
            commentsToSort.sort((a, b) => {
                let valA, valB;
                switch (columnDataName) {
                    case 'user_name':
                    case 'product_name':
                        valA = (a[columnDataName] || '').toLowerCase();
                        valB = (b[columnDataName] || '').toLowerCase();
                        return sortOrder === 'asc' ? valA.localeCompare(valB, 'vi') : valB.localeCompare(valA, 'vi');
                    case 'comment_rating':
                        valA = parseInt(a.comment_rating || 0);
                        valB = parseInt(b.comment_rating || 0);
                        return sortOrder === 'asc' ? valA - valB : valB - valA;
                    case 'created_at':
                        valA = a.created_at ? new Date(a.created_at).getTime() : 0;
                        valB = b.created_at ? new Date(b.created_at).getTime() : 0;
                        return sortOrder === 'asc' ? valA - valB : valB - valA;
                    default:
                        return 0;
                }
            });
            renderComments(commentsToSort);
        }
        function filterCommentsByColumn(columnDataName, filterValue) {
            let filtered = [...allComments];
            if (columnDataName === 'comment_status' && filterValue !== 'all') {
                filtered = filtered.filter(comment => String(comment.comment_status) === filterValue);
            }
            currentFilteredComments = filtered;
            renderComments(currentFilteredComments);
        }

        function getComments() {
            fetch("/api/comments/admin", {
                headers: {
                    'Authorization': `Bearer ${AUTH_TOKEN}`
                }
            })
                .then((res) => {
                    if (!res.ok) {
                        return res.json().then(err => { throw new Error(err.error || 'Failed to fetch comments'); });
                    }
                    return res.json();
                })
                .then((comments) => {
                    allComments = comments;
                    currentFilteredComments = [...allComments];
                    renderComments(currentFilteredComments);
                })
                .catch((err) => {
                    document.querySelector(".results-info").textContent =
                        `Không thể tải dữ liệu: ${err.message}`;
                });
        }

        // Function to render comments into the table
        function renderComments(comments) {
            const tableBody = document.querySelector("#materialsTable tbody");
            tableBody.innerHTML = "";

            comments.forEach((comment) => {
                const statusText = comment.comment_status === 1 ? "Hiển thị" : "Ẩn";
                const statusIcon = comment.comment_status === 1 ? "fa-eye" : "fa-eye-slash";

                const row = document.createElement("tr");
                row.innerHTML = `
                    <td>${comment.order_hash || "-"}</td>
                    <td>${comment.user_name || "-"}</td>
                    <td>${comment.product_name || "-"}</td>
                    <td>${comment.comment_rating || "-"}</td>
                    <td>${comment.comment_title || "-"}</td>
                    <td class="description-cell">${comment.comment_description || "-"}</td>
                    <td>${comment.comment_reaction || 0}</td>
                    <td>
                        <span class="status-indicator ${comment.comment_status === 1 ? "visible" : "hidden"}">
                            <i class="fas ${statusIcon}"></i> ${statusText}
                        </span>
                    </td>

                    <td>${formatDate(comment.created_at)}</td>
                    <td>${formatDate(comment.updated_at)}</td>
                    <td>
                        <div class="action-cell">
                           
                            <button class="action-button visibility" data-id="${comment.comment_id}" data-status="${comment.comment_status}">
                                <i class="fas ${statusIcon}"></i>
                            </button>
                        
                        </div>
                    </td>
                `;
                tableBody.appendChild(row);

                const visibilityButton = row.querySelector(`.action-button.visibility`);
                if (visibilityButton) {
                    visibilityButton.addEventListener('click', function () {
                        const commentId = this.dataset.id;
                        const currentStatus = parseInt(this.dataset.status);
                        const newStatus = currentStatus === 1 ? 0 : 1;
                        const actionText = newStatus === 1 ? "hiển thị" : "ẩn";
                        const confirmMessage = `Bạn có chắc chắn muốn ${actionText} bình luận của ${comment.user_name} không?`;
                        showModal("Xác nhận thay đổi trạng thái", confirmMessage, () => {
                            toggleCommentStatus(commentId);
                        });
                    });
                }
                const deleteButton = row.querySelector(`.action-button.delete`);
                if (deleteButton) {
                    deleteButton.addEventListener('click', function () {
                        const commentId = this.dataset.id;
                        const commentTitle = this.dataset.name;
                        const confirmMessage = `Bạn có chắc chắn muốn xóa bình luận "${commentTitle}" không?`;
                        showModal("Xác nhận xóa bình luận", confirmMessage, () => {
                            deleteComment(commentId);
                        });
                    });
                }
            });

            document.querySelector(".results-info").textContent =
                `Hiển thị ${comments.length} bình luận`;
        }

        async function updateCommentStatus(commentId, newStatus) {
            try {
                const response = await fetch(`/api/comments/${commentId}/status`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${AUTH_TOKEN}`
                    },
                    body: JSON.stringify({ status: newStatus })
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || 'Failed to update comment status');
                }

                const result = await response.json();
                const button = document.querySelector(`.action-button.visibility[data-id="${commentId}"]`);
                const icon = button.querySelector("i");
                const row = button.closest("tr");

                icon.classList.remove("fa-eye", "fa-eye-slash");
                icon.classList.add(newStatus === 1 ? "fa-eye" : "fa-eye-slash");
                button.dataset.status = newStatus;

                const statusCell = row.querySelector(".status-indicator");
                if (statusCell) {
                    statusCell.innerHTML = `<i class="fas ${newStatus === 1 ? "fa-eye" : "fa-eye-slash"}"></i> ${newStatus === 1 ? "Hiển thị" : "Ẩn"}`;
                    statusCell.className = `status-indicator ${newStatus === 1 ? "visible" : "hidden"}`;
                }

            } catch (error) {
                alert(`Lỗi: ${error.message}`);
            }
        }

        async function deleteComment(commentId) {
            try {
                const response = await fetch(`/api/comments/${commentId}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${AUTH_TOKEN}`
                    }
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || 'Failed to delete comment');
                }

                const result = await response.json();
                getComments(); // Reload data after deletion
            } catch (error) {
                alert(`Lỗi: ${error.message}`);
            }
        }

        function formatDate(dateStr) {
            if (!dateStr) return "-";
            try {

                const date = new Date(dateStr);
                if (isNaN(date.getTime())) {
                    return "-";
                }
                return date.toLocaleDateString("vi-VN", {
                    year: 'numeric',
                    month: '2-digit',
                    day: '2-digit',
                    hour: '2-digit',
                    minute: '2-digit',
                    second: '2-digit',
                    hour12: false
                });
            } catch (e) {
                return "-";
            }
        }

        function toggleCommentStatus(commentId) {
            fetch(`/api/comments/${commentId}/toggle-status`, {
                method: 'PUT',
                headers: {
                    'Authorization': `Bearer ${AUTH_TOKEN}`
                }
            })
                .then((res) => res.json())
                .then((data) => {
                    if (data.error) {
                        alert(data.error);
                    } else {
                        getComments();
                    }
                })
                .catch(() => alert("Lỗi khi cập nhật trạng thái bình luận"));
        }

        getComments();
    });
</script>
<style>
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background: rgba(0, 0, 0, 0.3);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
    }

    .modal-overlay.hidden1 {
        display: none !important;
    }

    .modal-content {
        background: #fff;
        padding: 24px 32px;
        border-radius: 8px;
        min-width: 320px;
    }

    .modal-buttons {
        display: flex;
        gap: 16px;
        justify-content: flex-end;
        margin-top: 16px;
    }

    .cancel-btn,
    .confirm-btn {
        padding: 6px 18px;
        border-radius: 4px;
        border: none;
    }

    .cancel-btn {
        background: #eee;
    }

    .confirm-btn {
        background: #007bff;
        color: #fff;
    }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background: rgba(0, 0, 0, 0.3);
        display: flex !important;
        align-items: center;
        justify-content: center;
        z-index: 99999 !important;
    }

    .modal-overlay.hidden1 {
        display: none !important;
    }

    .modal-content {
        background: #fff;
        padding: 24px 32px;
        border-radius: 8px;
        min-width: 320px;
    }

    .modal-buttons {
        display: flex;
        gap: 16px;
        justify-content: flex-end;
        margin-top: 16px;
    }

    .cancel-btn,
    .confirm-btn {
        padding: 6px 18px;
        border-radius: 4px;
        border: none;
    }

    .cancel-btn {
        background: #eee;
    }

    .confirm-btn {
        background: #007bff;
        color: #fff;
    }
</style>
<style>
    .modal-overlay {
        position: fixed !important;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background: rgba(0, 0, 0, 0.3);
        display: flex !important;
        align-items: center;
        justify-content: center;
        z-index: 99999 !important;
    }

    .modal-overlay.hidden1 {
        display: none !important;
    }

    .modal-content {
        background: #fff;
        padding: 24px 32px;
        border-radius: 8px;
        min-width: 320px;
    }

    .modal-buttons {
        display: flex;
        gap: 16px;
        justify-content: flex-end;
        margin-top: 16px;
    }

    .cancel-btn,
    .confirm-btn {
        padding: 6px 18px;
        border-radius: 4px;
        border: none;
    }

    .cancel-btn {
        background: #eee;
    }

    .confirm-btn {
        background: #007bff;
        color: #fff;
    }
</style>