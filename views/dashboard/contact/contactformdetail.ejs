<!-- Ti√™u ƒë·ªÅ -->
<div class="dashboard-header-row">
  <h2 class="dashboard-title">Chi ti·∫øt form</h2>
</div>
<!-- Layout -->
<div class="detail-form-container">
  <!-- Form -->
  <div class="form-column">
    <div class="form-section">
      <div class="form-section-header">
        <div class="form-section-header-left">
          <h3 class="section-title">Th√¥ng tin thi·∫øt k·∫ø theo y√™u c·∫ßu</h3>
          <p class="section-description">
            Ng√†y t·∫°o: <span id="created_at"></span>
          </p>
          <p class="section-description">
            Ng√†y c·∫≠p nh·∫≠t: <span id="updated_at"></span>
          </p>
          <p class="section-description">
            Tr·∫°ng th√°i: <span id="status_text" class="status-text"></span>
          </p>
        </div>
        <div class="form-section-header-right">
          <select name="status" id="status">
            <option value="PENDING">Ch·ªù x·ª≠ l√Ω</option>
            <option value="IN_PROGRESS">ƒêang x·ª≠ l√Ω</option>
            <option value="DEPOSIT">ƒê√£ ƒë·∫∑t c·ªçc</option>
            <option value="RESOLVED">ƒê√£ x·ª≠ l√Ω</option>
            <option value="REJECTED">T·ª´ ch·ªëi</option>
          </select>
        </div>
      </div>
      <div class="form-row">
        <div class="form-group">
          <label for="staff_name">Nh√¢n vi√™n</label>
          <select id="staff_name" class="form-control">
            <option value="">Ch·ªçn nh√¢n vi√™n</option>
          </select>
        </div>
      </div>

      <div class="form-row">
        <div class="form-group">
          <label for="name">T√™n Kh√°ch H√†ng</label>
          <input type="text" id="name" class="form-control" placeholder="Nh·∫≠p t√™n ph√≤ng" />
        </div>
        <div class="form-group">
          <label for="email">Email</label>
          <input type="email" id="email" class="form-control" placeholder="v√≠ d·ª•: phong-khach, phong-ngu" />
        </div>
      </div>

      <div class="form-row">
        <div class="form-group">
          <label for="phone">S·ªë ƒëi·ªán tho·∫°i</label>
          <input type="text" id="phone" class="form-control" placeholder="V√≠ d·ª•: 0909090909" />
        </div>
        <div class="form-group">
          <label for="budget">Ng√¢n s√°ch c·ªßa kh√°ch h√†ng</label>
          <input type="text" id="budget" class="form-control" placeholder="Ch∆∞a b√†n giao" />
        </div>
      </div>

      <div class="form-row">
        <div class="form-group">
          <label for="design_fee">Chi ph√≠ thi·∫øt k·∫ø</label>
          <input type="text" id="design_fee" class="form-control" placeholder="Ch∆∞a b√†n giao" />
        </div>
        <div class="form-group">
          <label for="design_deposits">Chi ph√≠ thu tr∆∞·ªõc ( T·ª± ƒë·ªông )</label>
          <input type="text" id="design_deposits" class="form-control" readonly style="pointer-events: none"
            placeholder="Ch∆∞a b√†n giao" />
        </div>
      </div>

      <div class="form-group">
        <label for="room_name">Kh√¥ng gian thi·∫øt k·∫ø</label>
        <input type="text" id="room_name" class="form-control" placeholder="V√≠ d·ª•: ph√≤ng kh√°ch, ph√≤ng ng·ªß" />
      </div>

      <div class="form-row">
        <div class="form-group">
          <label for="design_description">M√¥ t·∫£ y√™u c·∫ßu</label>
          <textarea id="design_description" class="form-control" rows="3"></textarea>
        </div>
      </div>

      <div class="form-row">
        <div class="form-group">
          <label for="drive">Link xem th√™m</label>
          <input type="text" id="drive" class="form-control" />
        </div>
      </div>
    </div>
  </div>
  <!-- C·ªôt ph·∫£i: S·∫£n ph·∫©m trong thi·∫øt k·∫ø -->
  <div class="design-products-column">
    <div class="form-section">
      <h3 class="section-title">S·∫£n ph·∫©m trong thi·∫øt k·∫ø</h3>

      <!-- Form th√™m s·∫£n ph·∫©m -->
      <div class="add-product-form">
        <div class="form-group">
          <label for="variant-select">Ch·ªçn s·∫£n ph·∫©m</label>
          <select id="variant-select" class="form-control">
            <option value="">Ch·ªçn m·ªôt s·∫£n ph·∫©m</option>
          </select>
        </div>
        <div class="form-group">
          <label for="quantity-input">S·ªë l∆∞·ª£ng</label>
          <input type="number" id="quantity-input" class="form-control" value="1" min="1" />
        </div>
        <div class="form-group">
          <label for="unit-price-input">ƒê∆°n gi√°</label>
          <input type="text" id="unit-price-input" class="form-control" value="0" />
        </div>
        <div class="form-group">
          <label for="first_image">H√¨nh ·∫£nh s·∫£n ph·∫©m</label>
          <div class="main-upload-area">
            <div class="upload-placeholder" id="first_image_drop_area">
              <i class="far fa-image"></i>
              <p>Drop image here, or browse</p>
              <p class="upload-hint">jpeg, png - k√≠ch th∆∞·ªõc ngang</p>
            </div>
          </div>
        </div>
        <button type="button" class="btn btn-add" id="add-product-btn">
          Th√™m
        </button>
      </div>

      <!-- B·∫£ng s·∫£n ph·∫©m -->
      <div class="products-table-container">
        <table class="products-table">
          <thead>
            <tr>
              <th>·∫¢nh</th>
              <th>T√™n</th>
              <th style="white-space: nowrap">S·ªë l∆∞·ª£ng</th>
              <th style="white-space: nowrap">ƒê∆°n gi√°</th>
              <th style="white-space: nowrap">Th√†nh ti·ªÅn</th>
              <th></th>
            </tr>
          </thead>
          <tbody id="design-products-tbody">
            <!-- D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c ch√®n v√†o ƒë√¢y b·∫±ng JS -->
          </tbody>
        </table>
      </div>
      <div class="total-price-container">
        <table class="products-table" style="margin-top: 24px">
          <tbody>
            <tr>
              <td><strong>T·ªïng gi√° s·∫£n ph·∫©m:</strong></td>
              <td style="text-align: right">
                <span id="total-product-price">0 VNƒê</span>
              </td>
            </tr>
            <tr>
              <td><strong>Chi ph√≠ thi·∫øt k·∫ø:</strong></td>
              <td style="text-align: right">
                <span id="design_fee_text">0 VNƒê</span>
              </td>
            </tr>
            <tr>
              <td><strong>T·ªïng c·ªông:</strong></td>
              <td style="text-align: right; font-weight: bold">
                <span id="total-design-price">0 VNƒê</span>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
  </div>
  <!-- Row chi·∫øm di·ªán t√≠ch b·∫±ng container-->
  <div class="design-products-row">
    <div class="form-section">
      <h3 class="section-title">Th√¥ng tin chi ti·∫øt thi·∫øt k·∫ø</h3>
      <div class="form-row">
        <div class="form-group">
          <label for="style_design">Phong c√°ch thi·∫øt k·∫ø</label>
          <textarea id="style_design" class="form-control" rows="3"></textarea>
        </div>
        <div class="form-group">
          <label for="require_design">M√¥ t·∫£ y√™u c·∫ßu</label>
          <textarea id="require_design" class="form-control" rows="3"></textarea>
        </div>
      </div>
      <div class="form-row">
        <div class="form-group">
          <label for="different_information">Th√¥ng tin kh√°c</label>
          <textarea id="different_information" class="form-control" rows="3"></textarea>
        </div>
        <div class="form-group">
          <label for="remarks">Ghi ch√∫</label>
          <textarea id="remarks" class="form-control" rows="3"></textarea>
        </div>
      </div>
    </div>
  </div>
  <!-- N√∫t -->
    <div class="form-actions">
      <button type="button" class="btn btn-cancel">H·ªßy</button>
      <button type="button" class="btn btn-save">L∆∞u</button>
    </div>
</div>

<div class="detail-form-generateAI">
  <div class="ai-design-assistant">
    <div class="ai-assistant-header">
      <h3 class="ai-title">
        <i class="fas fa-robot"></i>
        AI H·ªó tr·ª£ thi·∫øt k·∫ø
      </h3>
      <span class="ai-status-indicator" id="aiStatusIndicator">
        <i class="fas fa-circle"></i>
        <span id="aiStatusText">ƒêang k·∫øt n·ªëi...</span>
      </span>
    </div>
    
    <!-- C·ªôt Chat AI b√™n tr√°i -->
    <div class="ai-chat-container">
      <!-- Chat messages area -->
      <div class="ai-chat-messages" id="aiChatMessages">
        <div class="ai-message ai-bot">
          <div class="ai-message-avatar">
            <i class="fas fa-robot"></i>
          </div>
          <div class="ai-message-content">
            <p>Xin ch√†o! T√¥i l√† AI Assistant c·ªßa SONA SPACE. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:</p>
            <ul>
              <li>üé® Ph√¢n t√≠ch v√† ƒë·ªÅ xu·∫•t phong c√°ch thi·∫øt k·∫ø</li>
              <li>üõãÔ∏è G·ª£i √Ω s·∫£n ph·∫©m ph√π h·ª£p v·ªõi kh√¥ng gian</li>
              <li>üí° T∆∞ v·∫•n b·ªë c·ª•c v√† m√†u s·∫Øc</li>
              <li>üìä ∆Ø·ªõc t√≠nh ng√¢n s√°ch thi·∫øt k·∫ø</li>
            </ul>
            <p>H√£y chia s·∫ª th√¥ng tin v·ªÅ d·ª± √°n thi·∫øt k·∫ø ho·∫∑c upload h√¨nh ·∫£nh tham kh·∫£o!</p>
          </div>
        </div>
      </div>

      <!-- Typing indicator -->
      <div class="ai-typing-indicator" id="aiTypingIndicator">
        <div class="ai-message ai-bot">
          <div class="ai-message-avatar">
            <i class="fas fa-robot"></i>
          </div>
          <div class="ai-message-content">
            <div class="typing-dots">
              <span></span>
              <span></span>
              <span></span>
            </div>
            <span class="typing-text">AI ƒëang suy nghƒ©...</span>
          </div>
        </div>
      </div>

      <!-- Input area -->
      <div class="ai-chat-input">
        <div class="ai-input-container">
          <!-- Image upload -->
          <div class="ai-file-upload">
            <input type="file" id="aiImageInput" accept="image/*" style="display: none;">
            <button type="button" class="ai-upload-btn" onclick="document.getElementById('aiImageInput').click()">
              <i class="fas fa-camera"></i>
            </button>
          </div>
          
          <!-- Text input -->
          <div class="ai-text-input-wrapper">
            <textarea 
              id="aiMessageInput" 
              placeholder="H·ªèi AI v·ªÅ thi·∫øt k·∫ø, upload ·∫£nh tham kh·∫£o, ho·∫∑c m√¥ t·∫£ y√™u c·∫ßu..."
              rows="1"
            ></textarea>
          </div>
          
          <!-- Send button -->
          <button type="button" class="ai-send-btn" id="aiSendBtn">
            <i class="fas fa-paper-plane"></i>
          </button>
        </div>
        
        <!-- Selected image preview -->
        <div class="ai-selected-image" id="aiSelectedImage" style="display: none;">
          <img id="aiSelectedImagePreview" src="" alt="Selected image">
          <button type="button" class="ai-remove-image" onclick="removeAISelectedImage()">
            <i class="fas fa-times"></i>
          </button>
        </div>

        <!-- Quick actions -->
        <div class="ai-quick-actions">
          <button type="button" class="ai-quick-btn" onclick="sendQuickMessage('Ph√¢n t√≠ch y√™u c·∫ßu thi·∫øt k·∫ø hi·ªán t·∫°i')">
            üìã Ph√¢n t√≠ch y√™u c·∫ßu
          </button>
          <button type="button" class="ai-quick-btn" onclick="sendQuickMessage('ƒê·ªÅ xu·∫•t s·∫£n ph·∫©m cho ' + document.getElementById('room_name').value)">
            üõãÔ∏è G·ª£i √Ω s·∫£n ph·∫©m  
          </button>
          <button type="button" class="ai-quick-btn" onclick="sendQuickMessage('∆Ø·ªõc t√≠nh ng√¢n s√°ch cho d·ª± √°n v·ªõi s·ªë ti·ªÅn ' + document.getElementById('budget').value)">
            üí∞ ∆Ø·ªõc t√≠nh ng√¢n s√°ch
          </button>
          <button type="button" class="ai-quick-btn" onclick="testProductSuggestion()">
            üß™ Test AI g·ª£i √Ω
          </button>
        </div>
      </div>
    </div>

    <!-- C·ªôt S·∫£n ph·∫©m b√™n ph·∫£i -->
    <div class="ai-products-column">
      <div class="products-header">
        <h4><i class="fas fa-cubes"></i> S·∫£n ph·∫©m ƒë·ªÅ xu·∫•t</h4>
        <a href="/dashboard/products" class="view-all-btn">Xem t·∫•t c·∫£</a>
      </div>
      
      <div id="aiSuggestedProducts">
        <!-- S·∫£n ph·∫©m s·∫Ω ƒë∆∞·ª£c load b·∫±ng JavaScript -->
        <div class="loading-products" style="text-align: center; padding: 20px; color: #666;">
          <i class="fas fa-spinner fa-spin"></i>
          <p>ƒêang t·∫£i s·∫£n ph·∫©m...</p>
        </div>
      </div>
    </div>
  </div>
</div>

<link href="/tom-select/dist/css/tom-select.bootstrap5.min.css" rel="stylesheet" />
<script src="/tom-select/dist/js/tom-select.complete.min.js"></script>
<script>
  const id = window.location.pathname.split("/").pop();
  let total_product_price = 0;
  let design_fee = 0;
  const designFeeInput = document.getElementById("design_fee");
  const designDepositsInput = document.getElementById("design_deposits");

  function formatDate(dateStr) {
    if (!dateStr) return "-";
    return new Date(dateStr).toLocaleDateString("vi-VN");
  }

  function formatCurrency(value) {
    if (typeof value !== "number" || isNaN(value)) return "0 VNƒê";
    return new Intl.NumberFormat("vi-VN", {
      style: "currency",
      currency: "VND",
    }).format(value);
  }

  function handleDesignFeeInput(e) {
    // L·∫•y s·ªë, b·ªè d·∫•u ch·∫•m
    let raw = e.target.value.replace(/\./g, "").replace(/[^0-9]/g, "");
    if (!raw) {
      designFeeInput.value = "";
      designDepositsInput.value = "";
      return;
    }
    // Hi·ªÉn th·ªã l·∫°i design_fee theo d·∫°ng ti·ªÅn Vi·ªát
    designFeeInput.value = raw.replace(/\B(?=(\d{3})+(?!\d))/g, ".");
    // T√≠nh 30% v√† hi·ªÉn th·ªã v√†o design_deposits
    const deposit = Math.floor(Number(raw) * 0.3);
    designDepositsInput.value = deposit
      .toString()
      .replace(/\B(?=(\d{3})+(?!\d))/g, ".");
  }

  async function loadStaff() {
    const res = await fetch(`/api/users/staff`);
    const data = await res.json();
    if (res.ok) {
      const select = document.getElementById("staff_name");
      select.innerHTML = '<option value="">Ch·ªçn nh√¢n vi√™n</option>';
      data.users.forEach((staff) => {
        const option = document.createElement("option");
        option.value = staff.user_id;
        option.textContent = staff.user_name;
        select.appendChild(option);
      });
      // G√°n value khi ch·∫Øc ch·∫Øn option ƒë√£ render xong
      select.value = data.staff_name || "";
    } else {
      showToast(data.error || "C√≥ l·ªói x·∫£y ra", "danger");
    }
  }

  function loadVariants() {
    fetch(`/api/products/variants`)
      .then((res) => res.json())
      .then((data) => {
        const select = document.getElementById("variant-select");
        select.innerHTML = '<option value="">Ch·ªçn m·ªôt s·∫£n ph·∫©m</option>';
        data.forEach((variant) => {
          const option = document.createElement("option");
          option.dataset.image = variant.first_image;
          option.value = variant.variant_id;
          option.textContent = `${variant.product_name} - ${variant.variant_name || variant.slug
            } (${variant.sku || ""})`;
          // L∆∞u gi√° v√†o thu·ªôc t√≠nh data
          option.dataset.price = variant.price;
          option.dataset.priceSale = variant.price_sale || "";
          select.appendChild(option);
        });

        // N·∫øu ƒë√£ c√≥ Tom Select instance, destroy tr∆∞·ªõc khi kh·ªüi t·∫°o l·∫°i (n·∫øu c·∫ßn)
        if (select.tomselect) {
          select.tomselect.destroy();
        }
        // Kh·ªüi t·∫°o Tom Select
        new TomSelect("#variant-select", {
          create: false,
          sortField: "text",
          // placeholder: "Ch·ªçn m·ªôt s·∫£n ph·∫©m",
          allowEmptyOption: true,
        });
      });
  }

  document.addEventListener("DOMContentLoaded", async () => {
    loadData();
    await loadStaff();
    loadVariants();
    loadDesignDetails();

    // handle save
    document.querySelector(".btn-save").addEventListener("click", handleUpdate);

    // handle add product
    document
      .getElementById("add-product-btn")
      .addEventListener("click", handleAddProduct);

    // handle change variant
    document
      .getElementById("variant-select")
      .addEventListener("change", function () {
        const selectedOption = this.options[this.selectedIndex];
        const price =
          selectedOption.dataset.priceSale || selectedOption.dataset.price;
        document.getElementById("unit-price-input").value = price || 0;
        document.getElementById(
          "first_image_drop_area"
        ).innerHTML = `<img src="${selectedOption.dataset.image}" alt="${selectedOption.textContent}" style="height: 30%; width: 30%;">`;
      });

    // G·∫Øn s·ª± ki·ªán v√†o input design_fee
    designFeeInput.addEventListener("input", handleDesignFeeInput);
  });

  async function loadDesignDetails() {
    const res = await fetch(`/api/contact-form-design/${id}/details`);
    const data = await res.json();
    if (res.ok) {
      const tbody = document.getElementById("design-products-tbody");
      tbody.innerHTML = "";
      total_product_price = 0;
      
      data.forEach((item, index) => {
        const row = document.createElement("tr");
        
        // Try different possible ID field names
        const possibleIds = [
          'contact_form_design_detail_id',
          'id', 
          'detail_id',
          'design_detail_id'
        ];
        
        let detailId = null;
        for (const idField of possibleIds) {
          if (item[idField]) {
            detailId = item[idField];
            break;
          }
        }
        
        row.dataset.id = detailId;
        row.dataset.variantId = item.variant_id; // Add variant_id for easier removal
        row.innerHTML = `
          <td style="white-space: nowrap; min-width: 100px;">
            <div class="product-image-container">
              <img src="${item.first_image}" alt="${item.product_name
          }" style="width: 80px; height: 35px;">
            </div>
          </td>
          <td style="white-space: nowrap;">${item.product_name}</td>
          <td style="white-space: nowrap;">${item.quantity}</td>
          <td style="white-space: nowrap;">${formatCurrency(
            Number(item.unit_price)
          )}</td>
          <td style="white-space: nowrap;">${formatCurrency(
            Number(item.total_price)
          )}</td>
          <td><button class="btn-remove-product" onclick="handleRemoveProduct('${item.variant_id
          }')"><i class="fas fa-trash-alt"></i></button></td>
        `;
        tbody.appendChild(row);
        total_product_price += Number(item.total_price) || 0;
      });
      
      updateProductPriceDisplay();
      updateTotalPrice();
    } else {
      showToast(data.error || "C√≥ l·ªói x·∫£y ra", "danger");
    }
  }

  async function handleAddProduct() {
    const variantSelect = document.getElementById("variant-select");
    const variant_id = variantSelect.value;
    const quantity = Number(document.getElementById("quantity-input").value) || 1;
    const unit_price = document.getElementById("unit-price-input").value.replace(/\./g, "").replace(/[^0-9]/g, "");

    if (!variant_id) {
      showToast("Vui l√≤ng ch·ªçn m·ªôt s·∫£n ph·∫©m.", "danger");
      return;
    }

    if (!unit_price || Number(unit_price) <= 0) {
      showToast("Vui l√≤ng nh·∫≠p ƒë∆°n gi√° h·ª£p l·ªá.", "danger");
      return;
    }

    const selectedOption = variantSelect.options[variantSelect.selectedIndex];
    const productName = selectedOption.textContent;
    const productImage = selectedOption.dataset.image || '/images/no-image.png';

    // Disable button to prevent double submission
    const addBtn = document.getElementById("add-product-btn");
    addBtn.disabled = true;
    addBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> ƒêang th√™m...';

    try {
      const res = await fetch(`/api/contact-form-design/${id}/details`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${localStorage.getItem("token")}`,
        },
        body: JSON.stringify({ 
          variant_id, 
          quantity, 
          unit_price: Number(unit_price)
        }),
      });

      const data = await res.json();
      if (res.ok) {
        showToast("Th√™m s·∫£n ph·∫©m th√†nh c√¥ng", "success");
        
        // Add product directly to the table without reloading
        addProductToTable({
          contact_form_design_detail_id: data.detailId, // Use correct field from API response
          detail_id: data.detailId, // Alternative field name
          id: data.detailId, // Alternative field name
          variant_id: variant_id,
          product_name: productName,
          first_image: productImage,
          quantity: quantity,
          unit_price: Number(unit_price),
          total_price: quantity * Number(unit_price)
        });
        
        // Update totals
        total_product_price += quantity * Number(unit_price);
        updateTotalPrice();
        updateProductPriceDisplay();
        
        // Reset form
        resetAddProductForm();
        
        // Show success feedback
        if (window.aiAssistant) {
          window.aiAssistant.addSystemMessage(`‚úÖ ƒê√£ th√™m "${productName}" (x${quantity}) v√†o thi·∫øt k·∫ø th√†nh c√¥ng!`);
        }
        
      } else {
        showToast(data.error || "C√≥ l·ªói x·∫£y ra", "danger");
      }
    } catch (error) {
      showToast("Kh√¥ng th·ªÉ th√™m s·∫£n ph·∫©m", "danger");
    } finally {
      // Re-enable button
      addBtn.disabled = false;
      addBtn.innerHTML = 'Th√™m';
    }
  }

  // Function to add product directly to table
  function addProductToTable(product) {
    const tbody = document.getElementById("design-products-tbody");
    const row = document.createElement("tr");
    
    // Use consistent ID field names
    const detailId = product.contact_form_design_detail_id || product.detail_id || product.id || Date.now();
    
    row.dataset.id = detailId;
    row.dataset.variantId = product.variant_id;
    
    row.innerHTML = `
      <td style="white-space: nowrap; min-width: 100px;">
        <div class="product-image-container">
          <img src="${product.first_image}" alt="${product.product_name}" style="width: 80px; height: 35px;">
        </div>
      </td>
      <td style="white-space: nowrap;">${product.product_name}</td>
      <td style="white-space: nowrap;">${product.quantity}</td>
      <td style="white-space: nowrap;">${formatCurrency(Number(product.unit_price))}</td>
      <td style="white-space: nowrap;">${formatCurrency(Number(product.total_price))}</td>
      <td>
        <button class="btn-remove-product" onclick="handleRemoveProduct('${product.variant_id}')">
          <i class="fas fa-trash-alt"></i>
        </button>
      </td>
    `;
    
    // Add animation effect
    row.style.opacity = '0';
    row.style.transform = 'translateX(-20px)';
    tbody.appendChild(row);
    
    // Animate in
    setTimeout(() => {
      row.style.transition = 'all 0.3s ease';
      row.style.opacity = '1';
      row.style.transform = 'translateX(0)';
    }, 10);
    
    // Scroll to the new row
    setTimeout(() => {
      row.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }, 100);
  }

  // Function to reset add product form
  function resetAddProductForm() {
    const variantSelect = document.getElementById("variant-select");
    const quantityInput = document.getElementById("quantity-input");
    const priceInput = document.getElementById("unit-price-input");
    const imageArea = document.getElementById("first_image_drop_area");
    
    // Reset select
    if (variantSelect.tomselect) {
      variantSelect.tomselect.setValue('');
    } else {
      variantSelect.value = '';
    }
    
    // Reset other inputs
    quantityInput.value = 1;
    priceInput.value = '0';
    
    // Reset image placeholder
    imageArea.innerHTML = `
      <i class="far fa-image"></i>
      <p>Drop image here, or browse</p>
      <p class="upload-hint">jpeg, png - k√≠ch th∆∞·ªõc ngang</p>
    `;
  }

  // Function to update product price display
  function updateProductPriceDisplay() {
    document.getElementById("total-product-price").textContent = 
      total_product_price > 0 ? formatCurrency(total_product_price) : "0 VNƒê";
  }

  async function handleRemoveProduct(variantId) {
    if (!confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a s·∫£n ph·∫©m n√†y?")) return;

    // Find the row by variant_id
    const rows = document.querySelectorAll('#design-products-tbody tr');
    let targetRow = null;
    let detailId = null;
    
    for (const row of rows) {
      if (row.dataset.variantId === variantId) {
        targetRow = row;
        detailId = row.dataset.id;
        break;
      }
    }
    
    if (!targetRow) {
      showToast("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ƒë·ªÉ x√≥a", "danger");
      return;
    }
    
    // Check if detailId exists
    if (!detailId) {
      showToast("L·ªói: Kh√¥ng t√¨m th·∫•y ID chi ti·∫øt thi·∫øt k·∫ø", "danger");
      return;
    }

    // Get product info for calculation
    const productName = targetRow.children[1].textContent;
    const quantityText = targetRow.children[2].textContent;
    const priceText = targetRow.children[4].textContent;
    
    // Parse total price
    const totalPrice = parseFloat(priceText.replace(/[^\d]/g, '')) || 0;

    try {
      const res = await fetch(
        `/api/contact-form-design/${id}/details/${variantId}`,
        {
          method: "DELETE",
          headers: {
            Authorization: `Bearer ${localStorage.getItem("token")}`,
          },
        }
      );

      const data = await res.json();
      if (res.ok) {
        showToast("X√≥a s·∫£n ph·∫©m th√†nh c√¥ng", "success");
        
        // Remove from table with animation
        targetRow.style.transition = 'all 0.3s ease';
        targetRow.style.opacity = '0';
        targetRow.style.transform = 'translateX(20px)';
        
        setTimeout(() => {
          targetRow.remove();
        }, 300);
        
        // Update totals
        total_product_price -= totalPrice;
        updateTotalPrice();
        updateProductPriceDisplay();
        
        // Show feedback in AI assistant
        if (window.aiAssistant) {
          window.aiAssistant.addSystemMessage(`üóëÔ∏è ƒê√£ x√≥a "${productName}" kh·ªèi thi·∫øt k·∫ø.`);
        }
        
      } else {
        showToast(data.error || "C√≥ l·ªói x·∫£y ra", "danger");
      }
    } catch (error) {
      showToast("Kh√¥ng th·ªÉ x√≥a s·∫£n ph·∫©m", "danger");
    }
  }

  async function loadData() {
    const res = await fetch(`/api/contact-form-design/${id}`);
    const data = await res.json();
    if (res.ok) {
      design_fee = data.design_fee || 0;
      document.getElementById("design_fee_text").innerHTML = data.design_fee
        ? formatCurrency(Number(data.design_fee))
        : "0 VNƒê";
      document.getElementById("created_at").innerHTML = formatDate(
        data.created_at
      );
      document.getElementById("updated_at").innerHTML = formatDate(
        data.updated_at
      );
      document.getElementById("name").value = data.name;
      document.getElementById("email").value = data.email;
      document.getElementById("room_name").value = data.room_name;
      document.getElementById("phone").value = data.phone;
      document.getElementById("budget").value = data.budget
        ? Number(data.budget).toLocaleString("vi-VN")
        : "";
      document.getElementById("design_fee").value = data.design_fee
        ? Number(data.design_fee).toLocaleString("vi-VN")
        : "";
      document.getElementById("design_deposits").value = data.design_deposits
        ? Number(data.design_deposits).toLocaleString("vi-VN")
        : "";
      document
        .getElementById("design_deposits")
        .addEventListener("keydown", (e) => e.preventDefault());
      document
        .getElementById("design_deposits")
        .addEventListener("paste", (e) => e.preventDefault());
      document.getElementById("design_description").value =
        data.design_description;
      document.getElementById("require_design").value = data.require_design;
      document.getElementById("style_design").value = data.style_design;
      document.getElementById("different_information").value =
        data.different_information;
      document.getElementById("status").value = data.status;
      if (data.status === "IN_PROGRESS") {
        document.getElementById("design_fee").disabled = false;
        document.getElementById("design_fee").onkeydown = null;
        document.getElementById("design_fee").onpaste = null;
        document.getElementById("design_fee").oninput = null;
      } else {
        document.getElementById("design_fee").disabled = true;
        document.getElementById("design_fee").onkeydown = (e) =>
          e.preventDefault();
        document.getElementById("design_fee").onpaste = (e) =>
          e.preventDefault();
        document.getElementById("design_fee").oninput = (e) =>
          e.preventDefault();
      }
      document.getElementById("status_text").innerHTML =
        data.status.charAt(0).toUpperCase() + data.status.slice(1);
      document
        .getElementById("status_text")
        .classList.add(`status-${data.status.toLowerCase()}`);
      document.getElementById("remarks").value = data.remarks;
      document.getElementById("staff_name").value = data.user_id;
      document.getElementById("drive").value = data.drive;
      updateTotalPrice();
    } else {
      showToast(data.error || "C√≥ l·ªói x·∫£y ra", "danger");
    }
  }

  async function handleUpdate() {
    const user_id = document.getElementById("staff_name").value;
    if (user_id === "") {
      showToast(
        "Vui l√≤ng ch·ªçn nh√¢n vi√™n th·ª±c hi·ªán tr∆∞·ªõc khi chuy·ªÉn tr·∫°ng th√°i",
        "danger"
      );
      return;
    }
    const name = document.getElementById("name").value;
    const email = document.getElementById("email").value;
    const room_name = document.getElementById("room_name").value;
    const phone = document.getElementById("phone").value;
    const budget = Number(
      document
        .getElementById("budget")
        .value.replace(/,/g, "")
        .replace(/\./g, "")
    );
    const design_fee = Number(
      document
        .getElementById("design_fee")
        .value.replace(/,/g, "")
        .replace(/\./g, "")
    );
    const design_deposits = Number(
      document
        .getElementById("design_deposits")
        .value.replace(/,/g, "")
        .replace(/\./g, "")
    );
    const design_description =
      document.getElementById("design_description").value;
    const require_design = document.getElementById("require_design").value;
    const style_design = document.getElementById("style_design").value;
    const different_information = document.getElementById(
      "different_information"
    ).value;
    const remarks = document.getElementById("remarks").value;
    const status = document.getElementById("status").value;
    const unit_price = document.getElementById("unit-price-input").value;
    const drive = document.getElementById("drive").value;
    try {
      const payload = {
        name,
        email,
        room_name,
        phone,
        budget,
        design_fee,
        design_deposits,
        design_description,
        require_design,
        style_design,
        different_information,
        remarks,
        status,
        user_id,
        drive,
      };

      const res = await fetch(`/api/contact-form-design/${id}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${localStorage.getItem("token")}`,
        },
        body: JSON.stringify(payload),
      });

      const data = await res.json();
      if (data.error) {
        showToast(data.error, "danger");
      } else {
        showToast("C·∫≠p nh·∫≠t th√†nh c√¥ng", "success");
        setTimeout(
          () => (window.location.href = "/dashboard/contact-forms-design"),
          1500
        );
      }
    } finally {
      document.querySelector(".btn-save").disabled = false;
      document.querySelector(".btn-save").innerText = "L∆∞u";
    }
  }

  // H√†m c·∫≠p nh·∫≠t t·ªïng c·ªông
  function updateTotalPrice() {
    const total =
      (Number(total_product_price) || 0) + (Number(design_fee) || 0);
    document.getElementById("total-design-price").textContent =
      total > 0 ? formatCurrency(total) : "0 VNƒê";
  }

  function showToast(message, type = "success") {
    let toastContainer = document.getElementById("toastContainer");
    if (!toastContainer) {
      toastContainer = document.createElement("div");
      toastContainer.id = "toastContainer";
      toastContainer.className = "position-fixed top-0 end-0 p-3";
      toastContainer.style.zIndex = "1050";
      document.body.appendChild(toastContainer);
    }

    const toast = document.createElement("div");
    toast.className = `toast align-items-center text-white bg-${type} border-0`;
    toast.setAttribute("role", "alert");
    toast.setAttribute("aria-live", "assertive");
    toast.setAttribute("aria-atomic", "true");

    toast.innerHTML = `
          <div class="d-flex">
            <div class="toast-body">${message}</div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
          </div>`;

    toastContainer.appendChild(toast);
    const bsToast = new bootstrap.Toast(toast, { delay: 4000 });
    bsToast.show();
    toast.addEventListener("hidden.bs.toast", () => toast.remove());
  }
</script>

<!-- AI Design Assistant Integration -->
<script src="/socket.io/socket.io.js"></script>
<script>
  // AI Design Assistant
  class AIDesignAssistant {
    constructor() {
      this.socket = null;
      this.selectedImage = null;
      this.isConnected = false;
      this.currentStreamingMessage = null;
      
      this.initSocket();
      this.initEventListeners();
    }
    
    initSocket() {
      // K·∫øt n·ªëi t·ªõi Gemini 2.5 Pro namespace
      this.socket = io('/gemini');
      
      this.socket.on('connect', () => {
        this.isConnected = true;
        this.updateStatus('ƒê√£ k·∫øt n·ªëi', true);
        this.addSystemMessage('ü§ñ AI Assistant ƒë√£ s·∫µn s√†ng h·ªó tr·ª£ thi·∫øt k·∫ø!');
      });
      
      this.socket.on('disconnect', () => {
        this.isConnected = false;
        this.updateStatus('M·∫•t k·∫øt n·ªëi', false);
      });
      
      this.socket.on('bot_response', (data) => {
        this.hideTyping();
        this.currentStreamingMessage = null;
        
        // Check if response contains product suggestions
        if (data.response || data.message) {
          const responseText = data.response || data.message;
          this.parseAndShowProductSuggestions(responseText);
        }
        
        if (!data.response && !data.message) {
          this.addBotMessage('Xin l·ªói, t√¥i kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu n√†y.');
        }
      });
      
      this.socket.on('bot_response_chunk', (data) => {
        if (!this.currentStreamingMessage) {
          this.currentStreamingMessage = this.createStreamingMessage();
        }
        
        this.appendToStreamingMessage(this.currentStreamingMessage, data.chunk);
        
        // Check for product suggestions in streaming chunks
        if (this.currentStreamingMessage && this.currentStreamingMessage.textContent) {
          this.parseAndShowProductSuggestions(this.currentStreamingMessage.textContent);
        }
      });
      
      this.socket.on('error_response', (data) => {
        this.hideTyping();
        this.currentStreamingMessage = null;
        this.addBotMessage('‚ùå L·ªói: ' + (data.error || 'C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu.'));
      });
      
      this.socket.on('test_response', (data) => {
        const features = data.features ? ' (' + data.features.join(', ') + ')' : '';
        this.addBotMessage('‚úÖ ' + data.message + features);
      });
    }
    
    initEventListeners() {
      // Send button
      document.getElementById('aiSendBtn').addEventListener('click', () => {
        this.sendMessage();
      });
      
      // Enter key in textarea
      document.getElementById('aiMessageInput').addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
          e.preventDefault();
          this.sendMessage();
        }
      });
      
      // Auto-resize textarea
      document.getElementById('aiMessageInput').addEventListener('input', this.autoResizeTextarea);
      
      // Image upload
      document.getElementById('aiImageInput').addEventListener('change', (e) => {
        this.handleImageSelect(e);
      });
    }
    
    updateStatus(text, connected) {
      const statusText = document.getElementById('aiStatusText');
      const statusIcon = document.querySelector('.ai-status-indicator i');
      
      statusText.textContent = text;
      
      if (connected) {
        statusIcon.classList.add('connected');
      } else {
        statusIcon.classList.remove('connected');
      }
    }
    
    addUserMessage(text, imageData = null) {
      const messagesContainer = document.getElementById('aiChatMessages');
      const messageDiv = document.createElement('div');
      messageDiv.className = 'ai-message ai-user';
      
      let content = `
        <div class="ai-message-avatar">
          <i class="fas fa-user"></i>
        </div>
        <div class="ai-message-content">
      `;
      
      if (imageData) {
        content += `<img src="${imageData}" alt="Uploaded image" style="max-width: 200px; max-height: 200px; border-radius: 8px; margin-bottom: 8px;">`;
      }
      
      if (text) {
        content += `<p>${text}</p>`;
      }
      
      content += `</div>`;
      messageDiv.innerHTML = content;
      
      messagesContainer.appendChild(messageDiv);
      this.scrollToBottom();
    }
    
    addBotMessage(text) {
      const messagesContainer = document.getElementById('aiChatMessages');
      const messageDiv = document.createElement('div');
      messageDiv.className = 'ai-message ai-bot';
      
      messageDiv.innerHTML = `
        <div class="ai-message-avatar">
          <i class="fas fa-robot"></i>
        </div>
        <div class="ai-message-content">
          <p>${text.replace(/\n/g, '<br>')}</p>
        </div>
      `;
      
      messagesContainer.appendChild(messageDiv);
      this.scrollToBottom();
    }
    
    addSystemMessage(text) {
      const messagesContainer = document.getElementById('aiChatMessages');
      const messageDiv = document.createElement('div');
      messageDiv.className = 'ai-message ai-bot';
      messageDiv.style.opacity = '0.8';
      
      messageDiv.innerHTML = `
        <div class="ai-message-avatar">
          <i class="fas fa-info-circle"></i>
        </div>
        <div class="ai-message-content">
          <p><em>${text}</em></p>
        </div>
      `;
      
      messagesContainer.appendChild(messageDiv);
      this.scrollToBottom();
    }
    
    createStreamingMessage() {
      const messagesContainer = document.getElementById('aiChatMessages');
      const messageDiv = document.createElement('div');
      messageDiv.className = 'ai-message ai-bot';
      
      messageDiv.innerHTML = `
        <div class="ai-message-avatar">
          <i class="fas fa-robot"></i>
        </div>
        <div class="ai-message-content">
          <span class="streaming-indicator">üåä ƒêang nh·∫≠n ph·∫£n h·ªìi...</span>
        </div>
      `;
      
      messagesContainer.appendChild(messageDiv);
      this.scrollToBottom();
      
      return messageDiv.querySelector('.ai-message-content');
    }
    
    appendToStreamingMessage(messageElement, chunk) {
      if (!messageElement) return;
      
      // Remove streaming indicator
      const indicator = messageElement.querySelector('.streaming-indicator');
      if (indicator) {
        indicator.remove();
      }
      
      // Append chunk to content
      const currentContent = messageElement.textContent || '';
      messageElement.innerHTML = (currentContent + chunk).replace(/\n/g, '<br>');
      this.scrollToBottom();
    }
    
    showTyping() {
      const typingIndicator = document.getElementById('aiTypingIndicator');
      typingIndicator.style.display = 'block';
      this.scrollToBottom();
    }
    
    hideTyping() {
      const typingIndicator = document.getElementById('aiTypingIndicator');
      typingIndicator.style.display = 'none';
    }
    
    scrollToBottom() {
      const messagesContainer = document.getElementById('aiChatMessages');
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }
    
    handleImageSelect(event) {
      const file = event.target.files[0];
      if (!file) return;
      
      // Check file size (5MB)
      if (file.size > 5 * 1024 * 1024) {
        this.addBotMessage('‚ùå File qu√° l·ªõn! Vui l√≤ng ch·ªçn ·∫£nh nh·ªè h∆°n 5MB.');
        return;
      }
      
      // Check file type
      if (!file.type.startsWith('image/')) {
        this.addBotMessage('‚ùå Vui l√≤ng ch·ªçn file h√¨nh ·∫£nh!');
        return;
      }
      
      const reader = new FileReader();
      reader.onload = (e) => {
        this.selectedImage = e.target.result;
        this.showSelectedImage();
      };
      reader.readAsDataURL(file);
    }
    
    showSelectedImage() {
      const selectedImageDiv = document.getElementById('aiSelectedImage');
      const preview = document.getElementById('aiSelectedImagePreview');
      
      preview.src = this.selectedImage;
      selectedImageDiv.style.display = 'flex';
    }
    
    sendMessage() {
      const messageInput = document.getElementById('aiMessageInput');
      const message = messageInput.value.trim();
      
      if (!message && !this.selectedImage) {
        messageInput.focus();
        return;
      }
      
      if (!this.isConnected) {
        this.addBotMessage('‚ùå Ch∆∞a k·∫øt n·ªëi v·ªõi AI Assistant. Vui l√≤ng th·ª≠ l·∫°i sau.');
        return;
      }
      
      // Add user message to chat
      this.addUserMessage(message, this.selectedImage);
      
      // Show typing indicator
      this.showTyping();
      
      try {
        if (this.selectedImage) {
          // Send image + text with specific product suggestion request
          const imageAnalysisPrompt = message || 'H√£y ph√¢n t√≠ch b·∫£n v·∫Ω thi·∫øt k·∫ø n√†y v√† g·ª£i √Ω 2 s·∫£n ph·∫©m n·ªôi th·∫•t ph√π h·ª£p nh·∫•t cho kh√¥ng gian. Vui l√≤ng ch·ªâ g·ª£i √Ω t√™n s·∫£n ph·∫©m c·ª• th·ªÉ (v√≠ d·ª•: "sofa", "b√†n coffee", "t·ªß k·ªá TV", v.v.)';
          
          this.socket.emit('user_image', {
            image: this.selectedImage,
            message: imageAnalysisPrompt
          });
          
          this.removeSelectedImage();
        } else {
          // Send text only with context
          const contextMessage = this.buildContextualMessage(message);
          
          this.socket.emit('user_message', {
            message: contextMessage
          });
        }
        
        // Clear input
        messageInput.value = '';
        this.autoResizeTextarea({ target: messageInput });
        
      } catch (error) {
        this.addBotMessage('‚ùå L·ªói khi g·ª≠i tin nh·∫Øn. Vui l√≤ng th·ª≠ l·∫°i.');
        this.hideTyping();
      }
    }
    
    buildContextualMessage(userMessage) {
      // Gather context from form
      const projectInfo = {
        customerName: document.getElementById('name').value || 'Ch∆∞a c√≥',
        roomType: document.getElementById('room_name').value || 'Ch∆∞a x√°c ƒë·ªãnh',
        budget: document.getElementById('budget').value || 'Ch∆∞a x√°c ƒë·ªãnh',
        designFee: document.getElementById('design_fee').value || 'Ch∆∞a x√°c ƒë·ªãnh',
        description: document.getElementById('design_description').value || 'Ch∆∞a c√≥',
        styleRequirement: document.getElementById('style_design').value || 'Ch∆∞a c√≥',
        requirements: document.getElementById('require_design').value || 'Ch∆∞a c√≥'
      };
      
      const contextInfo = `
TH√îNG TIN D·ª∞ √ÅN THI·∫æT K·∫æ HI·ªÜN T·∫†I:
- Kh√°ch h√†ng: ${projectInfo.customerName}
- Kh√¥ng gian thi·∫øt k·∫ø: ${projectInfo.roomType}
- Ng√¢n s√°ch: ${projectInfo.budget}
- Chi ph√≠ thi·∫øt k·∫ø: ${projectInfo.designFee}
- M√¥ t·∫£ y√™u c·∫ßu: ${projectInfo.description}
- Phong c√°ch thi·∫øt k·∫ø: ${projectInfo.styleRequirement}
- Y√™u c·∫ßu chi ti·∫øt: ${projectInfo.requirements}

Y√äU C·∫¶U: ${userMessage}

H√£y t∆∞ v·∫•n d·ª±a tr√™n th√¥ng tin d·ª± √°n tr√™n v√† ƒë∆∞a ra g·ª£i √Ω c·ª• th·ªÉ cho SONA SPACE.`;
      
      return contextInfo;
    }
    
    removeSelectedImage() {
      this.selectedImage = null;
      document.getElementById('aiSelectedImage').style.display = 'none';
      document.getElementById('aiImageInput').value = '';
    }
    
    autoResizeTextarea(event) {
      const textarea = event.target;
      textarea.style.height = 'auto';
      textarea.style.height = Math.min(textarea.scrollHeight, 100) + 'px';
    }
    
    // Parse AI response for product suggestions
    parseAndShowProductSuggestions(responseText) {
      // Enhanced furniture keywords with more variations
      const furnitureKeywords = [
        // Gh·∫ø ng·ªìi
        'sofa', 'gh·∫ø sofa', 'sofa g√≥c', 'gh·∫ø b√†nh', 'gh·∫ø th∆∞ gi√£n', 'gh·∫ø', 'gh·∫ø ƒÉn', 'gh·∫ø l√†m vi·ªác', 'gh·∫ø bar',
        // B√†n
        'b√†n', 'b√†n tr√†', 'b√†n coffee', 'coffee table', 'b√†n ƒÉn', 'b√†n l√†m vi·ªác', 'b√†n trang ƒëi·ªÉm', 'b√†n console',
        // T·ªß k·ªá
        't·ªß', 'k·ªá', 't·ªß qu·∫ßn √°o', 't·ªß tivi', 't·ªß k·ªá tv', 'k·ªá s√°ch', 't·ªß gi√†y', 't·ªß b·∫øp', 'k·ªá trang tr√≠',
        // Gi∆∞·ªùng ng·ªß
        'gi∆∞·ªùng', 'gi∆∞·ªùng ng·ªß', 'gi∆∞·ªùng ƒë√¥i', 'gi∆∞·ªùng ƒë∆°n', 'gi∆∞·ªùng t·∫ßng',
        // ƒê·ªì trang tr√≠
        'ƒë√®n', 'ƒë√®n b√†n', 'ƒë√®n tr·∫ßn', 'ƒë√®n trang tr√≠', 'th·∫£m', 'th·∫£m tr·∫£i s√†n', 'r√®m', 'r√®m c·ª≠a', 
        'tranh', 'g∆∞∆°ng', 'g∆∞∆°ng trang tr√≠', 'c√¢y xanh', 'ch·∫≠u c√¢y', 'ƒë·ªì trang tr√≠', 'b√¨nh hoa',
        // Thi·∫øt b·ªã
        'tivi', 'tv', 't·ªß lavabo', 'lavabo', 'b·ªìn c·∫ßu', 'v√≤i sen', 'b·∫øp gas', 'b·∫øp ƒëi·ªán t·ª´'
      ];
      
      const foundProducts = [];
      const lowerResponse = responseText.toLowerCase();
      
      // Method 1: Direct keyword matching (more flexible)
      furnitureKeywords.forEach(keyword => {
        const regex = new RegExp('\\b' + keyword.toLowerCase().replace(/\s+/g, '\\s*') + '\\b', 'gi');
        if (regex.test(lowerResponse) && !foundProducts.includes(keyword)) {
          foundProducts.push(keyword);
        }
      });
      
      // Method 2: Parse structured sections (for organized responses)
      const sections = responseText.split(/\*\*.*?\*\*/);
      sections.forEach((section, index) => {
        if (section.trim()) {
          furnitureKeywords.forEach(keyword => {
            const regex = new RegExp('\\b' + keyword.toLowerCase().replace(/\s+/g, '\\s*') + '\\b', 'gi');
            if (regex.test(section.toLowerCase()) && !foundProducts.includes(keyword)) {
              foundProducts.push(keyword);
            }
          });
        }
      });
      
      // Method 3: Extract items from bullet points and lists
      const bulletMatches = responseText.match(/[‚Ä¢\-\*]\s*\*\*(.*?)\*\*/g);
      if (bulletMatches) {
        bulletMatches.forEach((match, index) => {
          const item = match.replace(/[‚Ä¢\-\*]\s*\*\*(.*?)\*\*/, '$1').toLowerCase();
          furnitureKeywords.forEach(keyword => {
            if (item.includes(keyword.toLowerCase()) && !foundProducts.includes(keyword)) {
              foundProducts.push(keyword);
            }
          });
        });
      }
      
      // Remove duplicates and limit results
      const uniqueProducts = [...new Set(foundProducts)];
      const limitedProducts = uniqueProducts.slice(0, 8); // Increase limit to 8 products
      
      if (limitedProducts.length > 0) {
        this.searchAndDisplaySuggestedProducts(limitedProducts);
      }
    }
    
    // Search for products based on AI suggestions and display them
    async searchAndDisplaySuggestedProducts(suggestedItems) {
      try {
        // Clear current products and show loading
        this.clearProductsColumn();
        this.showProductsLoading('ƒêang t√¨m s·∫£n ph·∫©m theo g·ª£i √Ω AI...');
        
        // Search for multiple products in parallel for better performance
        const searchPromises = suggestedItems.map(async (item) => {
          try {
            const response = await fetch(`/api/products/variants?search=${encodeURIComponent(item)}&limit=2`);
            const data = await response.json();
            
            if (response.ok && data.length > 0) {
              return data; // Return array of products
            }
            return [];
          } catch (error) {
            return [];
          }
        });
        
        // Wait for all searches to complete
        const searchResults = await Promise.all(searchPromises);
        
        // Flatten and remove duplicates
        const allMatchedProducts = searchResults.flat();
        const uniqueProducts = allMatchedProducts.filter((product, index, self) => 
          index === self.findIndex(p => p.variant_id === product.variant_id)
        );
        
        // Limit to reasonable number for display
        const limitedProducts = uniqueProducts.slice(0, 8);
        
        if (limitedProducts.length > 0) {
          this.renderAISuggestedProducts(limitedProducts);
          this.addSystemMessage(`ü§ñ ƒê√£ t√¨m th·∫•y ${limitedProducts.length} s·∫£n ph·∫©m ph√π h·ª£p v·ªõi b·∫£n v·∫Ω c·ªßa b·∫°n!`);
        } else {
          // Fallback to random products if no matches found
          await loadAISuggestedProducts();
          this.addSystemMessage('ü§ñ Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p, hi·ªÉn th·ªã s·∫£n ph·∫©m g·ª£i √Ω kh√°c.');
        }
        
      } catch (error) {
        await loadAISuggestedProducts(); // Fallback
      }
    }
    
    // Clear products column
    clearProductsColumn() {
      const container = document.getElementById('aiSuggestedProducts');
      if (container) {
        container.innerHTML = '';
      }
    }
    
    // Show loading state for products
    showProductsLoading(message = 'ƒêang t·∫£i s·∫£n ph·∫©m...') {
      const container = document.getElementById('aiSuggestedProducts');
      if (container) {
        container.innerHTML = `
          <div class="loading-products" style="text-align: center; padding: 20px; color: #666;">
            <i class="fas fa-spinner fa-spin"></i>
            <p>${message}</p>
          </div>
        `;
      }
    }
    
    // Render AI suggested products (using the same function but with different data)
    renderAISuggestedProducts(products) {
      const container = document.getElementById('aiSuggestedProducts');
      if (!container) {
        return;
      }
      
      container.innerHTML = '';
      
      // Add a header for AI suggestions with count
      const headerDiv = document.createElement('div');
      headerDiv.className = 'ai-suggestions-header';
      headerDiv.innerHTML = `
        <div class="ai-header-content">
          <i class="fas fa-robot"></i> <strong>G·ª£i √Ω t·ª´ AI (${products.length} s·∫£n ph·∫©m)</strong>
          <div class="ai-header-subtitle">S·∫£n ph·∫©m ph√π h·ª£p v·ªõi b·∫£n v·∫Ω thi·∫øt k·∫ø</div>
        </div>
      `;
      container.appendChild(headerDiv);
      
      products.forEach((product, index) => {
        const productItem = document.createElement('div');
        productItem.className = 'ai-product-item ai-suggested';
        productItem.style.animationDelay = `${index * 0.1}s`; // Staggered animation
        
        productItem.innerHTML = `
          <div class="product-image-container">
            <img src="${product.first_image || '/images/no-image.png'}" 
                 alt="${product.product_name}" 
                 class="product-image"
                 onerror="this.src='/images/no-image.png'">
            <div class="ai-suggestion-badge">
              <i class="fas fa-robot"></i> AI
            </div>
          </div>
          <div class="product-info">
            <div class="product-name" title="${product.product_name}">${product.product_name}</div>
            <div class="product-category">${product.category_name || 'Ch∆∞a ph√¢n lo·∫°i'}</div>
            <div class="product-price">${formatCurrency(Number(product.price_sale || product.price))}</div>
            ${product.price_sale && product.price !== product.price_sale ? 
              `<div class="product-original-price">${formatCurrency(Number(product.price))}</div>` : ''}
          </div>
          <button type="button" 
                  class="add-to-design-btn ai-suggested-btn" 
                  onclick="addProductToDesign('${product.variant_id}', '${product.product_name.replace(/'/g, "\\'")}', '${product.first_image}', '${product.price_sale || product.price}')">
            <i class="fas fa-plus"></i> Th√™m v√†o thi·∫øt k·∫ø
          </button>
        `;
        container.appendChild(productItem);
      });
    }
  }  // End of AIDesignAssistant class
  
  // Global functions for quick actions
  function removeAISelectedImage() {
    if (window.aiAssistant) {
      window.aiAssistant.removeSelectedImage();
    }
  }
  
  // Initialize AI Assistant when page loads
  document.addEventListener('DOMContentLoaded', function() {
    // Wait a bit to ensure other scripts are loaded
    setTimeout(() => {
      window.aiAssistant = new AIDesignAssistant();
      loadAISuggestedProducts(); // Load suggested products
      
      // Also add a manual trigger for testing
      window.debugLoadProducts = loadAISuggestedProducts;
    }, 1000);
  });

  // Load suggested products for AI assistant
  async function loadAISuggestedProducts() {
    try {
      const response = await fetch('/api/products/variants?limit=10');
      const data = await response.json();
      if (response.ok && data.length > 0) {
        renderAISuggestedProducts(data);
      } else {
        // Show fallback products for testing
        showFallbackProducts();
      }
    } catch (error) {
      // Show fallback products on error
      showFallbackProducts();
    }
  }
  
  // Show fallback products for testing
  function showFallbackProducts() {
    const container = document.getElementById('aiSuggestedProducts');
    const loadingDiv = container.querySelector('.loading-products');
    const fallbackDiv = container.querySelector('.fallback-products');
    
    if (loadingDiv) loadingDiv.style.display = 'none';
    if (fallbackDiv) fallbackDiv.style.display = 'block';
  }
  
  // Test functions for fallback products
  function testAddProduct() {
    if (window.aiAssistant) {
      window.aiAssistant.addSystemMessage('üß™ Test: ƒê√£ ch·ªçn "Gh·∫ø sofa hi·ªán ƒë·∫°i" - ƒë√¢y l√† s·∫£n ph·∫©m test!');
    }
    
    // Simulate adding to form
    const variantSelect = document.getElementById('variant-select');
    const quantityInput = document.getElementById('quantity-input');
    const priceInput = document.getElementById('unit-price-input');
    
    quantityInput.value = 1;
    priceInput.value = '5000000';
    
    alert('Test: ƒê√£ ch·ªçn "Gh·∫ø sofa hi·ªán ƒë·∫°i" - gi√° 5,000,000 VNƒê');
  }
  
  function testAddProduct2() {
    if (window.aiAssistant) {
      window.aiAssistant.addSystemMessage('üß™ Test: ƒê√£ ch·ªçn "B√†n coffee table" - ƒë√¢y l√† s·∫£n ph·∫©m test!');
    }
    
    // Simulate adding to form
    const variantSelect = document.getElementById('variant-select');
    const quantityInput = document.getElementById('quantity-input');
    const priceInput = document.getElementById('unit-price-input');
    
    quantityInput.value = 1;
    priceInput.value = '2500000';
    
    alert('Test: ƒê√£ ch·ªçn "B√†n coffee table" - gi√° 2,500,000 VNƒê');
  }

  // Render suggested products
  function renderAISuggestedProducts(products) {
    const container = document.getElementById('aiSuggestedProducts');
    
    if (!container) {
      return;
    }
    
    container.innerHTML = '';
    
    products.forEach((product, index) => {
      const productItem = document.createElement('div');
      productItem.className = 'ai-product-item';
      productItem.innerHTML = `
        <img src="${product.first_image || '/images/no-image.png'}" 
             alt="${product.product_name}" 
             class="product-image"
             onerror="this.src='/images/no-image.png'">
        <div class="product-info">
          <div class="product-name">${product.product_name}</div>
          <div class="product-category">${product.category_name || 'Ch∆∞a ph√¢n lo·∫°i'}</div>
          <div class="product-price">${formatCurrency(Number(product.price_sale || product.price))}</div>
        </div>
        <button type="button" 
                class="add-to-design-btn" 
                onclick="addProductToDesign('${product.variant_id}', '${product.product_name.replace(/'/g, "\\'")}', '${product.first_image}', '${product.price_sale || product.price}')">
          <i class="fas fa-plus"></i> Th√™m
        </button>
      `;
      container.appendChild(productItem);
    });
  }

  // Add product to design from AI suggestions
  async function addProductToDesign(variantId, productName, image, price) {
    try {
      // Set the variant select value
      const variantSelect = document.getElementById('variant-select');
      const quantityInput = document.getElementById('quantity-input');
      const priceInput = document.getElementById('unit-price-input');
      const imageArea = document.getElementById('first_image_drop_area');
      
      // Parse price correctly - handle both string and number
      let cleanPrice = price;
      if (typeof price === 'string') {
        // Remove all non-digit characters except dots
        cleanPrice = price.replace(/[^\d]/g, "");
      }
      cleanPrice = Number(cleanPrice);
      
      // Safety check: if price is too large (> 1 billion), it might be corrupted
      if (cleanPrice > 1000000000) {
        cleanPrice = Math.floor(cleanPrice / 100);
      }
      // Set values
      if (variantSelect.tomselect) {
        variantSelect.tomselect.setValue(variantId);
      } else {
        variantSelect.value = variantId;
      }
      
      quantityInput.value = 1;
      priceInput.value = cleanPrice;
      imageArea.innerHTML = `<img src="${image}" alt="${productName}" style="height: 30%; width: 30%;">`;
      
      // Auto-add the product directly
      try {
        const res = await fetch(`/api/contact-form-design/${id}/details`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${localStorage.getItem("token")}`,
          },
          body: JSON.stringify({ 
            variant_id: variantId, 
            quantity: 1, 
            unit_price: cleanPrice
          }),
        });

        const data = await res.json();
        if (res.ok) {
          // Add product directly to the table
          addProductToTable({
            contact_form_design_detail_id: data.detail_id || Date.now(),
            variant_id: variantId,
            product_name: productName,
            first_image: image,
            quantity: 1,
            unit_price: cleanPrice,
            total_price: 1 * cleanPrice
          });
          
          // Update totals
          total_product_price += cleanPrice;
          updateTotalPrice();
          updateProductPriceDisplay();
          
          // Reset form
          resetAddProductForm();
          
          // Show success message
          if (window.aiAssistant) {
            window.aiAssistant.addSystemMessage(`‚úÖ ƒê√£ th√™m "${productName}" v√†o thi·∫øt k·∫ø th√†nh c√¥ng!`);
          }
          
          showToast(`ƒê√£ th√™m "${productName}" v√†o thi·∫øt k·∫ø`, "success");
          
        } else {
          throw new Error(data.error || 'API Error');
        }
      } catch (error) {
        // Fallback: just populate the form
        if (window.aiAssistant) {
          window.aiAssistant.addSystemMessage(`‚úÖ ƒê√£ ch·ªçn s·∫£n ph·∫©m "${productName}". B·∫•m "Th√™m" ƒë·ªÉ th√™m v√†o thi·∫øt k·∫ø!`);
        }
        
        // Scroll to the add product form
        document.querySelector('.design-products-column').scrollIntoView({ 
          behavior: 'smooth', 
          block: 'start' 
        });
        
        // Highlight the add button
        const addBtn = document.getElementById('add-product-btn');
        addBtn.style.background = '#28a745';
        addBtn.style.transform = 'scale(1.05)';
        setTimeout(() => {
          addBtn.style.background = '';
          addBtn.style.transform = '';
        }, 2000);
      }
      
    } catch (error) {
      if (window.aiAssistant) {
        window.aiAssistant.addBotMessage('‚ùå C√≥ l·ªói khi th√™m s·∫£n ph·∫©m v√†o thi·∫øt k·∫ø.');
      }
    }
  }

  // Enhanced quick message function with product suggestions
  function sendQuickMessage(message) {
    if (window.aiAssistant) {
      // If asking for product suggestions, include room type context
      if (message.includes('ƒê·ªÅ xu·∫•t s·∫£n ph·∫©m')) {
        const roomType = document.getElementById('room_name').value || 'kh√¥ng gian chung';
        const budget = document.getElementById('budget').value || 'ch∆∞a x√°c ƒë·ªãnh';
        const enhancedMessage = `ƒê·ªÅ xu·∫•t 5-7 s·∫£n ph·∫©m ph√π h·ª£p cho ${roomType} v·ªõi ng√¢n s√°ch ${budget}. H√£y gi·∫£i th√≠ch l√Ω do ch·ªçn t·ª´ng s·∫£n ph·∫©m v√† c√°ch b·ªë tr√≠.`;
        document.getElementById('aiMessageInput').value = enhancedMessage;
      } else {
        document.getElementById('aiMessageInput').value = message;
      }
      window.aiAssistant.sendMessage();
    }
  }
  
  // Test function for AI product suggestions
  function testProductSuggestion() {
    if (window.aiAssistant) {
      // Simulate AI response with product suggestions
      const testResponse = "D·ª±a tr√™n b·∫£n v·∫Ω, t√¥i g·ª£i √Ω 2 s·∫£n ph·∫©m: sofa v√† b√†n coffee ph√π h·ª£p cho ph√≤ng kh√°ch n√†y.";
      
      window.aiAssistant.addBotMessage('üß™ Test: ' + testResponse);
      window.aiAssistant.parseAndShowProductSuggestions(testResponse);
    }
  }
</script>