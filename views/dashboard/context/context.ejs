<!-- Tiêu đề -->
<div class="dashboard-header-row">
  <h2 class="dashboard-title">Sửa nội dung chat bot</h2>
</div>

<!-- Layout -->
<div class="edit-context-container">
  <!-- Form -->
  <div class="context-form-column">
    <div class="form-section">
      <h3 class="section-title">Nội dung chat bot</h3>
      <div class="form-group">
        <label for="context">Nội dung chat bot</label>
        <textarea
          id="context"
          class="form-control"
          placeholder="Nhập nội dung chat bot"
          rows="10"
          spellcheck="false"
          style="resize: none"
        ></textarea>
      </div>
    </div>

    <!-- Nút -->
    <div class="form-actions">
      <button type="button" class="btn btn-save">Lưu</button>
    </div>
  </div>
  <div class="rule-column">
    <div class="form-section">
      <h3 class="section-title">Quy tắc</h3>
      <p class="section-description">
        Quy tắc để chat bot trả lời cho người dùng. Mặc định phải có trong nội
        dung chatbot.
      </p>
      <div class="form-group">
        <ul>
          <li>
            Không tiết lộ thông tin cá nhân hoặc dữ liệu nhạy cảm cho người dùng.
          </li>
          <li>
            Luôn chào hỏi và trả lời khách hàng một cách lịch sự, chuyên nghiệp.
          </li>
          <li>
            Nếu không chắc chắn về câu trả lời, hãy đề nghị khách hàng cung cấp
            thêm thông tin hoặc chuyển tiếp tới nhân viên hỗ trợ.
          </li>
          <li>
            Chỉ cung cấp thông tin đúng với phạm vi kiến thức và dữ liệu đã được
            huấn luyện hoặc thiết lập sẵn.
          </li>
          <li>
            Tránh trả lời các câu hỏi liên quan đến tài chính cá nhân, mật khẩu,
            hoặc thông tin bảo mật.
          </li>
          <li>
            Phản hồi nhanh chóng trong vòng 3-5 giây kể từ khi nhận được tin
            nhắn của người dùng.
          </li>
          <li>
            Không thực hiện các hành động thay mặt người dùng trừ khi có xác
            nhận rõ ràng.
          </li>
        </ul>
      </div>
    </div>
  </div>
</div>

<!-- JS xử lý -->
<script>
  document.addEventListener("DOMContentLoaded", async () => {
    await loadContextData();
    document
      .querySelector(".btn-save")
      .addEventListener("click", handleUpdateContext);
  });

  async function loadContextData() {
    try {
      const res = await fetch(`/api/chat`);
      const data = await res.json();

      if (data) {
        document.getElementById("context").value = data.context || "";
      }
    } catch (err) {
      console.error("Lỗi khi tải nội dung chat bot:", err);
      showToast("Không thể tải nội dung chat bot", "danger");
    }
  }

  async function handleUpdateContext() {
    const context = document.getElementById("context").value.trim();

    const saveBtn = document.querySelector(".btn-save");
    saveBtn.disabled = true;
    saveBtn.innerText = "Đang lưu...";

    try {
      const payload = {
        context,
      };

      const token = localStorage.getItem("token");

      const res = await fetch(`/api/chat/context`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(payload),
      });

      const data = await res.json();

      if (data.error) {
        showToast(data.error, "danger");
      } else {
        showToast("Cập nhật nội dung chat bot thành công", "success");
        setTimeout(() => (window.location.href = "/dashboard/chatbot"), 1000);
      }
    } catch (err) {
      console.error("Lỗi khi cập nhật:", err);
      showToast("Có lỗi khi cập nhật nội dung chat bot", "danger");
    }

    saveBtn.disabled = false;
    saveBtn.innerText = "Lưu";
  }

  function showToast(message, type = "success") {
    let toastContainer = document.getElementById("toastContainer");
    if (!toastContainer) {
      toastContainer = document.createElement("div");
      toastContainer.id = "toastContainer";
      toastContainer.className = "position-fixed top-0 end-0 p-3";
      toastContainer.style.zIndex = "1050";
      document.body.appendChild(toastContainer);
    }

    const toast = document.createElement("div");
    toast.className = `toast align-items-center text-white bg-${type} border-0`;
    toast.setAttribute("role", "alert");
    toast.setAttribute("aria-live", "assertive");
    toast.setAttribute("aria-atomic", "true");

    toast.innerHTML = `
              <div class="d-flex">
                  <div class="toast-body">${message}</div>
                  <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
              </div>
          `;

    toastContainer.appendChild(toast);
    const bsToast = new bootstrap.Toast(toast, { delay: 4000 });
    bsToast.show();

    toast.addEventListener("hidden.bs.toast", () => toast.remove());
  }
</script>
