<div class="dashboard-header-row">
    <h2 class="dashboard-title">Sự kiện</h2>
    <div class="action-buttons">
        <button class="add-category-btn" onclick="window.location.href='/dashboard/events/add'">
            <i class="fas fa-plus"></i> Thêm sự kiện
        </button>
    </div>
</div>

<div class="filter-row">
    <div class="search-container">
        <i class="fas fa-search search-icon"></i>
        <input type="text" class="search-input" placeholder="Tìm kiếm sự kiện..." id="searchInput" />
    </div>
    <div class="results-info">Đang tải dữ liệu...</div>
</div>

<div class="category-table-container">
    <table class="category-table" id="eventsTable">
        <thead>
            <tr>
                <th class="filterable" data-column="title">
                    Sự kiện
                    <div class="header-filter">
                        <i class="fas fa-chevron-down filter-icon"></i>
                        <div class="filter-dropdown">
                            <a class="filter-item" href="#" data-sort-order="asc">A-Z</a>
                            <a class="filter-item" href="#" data-sort-order="desc">Z-A</a>
                            <a class="filter-item" href="#" data-filter-value="all">Tất cả</a>
                        </div>
                    </div>
                </th>
                <th>Link Ảnh</th>
                <th>Link Sự Kiện</th>
                <th class="filterable" data-column="start_date">
                    Ngày Bắt Đầu
                    <div class="header-filter">
                        <i class="fas fa-chevron-down filter-icon"></i>
                        <div class="filter-dropdown">
                            <a class="filter-item" href="#" data-sort-order="desc">Mới nhất</a>
                            <a class="filter-item" href="#" data-sort-order="asc">Cũ nhất</a>
                            <a class="filter-item" href="#" data-filter-value="all">Tất cả</a>
                        </div>
                    </div>
                </th>
                <th class="filterable" data-column="end_date">
                    Ngày Kết Thúc
                    <div class="header-filter">
                        <i class="fas fa-chevron-down filter-icon"></i>
                        <div class="filter-dropdown">
                            <a class="filter-item" href="#" data-sort-order="desc">Mới nhất</a>
                            <a class="filter-item" href="#" data-sort-order="asc">Cũ nhất</a>
                            <a class="filter-item" href="#" data-filter-value="all">Tất cả</a>
                        </div>
                    </div>
                </th>
                <th class="filterable" data-column="status">
                    Trạng thái
                    <div class="header-filter">
                        <i class="fas fa-chevron-down filter-icon"></i>
                        <div class="filter-dropdown">
                            <a class="filter-item" href="#" data-filter-value="active">Đang hoạt động</a>
                            <a class="filter-item" href="#" data-filter-value="scheduled">Sắp diễn ra</a>
                            <a class="filter-item" href="#" data-filter-value="expired">Đã kết thúc</a>
                            <a class="filter-item" href="#" data-filter-value="all">Tất cả</a>
                        </div>
                    </div>
                </th>
                <th class="filterable" data-column="display_order">
                    Thứ tự
                    <div class="header-filter">
                        <i class="fas fa-chevron-down filter-icon"></i>
                        <div class="filter-dropdown">
                            <a class="filter-item" href="#" data-sort-order="asc">Tăng dần</a>
                            <a class="filter-item" href="#" data-sort-order="desc">Giảm dần</a>
                            <a class="filter-item" href="#" data-filter-value="all">Tất cả</a>
                        </div>
                    </div>
                </th>
                <th>Thao tác</th>
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
</div>

<style>
    .status-indicator {
        display: inline-flex;
        align-items: center;
        gap: 6px;
        padding: 4px 12px;
        border-radius: 16px;
        font-size: 14px;
        font-weight: 500;
        background: #f0f0f0;
        color: #333;
        transition: background 0.2s, color 0.2s;
    }

    .status-indicator-active {
        background: #e6f7e6;
        color: #1a7f37;
        border: 1px solid #b7e4c7;
    }

    .status-indicator-scheduled {
        background: #e6f0ff;
        color: #1a4fa7;
        border: 1px solid #b7c7e4;
    }

    .status-indicator-expired {
        background: #fbeaea;
        color: #c0392b;
        border: 1px solid #f5b7b1;
    }

    .action-button.status-toggle {
        background: none;
        border: none;
        cursor: pointer;
        padding: 0 4px;
        color: inherit;
        font-size: 16px;
        transition: color 0.2s;
    }

    .action-button.status-toggle:hover {
        color: #007bff;
    }
</style>

<script>
    let allEvents = [];
    let currentFilteredEvents = [];

    document.addEventListener("DOMContentLoaded", function () {
        const token = localStorage.getItem("token");
        if (!token) {
            window.location.href = "/login";
            return;
        }

        getEvents(); // Call this function to fetch event data

        function getEvents() {
            document.querySelector(".results-info").textContent = "Đang tải dữ liệu...";
            fetch("http://localhost:3501/api/events/admin", { // **Updated API endpoint**
                headers: {
                    Authorization: `Bearer ${token}`,
                },
            })
                .then((res) => {
                    if (!res.ok) {
                        // Handle HTTP errors
                        if (res.status === 401 || res.status === 403) {
                            showToast("Bạn không có quyền truy cập.", "danger");
                            setTimeout(() => window.location.href = "/login", 1500);
                        }
                        throw new Error(`HTTP error! status: ${res.status}`);
                    }
                    return res.json();
                })
                .then((data) => {
                    allEvents = data; // Store all fetched events
                    currentFilteredEvents = data; // Initialize filtered events with all data
                    renderEvents(currentFilteredEvents);
                }) // **Updated function name**
                .catch((err) => {
                    console.error("Lỗi khi lấy dữ liệu sự kiện:", err);
                    document.querySelector(".results-info").textContent = "Không thể tải dữ liệu sự kiện.";
                    showToast("Lỗi khi tải dữ liệu sự kiện. Vui lòng thử lại sau.", "danger");
                });
        }

        // **Updated function to render events**
        function renderEvents(events) {
            const tbody = document.querySelector("#eventsTable tbody");
            tbody.innerHTML = ""; // Clear existing table rows

            if (events.length === 0) {
                tbody.innerHTML = `<tr><td colspan="12" style="text-align: center;">Không có sự kiện nào.</td></tr>`;
                document.querySelector(".results-info").textContent = "Hiển thị 0 kết quả";
                return;
            }

            events.forEach((event) => {
                const statusText = {
                    'active': 'Đang hoạt động',
                    'scheduled': 'Sắp diễn ra',
                    'expired': 'Đã kết thúc'
                }[event.status] || event.status; // Default to status if not in map

                const statusClass = {
                    'active': 'status-indicator-active',
                    'scheduled': 'status-indicator-scheduled',
                    'expired': 'status-indicator-expired'
                }[event.status] || '';

                const statusIcon = event.status === 'active' ? 'fa-eye' : 'fa-eye-slash';

                const row = document.createElement("tr");
                row.innerHTML = `
              <td>
            <div class="category-info">
              <div class="category-image">
                <img src="${event.image_url}" alt="${event.image_url}}">
              </div>
              <div class="category-name">${event.title}</div>
            </div>
          </td>
                    <td class="link-cell"><a href="${event.image_url}" target="_blank" rel="noopener noreferrer">${truncateText(event.image_url, 30)}</a></td>
                    <td class="link-cell"><a href="${event.link_url}" target="_blank" rel="noopener noreferrer">${truncateText(event.link_url, 30)}</a></td>
                    <td>${formatDate(event.start_date)}</td>
                    <td>${formatDate(event.end_date)}</td>
                
                    <td>
                        <span class="status-indicator ${statusClass}">
                            <i class="fas ${statusIcon}"></i> ${statusText}
                        </span>
                    </td>
                    <td>${event.display_order || '-'}</td>
                    <td>
                        <div class="action-cell">
                            <button class="action-button edit" onclick="window.location.href='/dashboard/events/edit/${event.id}'" title="Chỉnh sửa">
                                <i class="fas fa-edit"></i>
                            </button>
                          
                            <button class="action-button delete" data-id="${event.id}" data-title="${event.title}" title="Xóa sự kiện">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </td>`;
                tbody.appendChild(row);
            });

            // Add event listeners for action buttons
            document.querySelectorAll(".action-button.delete").forEach((btn) => {
                btn.addEventListener("click", () => {
                    const id = btn.getAttribute("data-id");
                    const title = btn.getAttribute("data-title");
                    deleteEvent(id, title);
                });
            });

            document.querySelectorAll(".action-button.copy-link").forEach((btn) => {
                btn.addEventListener("click", () => {
                    const link = btn.getAttribute("data-link");
                    navigator.clipboard.writeText(link).then(() => {
                        showToast("Đã sao chép liên kết!", "success");
                    }).catch(err => {
                        console.error('Không thể sao chép liên kết:', err);
                        showToast("Không thể sao chép liên kết.", "danger");
                    });
                });
            });


            document.querySelector(".results-info").textContent = `Hiển thị ${events.length} kết quả`;
        }

        // Function to truncate text for table display
        function truncateText(text, maxLength) {
            if (!text) return '';
            return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;
        }

        function deleteEvent(id, title) {
            showConfirm({
                message: `Bạn có chắc muốn xóa sự kiện "${title}"?`,
                onConfirm: () => {
                    fetch(`http://localhost:3501/api/events/${id}`, { // **Assuming a DELETE endpoint for events**
                        method: "DELETE",
                        headers: {
                            Authorization: `Bearer ${token}`,
                        },
                    })
                        .then((res) => res.json())
                        .then((data) => {
                            if (data.error) {
                                showToast(data.error, "danger");
                            } else {
                                showToast("Đã xóa sự kiện thành công", "success");
                                setTimeout(getEvents, 1000); // Reload events after deletion
                            }
                        })
                        .catch(() => showToast("Lỗi khi xóa sự kiện", "danger"));
                },
            });
        }

        // This `changeStatus` function is a placeholder; you'll need to implement an API for it
        // based on how your backend handles event status updates.
        function toggleEventStatus(id) {
            const newStatus = currentStatus === 'active' ? 'paused' : 'active'; // Simple toggle for example

            fetch(`http://localhost:3501/api/events/${id}/status`, { // Example endpoint
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${token}`,
                },
                body: JSON.stringify({ status: newStatus }),
            })
                .then((res) => res.json())
                .then((data) => {
                    if (data.error) showToast(data.error, "danger");
                    else {
                        showToast("Đã cập nhật trạng thái sự kiện", "success");
                        setTimeout(getEvents, 1000); // Reload events after status change
                    }
                })
                .catch(() => showToast("Lỗi cập nhật trạng thái", "danger"));
        }


        function formatDate(dateStr) {
            if (!dateStr) return "-";
            const date = new Date(dateStr);
            // Format to dd/mm/yyyy hh:mm (or just dd/mm/yyyy if you prefer)
            const options = { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit', hour12: false };
            return date.toLocaleDateString("vi-VN", options);
        }

        // --- Utility functions (Toast and Confirm, unchanged) ---
        function showToast(message, type = "success") {
            let toastContainer = document.getElementById("toastContainer");
            if (!toastContainer) {
                toastContainer = document.createElement("div");
                toastContainer.id = "toastContainer";
                toastContainer.className = "position-fixed top-0 end-0 p-3";
                toastContainer.style.zIndex = "1050";
                document.body.appendChild(toastContainer);
            }

            const toast = document.createElement("div");
            toast.className = `toast align-items-center text-white bg-${type} border-0`;
            toast.setAttribute("role", "alert");
            toast.setAttribute("aria-live", "assertive");
            toast.setAttribute("aria-atomic", "true");

            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">${message}</div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                </div>
            `;

            toastContainer.appendChild(toast);
            const bsToast = new bootstrap.Toast(toast, { delay: 3000 });
            bsToast.show();

            toast.addEventListener("hidden.bs.toast", () => toast.remove());
        }

        function showConfirm({ message, confirmText = "Xác nhận", cancelText = "Hủy", onConfirm = () => { }, onCancel = () => { } }) {
            let popup = document.getElementById("confirmPopup");
            if (popup) popup.remove();

            popup = document.createElement("div");
            popup.id = "confirmPopup";
            popup.innerHTML = `
                <div class="confirm-dialog">
                    <div class="confirm-message">${message}</div>
                    <div class="confirm-actions">
                        <button class="btn btn-confirm">${confirmText}</button>
                        <button class="btn btn-cancel">${cancelText}</button>
                    </div>
                </div>
                <div class="confirm-overlay"></div>
            `;

            document.body.appendChild(popup);

            popup.querySelector(".btn-confirm").onclick = () => {
                popup.remove();
                onConfirm();
            };
            popup.querySelector(".btn-cancel").onclick = () => {
                popup.remove();
                onCancel();
            };
            popup.querySelector(".confirm-overlay").onclick = () => {
                popup.remove();
                onCancel();
            };
        }

        // Tìm kiếm
        document.getElementById("searchInput").addEventListener("input", function () {
            const searchTerm = this.value.toLowerCase();
            const filtered = allEvents.filter(event =>
                (event.title || '').toLowerCase().includes(searchTerm) ||
                (event.status || '').toLowerCase().includes(searchTerm) ||
                (event.link_url || '').toLowerCase().includes(searchTerm)
            );
            currentFilteredEvents = filtered;
            renderEvents(currentFilteredEvents);
        });
        // Filter/sort logic
        document.querySelectorAll('.header-filter').forEach(filter => {
            filter.addEventListener('click', function (e) {
                e.preventDefault();
                e.stopPropagation();
                this.classList.toggle('active');
                document.querySelectorAll('.header-filter').forEach(otherFilter => {
                    if (otherFilter !== this) {
                        otherFilter.classList.remove('active');
                    }
                });
            });
        });
        document.querySelectorAll('.filter-dropdown .filter-item').forEach(item => {
            item.addEventListener('click', function (e) {
                e.preventDefault();
                e.stopPropagation();
                const th = this.closest('th');
                const columnDataName = th.getAttribute('data-column');
                const filterValue = this.getAttribute('data-filter-value');
                const sortOrder = this.getAttribute('data-sort-order');
                if (sortOrder) {
                    sortEvents(columnDataName, sortOrder);
                } else if (filterValue) {
                    filterEventsByColumn(columnDataName, filterValue);
                }
                this.closest('.header-filter').classList.remove('active');
            });
        });
        document.addEventListener('click', function () {
            document.querySelectorAll('.header-filter').forEach(filter => {
                filter.classList.remove('active');
            });
        });
        function sortEvents(columnDataName, sortOrder) {
            let eventsToSort = [...currentFilteredEvents];
            eventsToSort.sort((a, b) => {
                let valA, valB;
                switch (columnDataName) {
                    case 'title':
                        valA = (a.title || '').toLowerCase();
                        valB = (b.title || '').toLowerCase();
                        return sortOrder === 'asc' ? valA.localeCompare(valB, 'vi') : valB.localeCompare(valA, 'vi');
                    case 'start_date':
                    case 'end_date':
                        valA = a[columnDataName] ? new Date(a[columnDataName]).getTime() : 0;
                        valB = b[columnDataName] ? new Date(b[columnDataName]).getTime() : 0;
                        return sortOrder === 'asc' ? valA - valB : valB - valA;
                    case 'display_order':
                        valA = parseInt(a.display_order || 0);
                        valB = parseInt(b.display_order || 0);
                        return sortOrder === 'asc' ? valA - valB : valB - valA;
                    default:
                        return 0;
                }
            });
            renderEvents(eventsToSort);
        }
        function filterEventsByColumn(columnDataName, filterValue) {
            let filtered = [...allEvents];
            if (columnDataName === 'status' && filterValue !== 'all') {
                filtered = filtered.filter(event => event.status === filterValue);
            }
            currentFilteredEvents = filtered;
            renderEvents(currentFilteredEvents);
        }
    });
</script>