<!-- Tiêu đề -->
<div class="dashboard-header-row">
  <h2 class="dashboard-title">Thêm tin tức</h2>
</div>

<!-- Layout -->
<div class="add-room-container">
  <!-- Form -->
  <div class="room-form-column">
    <div class="form-section">
      <h3 class="section-title">Thông tin tin tức</h3>

      <div class="form-row">
        <div class="form-group">
          <label for="roomName">Tên tin tức</label>
          <input type="text" id="newsTitle" class="form-control" placeholder="Nhập tên tin tức" />

        </div>
        <div class="form-group">
          <label for="roomSlug">Slug</label>
          <input type="text" id="newsSlug" class="form-control" placeholder="nhap-slug-cho-tin-tuc: co the tu tao" />
        </div>
      </div>

      <div class="form-row">
        <div class="form-group">
          <label for="newsCategory">Danh mục</label>
          <div class="select-wrapper">
            <select id="newsCategory" class="form-control">
            </select>
            <i class="fas fa-chevron-down"></i>
          </div>
        </div>
        <div class="form-group">
          <label for="roomStatus">Trạng thái</label>
          <div class="select-wrapper">
            <select id="newsStatus" class="form-control">
              <option value="1">Hiển thị</option>
              <option value="0">Ẩn</option>
            </select>
            <i class="fas fa-chevron-down"></i>
          </div>
        </div>
      </div>

      <div class="form-row">
        <div class="form-group full-width">
          <label for="newsContent">Nội dung tin tức</label>
          <textarea id="newsContent" class="form-control" placeholder="Nội dung tin tức"></textarea>
        </div>
      </div>
    </div>

    <!-- Nút -->
    <div class="form-actions">
      <button type="button" class="btn btn-cancel">Hủy</button>
      <button type="button" class="btn btn-save">Lưu</button>
    </div>
  </div>

  <!-- Cột phải: Upload ảnh -->
  <div class="image-upload-column">
    <div class="image-upload-container">
      <div class="main-upload-area">
        <div class="upload-placeholder3" id="avatarDropArea">
          <i class="far fa-image"></i>
          <p>Drop your image here, or browse</p>
          <p class="upload-hint">jpeg, png are allowed</p>
        </div>
      </div>

      <div class="thumbnail-upload-grid1">
        <div class="thumbnail-upload-item">
          <div class="upload-placeholder2" id="thumb1">
            <i class="far fa-image"></i>
          </div>
        </div>
        <div class="thumbnail-upload-item">
          <div class="upload-placeholder2" id="thumb2">
            <i class="far fa-image"></i>
          </div>
        </div>
        <div class="thumbnail-upload-item">
          <div class="upload-placeholder2" id="thumb3">
            <i class="far fa-image"></i>
          </div>
        </div>
        <div class="thumbnail-upload-item">
          <div class="upload-placeholder2" id="thumb4">
            <i class="far fa-image"></i>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- JS xử lý -->
<script>
  let avatarFile = null;
  let bannerFile = null;

  let thumbnailFiles = [null, null, null, null];

  document.addEventListener("DOMContentLoaded", () => {
    loadNewsCategories();
    bindUpload("#avatarDropArea", (file) => (avatarFile = file));

    bindUpload("#thumb1", (file) => (thumbnailFiles[0] = file));
    bindUpload("#thumb2", (file) => (thumbnailFiles[1] = file));
    bindUpload("#thumb3", (file) => (thumbnailFiles[2] = file));
    bindUpload("#thumb4", (file) => (thumbnailFiles[3] = file));

    document.querySelector(".btn-save").addEventListener("click", handleSaveNews);
  });


  function bindUpload(selector, setter) {
    const dropArea = document.querySelector(selector);
    dropArea.addEventListener("click", () => {
      const input = document.createElement("input");
      input.type = "file";
      input.accept = "image/*";
      input.click();
      input.onchange = () => {
        const file = input.files[0];
        if (file) {
          setter(file);
          dropArea.innerHTML = `<img src="${URL.createObjectURL(
            file
          )}" border-radius:6px;">`;
        }
      };
    });
  }

  async function uploadImage(file, folder = "", subfolder = "") {
    if (!file) return null;
    const formData = new FormData();
    formData.append("image", file);
    formData.append("folder", folder);
    if (subfolder) formData.append("subfolder", subfolder);

    const res = await fetch("http://localhost:3501/api/upload/news", {
      method: "POST",
      body: formData,
    });
    const data = await res.json();
    return data.url || null;
  }

async function handleSaveNews() {
  const title = document.getElementById("newsTitle").value.trim();
  const slug = document.getElementById("newsSlug").value.trim();
  const content = document.getElementById("newsContent").value.trim();
  const status = parseInt(document.getElementById("newsStatus").value);
  const category_id = parseInt(document.getElementById("newsCategory").value);

  const saveBtn = document.querySelector(".btn-save");
  saveBtn.disabled = true;
  saveBtn.innerText = "Đang lưu...";

  if (!title || !category_id || !content) {
    showToast("Vui lòng nhập đầy đủ thông tin", "danger");
    saveBtn.disabled = false;
    saveBtn.innerText = "Lưu";
    return;
  }

  try {
    const uploadedImages = [];

    const mainImage = await uploadImage(avatarFile, "SonaSpace/News");
    if (mainImage) uploadedImages.push(mainImage);

    for (const file of thumbnailFiles) {
      if (file) {
        const url = await uploadImage(file, "SonaSpace/News", "sub");
        if (url) uploadedImages.push(url);
      }
    }

    const payload = {
      title,
      slug,
      content,
      status,
      category_id,
      thumbnail: uploadedImages[0] || null,
      images: uploadedImages
    };

    const token = localStorage.getItem("token");

    const res = await fetch("http://localhost:3501/api/news", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token}`
      },
      body: JSON.stringify(payload)
    });

    const data = await res.json();

    if (data.error) {
      showToast(data.error, "danger");
    } else {
      showToast("Tạo tin tức thành công", "success");
      setTimeout(() => (window.location.href = "/dashboard/news"), 1000);
    }
  } catch (err) {
    console.error("Error:", err);
    showToast("Có lỗi khi tạo tin tức", "danger");
  }

  saveBtn.disabled = false;
  saveBtn.innerText = "Lưu";
}


  async function loadNewsCategories() {
    const select = document.getElementById("newsCategory");
    try {
      const res = await fetch("http://localhost:3501/api/news-categories");
      const categories = await res.json();

      select.innerHTML = `<option value="">Chọn danh mục</option>`;
      categories.forEach((cat) => {
        const option = document.createElement("option");
        option.value = cat.id;
        option.textContent = cat.name;
        select.appendChild(option);
      });
    } catch (err) {
      console.error("Lỗi tải danh mục:", err);
      showToast("Không thể tải danh mục", "danger");
    }
  }

  function showToast(message, type = "success") {
    let toastContainer = document.getElementById("toastContainer");
    if (!toastContainer) {
      toastContainer = document.createElement("div");
      toastContainer.id = "toastContainer";
      toastContainer.className = "position-fixed top-0 end-0 p-3";
      toastContainer.style.zIndex = "1050";
      document.body.appendChild(toastContainer);
    }

    const toast = document.createElement("div");
    toast.className = `toast align-items-center text-white bg-${type} border-0`;
    toast.setAttribute("role", "alert");
    toast.setAttribute("aria-live", "assertive");
    toast.setAttribute("aria-atomic", "true");

    toast.innerHTML = `
          <div class="d-flex">
            <div class="toast-body">${message}</div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
          </div>`;

    toastContainer.appendChild(toast);
    const bsToast = new bootstrap.Toast(toast, { delay: 4000 });
    bsToast.show();

    toast.addEventListener("hidden.bs.toast", () => toast.remove());
  }
</script>