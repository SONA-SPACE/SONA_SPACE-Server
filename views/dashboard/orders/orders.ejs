<link rel="stylesheet" href="/scss/style.css">
<!-- Thêm jQuery và Bootstrap JS -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/js/bootstrap.bundle.min.js"></script>
<!-- Thêm Ant Design -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/antd@4.24.15/dist/antd.min.css">
<script src="https://cdn.jsdelivr.net/npm/antd@4.24.15/dist/antd.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/dayjs@1.11.10/dayjs.min.js"></script>

<style>
  /* Table header filter styles */
  th.filterable {
    position: relative;
    padding-right: 25px;
    /* Add space for the filter icon */
  }

  .header-filter {
    position: absolute;
    right: 5px;
    top: 50%;
    transform: translateY(-50%);
    display: inline-block;
    cursor: pointer;
    width: 20px;
    height: 20px;
    text-align: center;
    line-height: 20px;
  }

  .filter-icon {
    color: #666;
    font-size: 14px;
    transition: all 0.3s ease;
  }

  .header-filter:hover .filter-icon {
    color: #333;
  }

  .header-filter.active .filter-icon {
    transform: rotate(180deg);
    color: #007bff;
  }

  .header-filter .filter-dropdown {
    position: absolute;
    top: 100%;
    right: 0;
    min-width: 180px;
    background-color: #fff;
    border-radius: 4px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
    z-index: 1000;
    padding: 8px 0;
    opacity: 0;
    visibility: hidden;
    transform: translateY(-10px);
    transition: all 0.3s ease;
  }

  .header-filter.active .filter-dropdown {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }

  .filter-dropdown .filter-item {
    display: block;
    padding: 8px 16px;
    color: #333;
    text-decoration: none;
    font-size: 14px;
    transition: background-color 0.2s ease;
  }

  .filter-dropdown .filter-item:hover {
    background-color: #f5f5f5;
  }
</style>

<!-- Trang quản lý đơn hàng -->
<div class="orders-page">
  <div class="content-wrapper">
    <div class="content-header">
      <div class="container-fluid">
        <div class="page-header">
          <h1>Đơn hàng</h1>
          <div class="actions">
            <button class="btn btn-primary">
              <i class="fas fa-plus"></i> Thêm đơn hàng mới
            </button>
          </div>
        </div>

        <div class="search-bar">
          <div class="search-input">
            <i class="fas fa-search search-icon"></i>
            <input type="text" placeholder="Tìm kiếm đơn hàng..." id="search-orders">
          </div>

          <div class="date-range">
            <i class="far fa-calendar-alt calendar-icon"></i>
            <span>1/05/2025 - 31/5/2025</span>
          </div>

          <div class="filter-btn">
            <span>Hiển thị 6 trên tổng số 500</span>
          </div>
        </div>

        <div class="orders-summary">
          <div class="summary-card">
            <div class="card-title">Tổng đơn hàng</div>
            <div class="card-value" id="total-orders">0</div>
          </div>

          <div class="summary-card">
            <div class="card-title">Đơn hàng</div>
            <div class="card-subtitle">Đơn hàng đang chờ xử lý</div>
            <div class="card-value" id="pending-orders">0</div>
          </div>

          <div class="summary-card">
            <div class="card-title">Đang vận chuyển</div>
            <div class="card-subtitle">Tổng đơn hàng đang vận chuyển</div>
            <div class="card-value" id="shipping-orders">0</div>
          </div>

          <div class="summary-card">
            <div class="card-title">Hoàn trả đơn hàng</div>
            <div class="card-subtitle">Đơn hàng được yêu cầu trả hàng</div>
            <div class="card-value" id="return-orders">0</div>
          </div>

          <div class="summary-card">
            <div class="card-title">Hủy đơn hàng</div>
            <div class="card-subtitle">Đơn hàng được yêu cầu hủy</div>
            <div class="card-value" id="cancel-orders">0</div>
          </div>
        </div>

        <div class="orders-table">
          <table>
            <thead>
              <tr>
                <th></th>
                <th class="filterable">
                  Mã đơn hàng
                  <div class="header-filter">
                    <i class="fas fa-chevron-down filter-icon"></i>
                    <div class="filter-dropdown">
                      <a class="filter-item" href="#" data-sort="order-asc">Tăng dần (A-Z)</a>
                      <a class="filter-item" href="#" data-sort="order-desc">Giảm dần (Z-A)</a>
                    </div>
                  </div>
                </th>
                <th class="filterable">
                  Ngày đặt
                  <div class="header-filter">
                    <i class="fas fa-chevron-down filter-icon"></i>
                    <div class="filter-dropdown">
                      <a class="filter-item" href="#" data-sort="date-asc">Cũ nhất trước</a>
                      <a class="filter-item" href="#" data-sort="date-desc">Mới nhất trước</a>
                    </div>
                  </div>
                </th>
                <th class="filterable">
                  Khách hàng
                  <div class="header-filter">
                    <i class="fas fa-chevron-down filter-icon"></i>
                    <div class="filter-dropdown">
                      <a class="filter-item" href="#" data-sort="customer-asc">Tên (A-Z)</a>
                      <a class="filter-item" href="#" data-sort="customer-desc">Tên (Z-A)</a>
                    </div>
                  </div>
                </th>
                <th class="filterable">
                  Thanh toán
                  <div class="header-filter">
                    <i class="fas fa-chevron-down filter-icon"></i>
                    <div class="filter-dropdown">
                      <a class="filter-item" href="#" data-sort="payment-paid">Đã thanh toán</a>
                      <a class="filter-item" href="#" data-sort="payment-unpaid">Chưa thanh toán</a>
                      <a class="filter-item" href="#" data-sort="payment-all">Tất cả</a>
                    </div>
                  </div>
                </th>
                <th class="filterable">
                  Sản phẩm
                  <div class="header-filter">
                    <i class="fas fa-chevron-down filter-icon"></i>
                    <div class="filter-dropdown">
                      <a class="filter-item" href="#" data-sort="products-asc">Số lượng tăng dần</a>
                      <a class="filter-item" href="#" data-sort="products-desc">Số lượng giảm dần</a>
                    </div>
                  </div>
                </th>
                <th class="filterable">
                  Tổng tiền
                  <div class="header-filter">
                    <i class="fas fa-chevron-down filter-icon"></i>
                    <div class="filter-dropdown">
                      <a class="filter-item" href="#" data-sort="total-asc">Giá trị tăng dần</a>
                      <a class="filter-item" href="#" data-sort="total-desc">Giá trị giảm dần</a>
                    </div>
                  </div>
                </th>
                <th class="filterable">
                  Vận chuyển
                  <div class="header-filter">
                    <i class="fas fa-chevron-down filter-icon"></i>
                    <div class="filter-dropdown">
                      <a class="filter-item" href="#" data-sort="shipping-pending">Chờ lấy hàng</a>
                      <a class="filter-item" href="#" data-sort="shipping-transit">Đang vận chuyển</a>
                      <a class="filter-item" href="#" data-sort="shipping-delivered">Đã giao hàng</a>
                      <a class="filter-item" href="#" data-sort="shipping-failed">Giao hàng thất bại</a>
                      <a class="filter-item" href="#" data-sort="shipping-returned">Đã hoàn trả</a>
                      <a class="filter-item" href="#" data-sort="shipping-all">Tất cả</a>
                    </div>
                  </div>
                </th>
                <th class="filterable">
                  Trạng thái
                  <div class="header-filter">
                    <i class="fas fa-chevron-down filter-icon"></i>
                    <div class="filter-dropdown">
                      <a class="filter-item" href="#" data-sort="status-pending">Chờ xác nhận</a>
                      <a class="filter-item" href="#" data-sort="status-confirmed">Đã xác nhận</a>
                      <a class="filter-item" href="#" data-sort="status-shipping">Đang giao</a>
                      <a class="filter-item" href="#" data-sort="status-success">Giao hàng thành công</a>
                      <a class="filter-item" href="#" data-sort="status-failed">Thất bại</a>
                      <a class="filter-item" href="#" data-sort="status-cancelled">Đã hủy</a>
                      <a class="filter-item" href="#" data-sort="status-all">Tất cả</a>
                    </div>
                  </div>
                </th>
                <th class="filterable">
                  Phương thức TT
                  <div class="header-filter">
                    <i class="fas fa-chevron-down filter-icon"></i>
                    <div class="filter-dropdown">
                      <a class="filter-item" href="#" data-sort="payment-method-cod">COD</a>
                      <a class="filter-item" href="#" data-sort="payment-method-bank">Chuyển khoản</a>
                      <a class="filter-item" href="#" data-sort="payment-method-vnpay">VNPay</a>
                      <a class="filter-item" href="#" data-sort="payment-method-momo">MoMo</a>
                      <a class="filter-item" href="#" data-sort="payment-method-zalopay">ZaloPay</a>
                      <a class="filter-item" href="#" data-sort="payment-method-all">Tất cả</a>
                    </div>
                  </div>
                </th>
                <th>Hành động</th>
              </tr>
            </thead>
            <tbody id="orders-list">
              <!-- Dữ liệu đơn hàng mẫu -->
              <!-- <tr>
                <td><input type="checkbox" class="checkbox"></td>
                <td class="order-id">ORD-10586</td>
                <td>16:08:55 8-05-2025</td>
                <td>Nguyễn X</td>
                <td><span class="status paid">Đã thanh toán</span></td>
                <td>2 sản phẩm</td>
                <td>15.050.000 đ</td>
                <td>-</td>
                <td><span class="status processing">Yêu cầu hủy</span></td>
                <td>16:08:55 8-05-2025</td>
                <td>
                  <div class="actions">
                    <button class="action-btn"><i class="fas fa-pencil-alt"></i></button>
                    <button class="action-btn"><i class="fas fa-trash-alt"></i></button>
                  </div>
                </td>
              </tr>
              
              <tr>
                <td><input type="checkbox" class="checkbox"></td>
                <td class="order-id">ORD-10586</td>
                <td>16:08:55 8-05-2025</td>
                <td>Nguyễn X</td>
                <td><span class="status paid">Đã thanh toán</span></td>
                <td>2 sản phẩm</td>
                <td>15.050.000 đ</td>
                <td>-</td>
                <td><span class="status processing">Chờ xác nhận</span></td>
                <td>16:08:55 8-05-2025</td>
                <td>
                  <div class="actions">
                    <button class="action-btn"><i class="fas fa-pencil-alt"></i></button>
                    <button class="action-btn"><i class="fas fa-trash-alt"></i></button>
                  </div>
                </td>
              </tr>
              
              <tr>
                <td><input type="checkbox" class="checkbox"></td>
                <td class="order-id">ORD-10586</td>
                <td>16:08:55 8-05-2025</td>
                <td>Nguyễn X</td>
                <td><span class="status paid">Đã thanh toán</span></td>
                <td>2 sản phẩm</td>
                <td>15.050.000 đ</td>
                <td>-</td>
                <td><span class="status processing">Yêu cầu hủy</span></td>
                <td>16:08:55 8-05-2025</td>
                <td>
                  <div class="actions">
                    <button class="action-btn"><i class="fas fa-pencil-alt"></i></button>
                    <button class="action-btn"><i class="fas fa-trash-alt"></i></button>
                  </div>
                </td>
              </tr>
              
              <tr>
                <td><input type="checkbox" class="checkbox"></td>
                <td class="order-id">ORD-10586</td>
                <td>16:08:55 8-05-2025</td>
                <td>Nguyễn X</td>
                <td><span class="status paid">Đã thanh toán</span></td>
                <td>2 sản phẩm</td>
                <td>15.050.000 đ</td>
                <td>-</td>
                <td><span class="status delivered">Đã hủy</span></td>
                <td>16:08:55 8-05-2025</td>
                <td>
                  <div class="actions">
                    <button class="action-btn"><i class="fas fa-pencil-alt"></i></button>
                    <button class="action-btn"><i class="fas fa-trash-alt"></i></button>
                  </div>
                </td>
              </tr>
              
              <tr>
                <td><input type="checkbox" class="checkbox"></td>
                <td class="order-id">ORD-10586</td>
                <td>16:08:55 8-05-2025</td>
                <td>Nguyễn X</td>
                <td><span class="status paid">Đã thanh toán</span></td>
                <td>2 sản phẩm</td>
                <td>15.050.000 đ</td>
                <td>-</td>
                <td><span class="status shipped">Đang giao</span></td>
                <td>16:08:55 8-05-2025</td>
                <td>
                  <div class="actions">
                    <button class="action-btn"><i class="fas fa-pencil-alt"></i></button>
                    <button class="action-btn"><i class="fas fa-trash-alt"></i></button>
                  </div>
                </td>
              </tr>
              
              <tr>
                <td><input type="checkbox" class="checkbox"></td>
                <td class="order-id">ORD-10586</td>
                <td>16:08:55 8-05-2025</td>
                <td>Nguyễn X</td>
                <td><span class="status paid">Đã thanh toán</span></td>
                <td>2 sản phẩm</td>
                <td>15.050.000 đ</td>
                <td>-</td>
                <td><span class="status processing">Yêu cầu trả hàng</span></td>
                <td>16:08:55 8-05-2025</td>
                <td>
                  <div class="actions">
                    <button class="action-btn"><i class="fas fa-pencil-alt"></i></button>
                    <button class="action-btn"><i class="fas fa-trash-alt"></i></button>
                  </div>
                </td>
              </tr>
              
              <tr>
                <td><input type="checkbox" class="checkbox"></td>
                <td class="order-id">ORD-10586</td>
                <td>16:08:55 8-05-2025</td>
                <td>Nguyễn X</td>
                <td><span class="status paid">Đã thanh toán</span></td>
                <td>2 sản phẩm</td>
                <td>15.050.000 đ</td>
                <td>-</td>
                <td><span class="status delivered">Trả hàng</span></td>
                <td>16:08:55 8-05-2025</td>
                <td>
                  <div class="actions">
                    <button class="action-btn"><i class="fas fa-pencil-alt"></i></button>
                    <button class="action-btn"><i class="fas fa-trash-alt"></i></button>
                  </div>
                </td>
              </tr>
              
              <tr>
                <td><input type="checkbox" class="checkbox"></td>
                <td class="order-id">ORD-10586</td>
                <td>16:08:55 8-05-2025</td>
                <td>Nguyễn X</td>
                <td><span class="status paid">Đã thanh toán</span></td>
                <td>2 sản phẩm</td>
                <td>15.050.000 đ</td>
                <td>-</td>
                <td><span class="status delivered">Giao hàng thành công</span></td>
                <td>16:08:55 8-05-2025</td>
                <td>
                  <div class="actions">
                    <button class="action-btn"><i class="fas fa-pencil-alt"></i></button>
                    <button class="action-btn"><i class="fas fa-trash-alt"></i></button>
                  </div>
                </td>
              </tr> -->
            </tbody>
          </table>

          <div class="table-footer">
            <div class="showing-info" id="orders-showing-info">Hiển thị 1-8 trên tổng số 20 đơn hàng</div>
            <div class="pagination">
              <button class="page-item disabled"><i class="fas fa-chevron-left"></i></button>
              <button class="page-item active">1</button>
              <button class="page-item">2</button>
              <button class="page-item">3</button>
              <button class="page-item"><i class="fas fa-chevron-right"></i></button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Modal xem chi tiết đơn hàng -->
<div class="modal fade" id="order-detail-modal" tabindex="-1" role="dialog" aria-labelledby="orderDetailModalLabel"
  aria-hidden="true">
  <div class="modal-dialog modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="orderDetailModalLabel">Chi tiết đơn hàng #<span id="order-id"></span></h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body" id="order-detail-content">
        <!-- Chi tiết đơn hàng sẽ được thêm vào đây bằng JavaScript -->
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Đóng</button>
        <button type="button" class="btn btn-primary" id="update-status-btn">Cập nhật trạng thái</button>
      </div>
    </div>
  </div>
</div>

<!-- Xóa modal thay đổi trạng thái đơn hàng vì đã không cần thiết nữa -->

<script>
  document.addEventListener('DOMContentLoaded', function () {
    loadOrders(); // 🚀 Load đơn hàng khi vào trang

    // Xử lý sự kiện cho header filters
    document.querySelectorAll('.filterable').forEach(filter => {
      filter.addEventListener('click', function (e) {
        e.preventDefault();
        e.stopPropagation();

        // Tìm element .header-filter bên trong .filterable này
        const headerFilter = this.querySelector('.header-filter');
        if (!headerFilter) return;

        // Toggle active class cho header-filter này
        const isCurrentlyActive = headerFilter.classList.contains('active');
        
        // Close tất cả dropdowns khác
        document.querySelectorAll('.header-filter').forEach(otherFilter => {
          otherFilter.classList.remove('active');
        });

        // Toggle trạng thái cho header-filter hiện tại
        if (!isCurrentlyActive) {
          headerFilter.classList.add('active');
        }
      });
    });

    // Xử lý sự kiện click cho filter items trong header
    document.querySelectorAll('.header-filter .filter-item').forEach(item => {
      item.addEventListener('click', function (e) {
        e.preventDefault();
        e.stopPropagation();

        const sortType = this.getAttribute('data-sort');
        console.log('Sorting by:', sortType);

        // Hiển thị thông báo đang sắp xếp
        if (window.antd && window.antd.message) {
          window.antd.message.loading('Đang sắp xếp dữ liệu...');
        }

        // Thực hiện sắp xếp dữ liệu
        sortOrders(sortType);

        // Đóng dropdown sau khi chọn
        this.closest('.header-filter').classList.remove('active');
      });
    });

    // Đóng tất cả dropdowns khi click ra ngoài
    document.addEventListener('click', function () {
      document.querySelectorAll('.header-filter').forEach(filter => {
        filter.classList.remove('active');
      });
    });

    // Xóa xử lý sự kiện cập nhật trạng thái cũ

    // Xử lý sự kiện đóng modal
    const closeButtons = document.querySelectorAll('[data-dismiss="modal"]');
    closeButtons.forEach(button => {
      button.addEventListener('click', function () {
        const modalId = this.closest('.modal').id;

        if (typeof $ !== 'undefined') {
          $(`#${modalId}`).modal('hide');
        } else {
          const modal = document.getElementById(modalId);
          modal.classList.remove('show');
          modal.style.display = 'none';
          modal.setAttribute('aria-hidden', 'true');
          document.body.classList.remove('modal-open');

          // Xóa backdrop
          const backdrop = document.querySelector('.modal-backdrop');
          if (backdrop) {
            backdrop.parentNode.removeChild(backdrop);
          }
        }
      });
    });

    // Khởi tạo Ant Design nếu cần
    if (window.antd) {
      console.log('Ant Design loaded successfully');

      // Có thể thêm các cấu hình khác cho Ant Design ở đây
      if (window.antd.message) {
        window.antd.message.config({
          top: 60,
          duration: 2,
          maxCount: 3,
        });
      }
    }

    // Cập nhật màu sắc của select khi thay đổi giá trị
    document.addEventListener('change', function (e) {
      if (e.target && e.target.classList.contains('order-status-select')) {
        // Cập nhật data-current-status để CSS có thể áp dụng màu sắc mới
        e.target.setAttribute('data-current-status', e.target.value);
      }
    });
  });

  // Hàm sắp xếp đơn hàng
  function sortOrders(sortType) {
    // Lấy tất cả các hàng trong bảng
    const tbody = document.getElementById('orders-list');
    const rows = Array.from(tbody.querySelectorAll('tr'));

    // Sắp xếp dựa trên loại sắp xếp
    switch (sortType) {
      case 'order-asc':
        rows.sort((a, b) => {
          const aValue = a.querySelector('.order-id').textContent;
          const bValue = b.querySelector('.order-id').textContent;
          return aValue.localeCompare(bValue);
        });
        break;

      case 'order-desc':
        rows.sort((a, b) => {
          const aValue = a.querySelector('.order-id').textContent;
          const bValue = b.querySelector('.order-id').textContent;
          return bValue.localeCompare(aValue);
        });
        break;

      case 'date-asc':
        rows.sort((a, b) => {
          const aValue = new Date(a.querySelectorAll('td')[2].textContent);
          const bValue = new Date(b.querySelectorAll('td')[2].textContent);
          return aValue - bValue;
        });
        break;

      case 'date-desc':
        rows.sort((a, b) => {
          const aValue = new Date(a.querySelectorAll('td')[2].textContent);
          const bValue = new Date(b.querySelectorAll('td')[2].textContent);
          return bValue - aValue;
        });
        break;

      case 'customer-asc':
        rows.sort((a, b) => {
          const aValue = a.querySelectorAll('td')[3].textContent;
          const bValue = b.querySelectorAll('td')[3].textContent;
          return aValue.localeCompare(bValue);
        });
        break;

      case 'customer-desc':
        rows.sort((a, b) => {
          const aValue = a.querySelectorAll('td')[3].textContent;
          const bValue = b.querySelectorAll('td')[3].textContent;
          return bValue.localeCompare(aValue);
        });
        break;

      case 'payment-paid':
        // Lọc chỉ hiển thị đơn hàng đã thanh toán
        rows.forEach(row => {
          const paymentStatus = row.querySelectorAll('td')[4].querySelector('.status').textContent;
          row.style.display = paymentStatus.includes('Đã thanh toán') ? '' : 'none';
        });
        return; // Không cần sắp xếp lại

      case 'payment-unpaid':
        // Lọc chỉ hiển thị đơn hàng chưa thanh toán
        rows.forEach(row => {
          const paymentStatus = row.querySelectorAll('td')[4].querySelector('.status').textContent;
          row.style.display = !paymentStatus.includes('Đã thanh toán') ? '' : 'none';
        });
        return; // Không cần sắp xếp lại

      case 'payment-all':
        // Hiển thị tất cả đơn hàng
        rows.forEach(row => {
          row.style.display = '';
        });
        return; // Không cần sắp xếp lại

      case 'products-asc':
        // Sắp xếp theo số lượng sản phẩm tăng dần
        rows.sort((a, b) => {
          const aText = a.querySelectorAll('td')[5].textContent;
          const bText = b.querySelectorAll('td')[5].textContent;
          const aValue = parseInt(aText.match(/\d+/)[0]);
          const bValue = parseInt(bText.match(/\d+/)[0]);
          return aValue - bValue;
        });
        break;

      case 'products-desc':
        // Sắp xếp theo số lượng sản phẩm giảm dần
        rows.sort((a, b) => {
          const aText = a.querySelectorAll('td')[5].textContent;
          const bText = b.querySelectorAll('td')[5].textContent;
          const aValue = parseInt(aText.match(/\d+/)[0]);
          const bValue = parseInt(bText.match(/\d+/)[0]);
          return bValue - aValue;
        });
        break;

      case 'total-asc':
        rows.sort((a, b) => {
          const aValue = parseFloat(a.querySelectorAll('td')[6].textContent.replace(/[^\d]/g, ''));
          const bValue = parseFloat(b.querySelectorAll('td')[6].textContent.replace(/[^\d]/g, ''));
          return aValue - bValue;
        });
        break;

      case 'total-desc':
        rows.sort((a, b) => {
          const aValue = parseFloat(a.querySelectorAll('td')[6].textContent.replace(/[^\d]/g, ''));
          const bValue = parseFloat(b.querySelectorAll('td')[6].textContent.replace(/[^\d]/g, ''));
          return bValue - aValue;
        });
        break;

      // Thêm xử lý cho các trường hợp shipping status
      case 'shipping-pending':
      case 'shipping-transit':
      case 'shipping-delivered':
      case 'shipping-failed':
      case 'shipping-returned':
        // Lấy trạng thái vận chuyển cần lọc
        const shippingStatusToFilter = sortType.replace('shipping-', '');
        // Lọc các đơn hàng theo trạng thái vận chuyển
        rows.forEach(row => {
          const badgeElement = row.querySelectorAll('td')[7].querySelector('.badge');
          const shippingStatus = badgeElement ? badgeElement.className : '';

          // Kiểm tra xem trạng thái có khớp không
          let shouldDisplay = false;
          if (shippingStatusToFilter === 'pending' && shippingStatus.includes('badge-secondary')) {
            shouldDisplay = true;
          } else if (shippingStatusToFilter === 'transit' && shippingStatus.includes('badge-primary')) {
            shouldDisplay = true;
          } else if (shippingStatusToFilter === 'delivered' && shippingStatus.includes('badge-success')) {
            shouldDisplay = true;
          } else if (shippingStatusToFilter === 'failed' && shippingStatus.includes('badge-danger')) {
            shouldDisplay = true;
          } else if (shippingStatusToFilter === 'returned' && shippingStatus.includes('badge-warning')) {
            shouldDisplay = true;
          }

          row.style.display = shouldDisplay ? '' : 'none';
        });
        return; // Không cần sắp xếp lại

      case 'shipping-all':
        // Hiển thị tất cả đơn hàng
        rows.forEach(row => {
          row.style.display = '';
        });
        return; // Không cần sắp xếp lại

      // Thêm xử lý cho các trường hợp order status
      case 'status-pending':
      case 'status-confirmed':
      case 'status-shipping':
      case 'status-success':
      case 'status-failed':
      case 'status-cancelled':
        // Lấy trạng thái đơn hàng cần lọc
        const statusToFilter = sortType.replace('status-', '').toUpperCase();
        // Lọc các đơn hàng theo trạng thái
        rows.forEach(row => {
          const selectElement = row.querySelectorAll('td')[8].querySelector('select');
          const currentStatus = selectElement ? selectElement.getAttribute('data-current-status') : '';
          row.style.display = (currentStatus === statusToFilter) ? '' : 'none';
        });
        return; // Không cần sắp xếp lại

      case 'status-all':
        // Hiển thị tất cả đơn hàng
        rows.forEach(row => {
          row.style.display = '';
        });
        return; // Không cần sắp xếp lại

      case 'payment-method-cod':
      case 'payment-method-bank':
      case 'payment-method-vnpay':
      case 'payment-method-momo':
      case 'payment-method-zalopay':
        // Lấy phương thức thanh toán cần lọc
        const paymentMethodToFilter = sortType.replace('payment-method-', '').toUpperCase();
        const methodMap = {
          'COD': 'COD',
          'BANK': 'BANK_TRANSFER',
          'VNPAY': 'VNPAY',
          'MOMO': 'MOMO',
          'ZALOPAY': 'ZALOPAY'
        };
        const methodToFilter = methodMap[paymentMethodToFilter] || paymentMethodToFilter;

        // Lọc các đơn hàng theo phương thức thanh toán
        rows.forEach(row => {
          const paymentMethod = row.querySelectorAll('td')[9].textContent.trim();
          row.style.display = paymentMethod.includes(methodToFilter) ? '' : 'none';
        });
        return; // Không cần sắp xếp lại

      case 'payment-method-all':
        // Hiển thị tất cả đơn hàng
        rows.forEach(row => {
          row.style.display = '';
        });
        return; // Không cần sắp xếp lại

      case 'update-asc':
        rows.sort((a, b) => {
          const aValue = new Date(a.querySelectorAll('td')[9].textContent);
          const bValue = new Date(b.querySelectorAll('td')[9].textContent);
          return aValue - bValue;
        });
        break;

      case 'update-desc':
        rows.sort((a, b) => {
          const aValue = new Date(a.querySelectorAll('td')[9].textContent);
          const bValue = new Date(b.querySelectorAll('td')[9].textContent);
          return bValue - aValue;
        });
        break;
    }

    // Xóa các hàng hiện tại
    while (tbody.firstChild) {
      tbody.removeChild(tbody.firstChild);
    }

    // Thêm lại các hàng đã sắp xếp
    rows.forEach(row => {
      if (row.style.display !== 'none') {
        tbody.appendChild(row);
      }
    });

    // Thông báo đã sắp xếp xong
    if (window.antd && window.antd.message) {
      window.antd.message.success('Đã sắp xếp dữ liệu');
    }
  }
</script>
<script>
  async function loadOrders() {
    try {
      // Fetch orders from admin API
      const res = await fetch('/api/orders/admin', {
        headers: { 'Authorization': 'Bearer ' + localStorage.getItem('token') }
      });
      const data = await res.json();
      console.log("Orders data:", data);

      if (!data.success) throw new Error(data.message);

      const orders = data.orders;
      const tbody = document.getElementById('orders-list');
      tbody.innerHTML = ''; // Clear cũ

      // Fetch total orders count from pagination API
      try {
        const paginationRes = await fetch('/api/orders', {
          headers: { 'Authorization': 'Bearer ' + localStorage.getItem('token') }
        });
        const paginationData = await paginationRes.json();

        if (paginationData && paginationData.pagination && paginationData.pagination.totalOrders) {
          document.getElementById('total-orders').textContent = paginationData.pagination.totalOrders;

          // Update showing info in table footer
          const showingInfo = document.getElementById('orders-showing-info');
          if (showingInfo) {
            const start = 1;
            const end = Math.min(orders.length, 10);
            showingInfo.textContent = `Hiển thị ${start}-${end} trên tổng số ${paginationData.pagination.totalOrders} đơn hàng`;
          }
        }
      } catch (paginationErr) {
        console.error("Lỗi khi lấy thông tin phân trang:", paginationErr);
      }

      // Fetch order status counts
      try {
        const statusRes = await fetch('/api/orders/count', {
          headers: { 'Authorization': 'Bearer ' + localStorage.getItem('token') }
        });
        const statusData = await statusRes.json();

        if (Array.isArray(statusData)) {
          // Update order status counts
          const pendingOrders = statusData.find(item => item.status === 'PENDING')?.count || 0;
          const shippingOrders = statusData.find(item => item.status === 'SHIPPING')?.count || 0;
          const cancelledOrders = statusData.find(item => item.status === 'CANCELLED')?.count || 0;

          document.getElementById('pending-orders').textContent = pendingOrders;
          document.getElementById('shipping-orders').textContent = shippingOrders;
          document.getElementById('cancel-orders').textContent = cancelledOrders;

          // For return orders, we need to count orders with RETURNED status or check the return_orders table
          // For now, we'll just use 0 as a placeholder
          document.getElementById('return-orders').textContent = 0;

          // Try to fetch return orders count if there's an API for it
          try {
            const returnRes = await fetch('/api/orders/return/count', {
              headers: { 'Authorization': 'Bearer ' + localStorage.getItem('token') }
            });
            const returnData = await returnRes.json();
            if (returnData && returnData.count) {
              document.getElementById('return-orders').textContent = returnData.count;
            }
          } catch (returnErr) {
            console.error("Không thể lấy số lượng đơn hàng trả lại:", returnErr);
          }
        }
      } catch (statusErr) {
        console.error("Lỗi khi lấy thông tin trạng thái đơn hàng:", statusErr);
      }

      orders.forEach(order => {
        const tr = document.createElement('tr');

        // Get payment info from the payment array
        const paymentInfo = order.payment && order.payment.length > 0 ? order.payment[0] : {};
        const paymentStatus = paymentInfo.status || order.payment_status || 'PENDING';
        const paymentMethod = paymentInfo.method || order.payment_method || 'N/A';

        tr.innerHTML = `
        <td><input type="checkbox" class="checkbox"></td>
        <td class="order-id">${order.order_hash}</td>
        <td>${formatDate(order.created_at)}</td>
        <td>${order.order_name_new || order.order_name_old || order.user_name}</td>
        <td><span class="status ${mapPaymentStatusClass(paymentStatus)}">${mapPaymentStatus(paymentStatus)}</span></td>
        <td>${order.item_count} sản phẩm</td>
        <td>${formatPrice(order.order_total_final)} đ</td>
        <td>
          <span class="badge ${mapShippingStatusClass(order.shipping_status)}">
            <i class="fas ${mapShippingStatusIcon(order.shipping_status)} mr-1"></i>
            ${mapShippingStatus(order.shipping_status)}
          </span>
        </td>
        <td>
          <select class="order-status-select" data-order-id="${order.order_id}" data-current-status="${order.current_status}" onchange="confirmStatusChange(this)">
            <option value="PENDING" ${order.current_status === 'PENDING' ? 'selected' : ''} ${order.current_status !== 'PENDING' ? 'disabled' : ''}>Chờ xác nhận</option>
            <option value="CONFIRMED" ${order.current_status === 'CONFIRMED' ? 'selected' : ''} ${(order.current_status !== 'PENDING' && order.current_status !== 'CONFIRMED') ? 'disabled' : ''}>Đã xác nhận</option>
            <option value="SHIPPING" ${order.current_status === 'SHIPPING' ? 'selected' : ''} ${(order.current_status !== 'CONFIRMED' && order.current_status !== 'SHIPPING') ? 'disabled' : ''}>Đang giao</option>
            <option value="SUCCESS" ${order.current_status === 'SUCCESS' ? 'selected' : ''} ${(order.current_status !== 'SHIPPING' && order.current_status !== 'SUCCESS') ? 'disabled' : ''}>Giao hàng thành công</option>
            <option value="FAILED" ${order.current_status === 'FAILED' ? 'selected' : ''}>Thất bại</option>
            <option value="CANCELLED" ${order.current_status === 'CANCELLED' ? 'selected' : ''}>Đã hủy</option>
          </select>
        </td>
        <td>${paymentMethod}</td>
        <td>
          <div class="actions">
            <a href="/dashboard/orders/detail/${order.order_id}" class="action-btn view-btn" title="Xem chi tiết"><i class="fas fa-pencil"></i></a>
            <button class="action-btn"><i class="fas fa-trash-alt"></i></button>
          </div>
        </td>
      `;
        tbody.appendChild(tr);
      });
    } catch (err) {
      console.error("Lỗi khi load orders:", err);
    }
  }

  function formatDate(dateStr) {
    const d = new Date(dateStr);
    return `${d.getHours()}:${d.getMinutes()}:${d.getSeconds()} ${d.getDate()}-${d.getMonth() + 1}-${d.getFullYear()}`;
  }

  function formatPrice(price) {
    const numeric = parseFloat(price);
    const integerPart = Math.floor(numeric);
    return integerPart.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".");
  }


  function mapStatus(status) {
    switch (status) {
      case 'PENDING': return 'Chờ xác nhận';
      case 'CONFIRMED': return 'Đã xác nhận';
      case 'SHIPPING': return 'Đang giao';
      case 'SUCCESS': return 'Giao hàng thành công';
      case 'FAILED': return 'Thất bại';
      case 'CANCELLED': return 'Đã hủy';
      default: return status;
    }
  }

  function mapPaymentStatus(status) {
    switch (status) {
      case 'PENDING': return 'Chờ thanh toán';
      case 'SUCCESS': return 'Đã thanh toán';
      case 'FAILED': return 'Thanh toán thất bại';
      case 'REFUNDED': return 'Đã hủy';
      default: return status || 'Chờ thanh toán';
    }
  }

  function mapPaymentStatusClass(status) {
    switch (status) {
      case 'PENDING': return 'pending';
      case 'SUCCESS': return 'paid';
      case 'FAILED': return 'failed';
      case 'REFUNDED': return 'refunded';
      default: return 'pending';
    }
  }

  function mapShippingStatus(status) {
    switch (status) {
      case 'pending': return 'Chờ lấy hàng';
      case 'picking_up': return 'Đang đi lấy hàng';
      case 'picked_up': return 'Đã lấy hàng';
      case 'in_transit': return 'Đang vận chuyển';
      case 'delivered': return 'Đã giao hàng';
      case 'delivery_failed': return 'Giao hàng thất bại';
      case 'returning': return 'Đang hoàn trả';
      case 'returned': return 'Đã hoàn trả';
      case 'canceled': return 'Đã hủy';
      default: return status || 'Chờ lấy hàng';
    }
  }

  function mapShippingStatusClass(status) {
    switch (status) {
      case 'pending': return 'badge-secondary';
      case 'picking_up': return 'badge-info';
      case 'picked_up': return 'badge-primary';
      case 'in_transit': return 'badge-primary';
      case 'delivered': return 'badge-success';
      case 'delivery_failed': return 'badge-danger';
      case 'returning': return 'badge-warning';
      case 'returned': return 'badge-warning';
      case 'canceled': return 'badge-dark';
      default: return 'badge-secondary';
    }
  }

  function mapShippingStatusIcon(status) {
    switch (status) {
      case 'pending': return 'fa-clock';
      case 'picking_up': return 'fa-people-carry';
      case 'picked_up': return 'fa-box';
      case 'in_transit': return 'fa-truck';
      case 'delivered': return 'fa-check-circle';
      case 'delivery_failed': return 'fa-times-circle';
      case 'returning': return 'fa-undo';
      case 'returned': return 'fa-box-open';
      case 'canceled': return 'fa-ban';
      default: return 'fa-clock';
    }
  }

  function showStatusDropdown(element) {
    // Xóa hàm này vì không cần thiết nữa
  }

  function confirmStatusChange(selectElement) {
    const orderId = selectElement.getAttribute('data-order-id');
    const previousStatus = selectElement.getAttribute('data-current-status');
    const newStatus = selectElement.value;

    // Nếu trạng thái không thay đổi, không làm gì cả
    if (previousStatus === newStatus) {
      return;
    }

    // Định nghĩa thứ tự các trạng thái
    const statusOrder = {
      'PENDING': 1,
      'CONFIRMED': 2,
      'SHIPPING': 3,
      'SUCCESS': 4,
      'FAILED': 5,
      'CANCELLED': 6
    };

    // Kiểm tra xem có đang cố gắng lùi step không
    // Cho phép chuyển sang FAILED hoặc CANCELLED từ bất kỳ trạng thái nào
    if (newStatus !== 'FAILED' && newStatus !== 'CANCELLED' &&
      statusOrder[newStatus] < statusOrder[previousStatus]) {
      // Hiển thị thông báo lỗi
      if (window.antd && window.antd.notification) {
        window.antd.notification.error({
          message: 'Không được phép',
          description: 'Không thể lùi trạng thái đơn hàng về bước trước đó',
          placement: 'topRight'
        });
      } else {
        alert('Không thể lùi trạng thái đơn hàng về bước trước đó');
      }

      // Khôi phục giá trị cũ
      selectElement.value = previousStatus;
      return;
    }

    // Lấy tên trạng thái để hiển thị
    const previousStatusText = mapStatus(previousStatus);
    const newStatusText = mapStatus(newStatus);

    // Sử dụng Ant Design Modal để xác nhận
    if (window.antd && window.antd.Modal) {
      window.antd.Modal.confirm({
        title: 'Xác nhận thay đổi trạng thái',
        content: `Bạn có chắc chắn muốn thay đổi trạng thái đơn hàng từ "${previousStatusText}" sang "${newStatusText}"?`,
        okText: 'Xác nhận',
        cancelText: 'Hủy',
        onOk: () => updateOrderStatus(orderId, newStatus),
        onCancel: () => {
          // Khôi phục giá trị cũ
          selectElement.value = previousStatus;
        }
      });
    } else {
      // Fallback nếu không có Ant Design
      if (confirm(`Bạn có chắc chắn muốn thay đổi trạng thái đơn hàng từ "${previousStatusText}" sang "${newStatusText}"?`)) {
        updateOrderStatus(orderId, newStatus);
      } else {
        // Khôi phục giá trị cũ
        selectElement.value = previousStatus;
      }
    }
  }

  async function updateOrderStatus(orderId, newStatus) {
    try {
      const response = await fetch(`/api/orders/${orderId}/status`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer ' + localStorage.getItem('token')
        },
        body: JSON.stringify({ new_status: newStatus })
      });

      const data = await response.json();

      if (data.success) {
        // Hiển thị thông báo thành công sử dụng Ant Design
        if (window.antd && window.antd.notification) {
          window.antd.notification.success({
            message: 'Thành công',
            description: data.message,
            placement: 'topRight'
          });
        } else {
          // Fallback nếu không có Ant Design
          alert(data.message);
        }

        // Cập nhật lại danh sách đơn hàng
        loadOrders();
      } else {
        // Hiển thị thông báo lỗi
        if (window.antd && window.antd.notification) {
          window.antd.notification.error({
            message: 'Lỗi',
            description: data.message,
            placement: 'topRight'
          });
        } else {
          alert('Lỗi: ' + data.message);
        }

        // Cập nhật lại danh sách đơn hàng để đảm bảo hiển thị trạng thái chính xác
        loadOrders();
      }
    } catch (error) {
      console.error('Lỗi khi cập nhật trạng thái:', error);

      if (window.antd && window.antd.notification) {
        window.antd.notification.error({
          message: 'Lỗi',
          description: 'Đã xảy ra lỗi khi cập nhật trạng thái đơn hàng',
          placement: 'topRight'
        });
      } else {
        alert('Đã xảy ra lỗi khi cập nhật trạng thái đơn hàng');
      }

      // Cập nhật lại danh sách đơn hàng để đảm bảo hiển thị trạng thái chính xác
      loadOrders();
    }
  }
</script>