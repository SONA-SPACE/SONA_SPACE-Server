<div class="dashboard-header-row">
  <h2 class="dashboard-title">Thêm sản phẩm</h2>
</div>

<form id="addProductForm" novalidate>
  <div class="add-product-container">
    <div class="product-form-column">
      <div class="form-section">
        <h3 class="section-title">Thông tin sản phẩm</h3>
        <div class="form-row">
          <div class="form-group">
            <label for="productName">Tên sản phẩm</label>
            <input type="text" id="productName" class="form-control" placeholder="Nhập tên sản phẩm" />
            <div class="invalid-feedback"></div>
          </div>
          <div class="form-group">
            <label for="productSlug">Slug</label>
            <input type="text" id="productSlug" class="form-control" placeholder="Có thể tự tạo nếu bỏ trống" />
            <div class="invalid-feedback"></div>
          </div>
          <div class="form-group">
            <label for="productStatus">Trạng thái</label>
            <div class="select-wrapper">
              <select id="productStatus" class="form-control">
                <option value="">Chọn trạng thái</option>
                <option value="1">Hiển thị</option>
                <option value="0">Ẩn</option>
              </select>
              <i class="fas fa-chevron-down"></i>
            </div>
            <div class="invalid-feedback"></div>
          </div>
        </div>
        <div class="form-row">
          <div class="form-group">
            <label for="productCategory">Danh mục</label>
            <div class="select-wrapper">
              <select id="productCategory" class="form-control">
                <option value="">Chọn danh mục</option>
              </select>
              <i class="fas fa-chevron-down"></i>
            </div>
            <div class="invalid-feedback"></div>
          </div>
          <div class="form-group">
            <label for="productRooms">Danh mục phòng</label>
            <div class="select-wrapper">
              <select id="productRooms" class="form-control">
                <option value="">Chọn phòng</option>
              </select>
              <i class="fas fa-chevron-down"></i>
            </div>
            <div class="invalid-feedback"></div>
          </div>
        </div>
        <div class="form-row">
          <div class="form-group full-width">
            <label for="productDescription">Mô tả</label>
            <textarea id="productDescription" class="form-control" rows="5" placeholder="Nhập mô tả"></textarea>
            <div class="invalid-feedback"></div>
          </div>
        </div>
      </div>
      <div class="form-section">
        <div class="variant-header">
          <h3 class="section-title">Thông tin bổ sung</h3>
          <button type="button" class="btn btn-add-attribute">
            <i class="fas fa-plus"></i> Thêm thuộc tính
          </button>
        </div>
        <div id="newAttributesContainer"></div>
        <div id="dynamicAttributesContainer"></div>
      </div>
    </div>
    <div class="right-column">
      <div class="form-section">
        <h3 class="section-title">Ảnh chính sản phẩm</h3>
        <div class="main-image-upload">
          <div class="upload-zone" id="mainImageUpload">
            <i class="fas fa-cloud-upload-alt"></i>
            <p>Kéo thả hoặc click để tải ảnh</p>
            <p class="upload-hint">Định dạng: JPG, PNG (Tối đa 5MB)</p>
            <input type="file" id="mainImageFile" accept="image/*" hidden />
          </div>
          <div class="main-image-preview" style="display: none">
            <img src="" alt="Preview" />
            <button class="remove-image"><i class="fas fa-times"></i></button>
          </div>
        </div>
      </div>
      <div class="form-section">
        <div class="variant-header">
          <h3 class="section-title">Biến thể sản phẩm</h3>
          <button type="button" class="btn btn-add-variant">
            <i class="fas fa-plus"></i> Thêm biến thể
          </button>
        </div>
        <div id="variantsList">
          <div class="variant-item" style="display: none" id="variantTemplate">
            <div class="variant-header">
              <h4 class="variant-title">Biến thể mới</h4>
              <div class="variant-actions">
                <button class="btn-toggle-variant">
                  <i class="fas fa-chevron-down"></i>
                </button>
                <button class="btn-remove-variant">
                  <i class="fas fa-trash"></i>
                </button>
              </div>
            </div>
            <div class="variant-content">
              <div class="form-row">
                <div class="form-group">
                  <label>Tên màu</label>
                  <div class="select-wrapper">
                    <select class="form-control variant-color">
                      <option value="">Chọn màu</option>
                    </select>
                    <i class="fas fa-chevron-down"></i>
                  </div>
                  <div class="invalid-feedback"></div>
                </div>
                <div class="form-group">
                  <label>Slug</label>
                  <input type="text" class="form-control variant-slug" placeholder="Tự động tạo nếu để trống" />
                  <div class="invalid-feedback"></div>
                </div>
              </div>
              <div class="form-row">
                <div class="form-group">
                  <label>Số lượng</label>
                  <input type="number" class="form-control variant-quantity" min="0" placeholder="Nhập số lượng" />
                  <div class="invalid-feedback"></div>
                </div>
                <div class="form-group">
                  <label>Giá gốc</label>
                  <input type="number" class="form-control variant-price" min="0" placeholder="Nhập giá gốc" />
                  <div class="invalid-feedback"></div>
                </div>
                <div class="form-group">
                  <label>Giá giảm</label>
                  <input type="number" class="form-control variant-sale-price" min="0" placeholder="Nhập giá giảm" />
                </div>
              </div>
              <div class="variant-images">
                <label>Hình ảnh biến thể</label>
                <div class="variant-image-grid">
                  <div class="variant-image-item active">
                    <div class="upload-placeholder">
                      <i class="fas fa-plus"></i>
                      <input type="file" accept="image/*" />
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="form-actions">
    <button type="button" class="btn btn-cancel">Hủy</button>
    <button type="button" class="btn btn-save">Lưu</button>
  </div>
</form>

<script>
  function showFieldError(element, message) {
    if (!element) return;
    element.classList.add("is-invalid");
    let feedbackEl = element.nextElementSibling;
    if (!feedbackEl || !feedbackEl.classList.contains("invalid-feedback")) {
      const parentContainer = element.closest(".form-infor") || element.closest(".form-group");
      if (parentContainer) {
        feedbackEl = parentContainer.querySelector(".invalid-feedback");
      }
    }

    if (!feedbackEl && (element.classList.contains("variant-image-grid") || element.id === "mainImageUpload")) {

      let existingSiblingFeedback = element.nextElementSibling;
      if (existingSiblingFeedback && existingSiblingFeedback.classList.contains("invalid-feedback")) {
        feedbackEl = existingSiblingFeedback;
      } else {

        feedbackEl = document.createElement("div");
        feedbackEl.className = "invalid-feedback d-block";
        element.parentNode.insertBefore(feedbackEl, element.nextSibling);
      }
    }

    if (feedbackEl) {
      feedbackEl.textContent = message;
      feedbackEl.style.display = "block";
    }
  }

  function clearFieldError(element) {
    if (!element) return;
    element.classList.remove("is-invalid");
    let feedbackEl = element.nextElementSibling;

    if (!feedbackEl || !feedbackEl.classList.contains("invalid-feedback")) {
      const parentContainer = element.closest(".form-infor") || element.closest(".form-group");
      if (parentContainer) {
        feedbackEl = parentContainer.querySelector(".invalid-feedback");
      }
    }

    // Xử lý đặc biệt cho variant-image-grid và mainImageUpload nếu feedback nằm ngoài
    if (element.classList.contains("variant-image-grid") || element.id === "mainImageUpload") {
      let existingSiblingFeedback = element.nextElementSibling;
      if (existingSiblingFeedback && existingSiblingFeedback.classList.contains("invalid-feedback")) {
        existingSiblingFeedback.remove(); // Xóa hoàn toàn
        return; // Thoát sau khi xóa
      }
    }

    if (feedbackEl) {
      feedbackEl.textContent = "";
      feedbackEl.style.display = "none"; // Ẩn nó đi
    }
  }

  let mainImageInput;
  let mainImageUpload;
  let newAttributeCounter = 0; // Counter for new attributes

  function showToast(message, type = "success") {
    let toastContainer = document.getElementById("toastContainer");
    if (!toastContainer) {
      toastContainer = document.createElement("div");
      toastContainer.id = "toastContainer";
      toastContainer.className = "position-fixed top-0 end-0 p-3";
      toastContainer.style.zIndex = "1050";
      document.body.appendChild(toastContainer);
    }

    const toast = document.createElement("div");
    toast.className = `toast align-items-center text-white bg-${type} border-0`;
    toast.setAttribute("role", "alert");
    toast.setAttribute("aria-live", "assertive");
    toast.setAttribute("aria-atomic", "true");

    toast.innerHTML = `
 <div class="d-flex">
  <div class="toast-body" style="font-size: 24px;">${message}</div>
  <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
 </div>
`;

    toastContainer.appendChild(toast);
    const bsToast = new bootstrap.Toast(toast, {
      delay: 3000
    });
    bsToast.show();

    toast.addEventListener("hidden.bs.toast", () => toast.remove());
  }

  async function uploadImage(file, folder = "", subfolder = "") {
    if (!file) return null;
    const formData = new FormData();
    formData.append("image", file);
    formData.append("folder", folder);
    if (subfolder) formData.append("subfolder", subfolder);

    try {
      const res = await fetch(`/api/upload/product`, {
        method: "POST",
        body: formData,
      });
      const data = await res.json();
      return data.url || null;
    } catch (error) {
      showToast("Lỗi khi tải ảnh lên: " + error.message, "danger");
      return null;
    }
  }

  // Tạo slug
  function generateSlug(str) {
    return str
      .toLowerCase()
      .normalize("NFD")
      .replace(/[\u0300-\u036f]/g, "")
      .replace(/[đĐ]/g, "d")
      .replace(/[^a-z0-9]/g, "-")
      .replace(/-+/g, "-")
      .replace(/^-+|-+$/g, "");
  }

  // Hàm load dữ liệu cho select box
  async function loadSelectData(
    selectId,
    endpoint,
    valueKey,
    textKey,
    placeholder = "Chọn..."
  ) {
    const select = document.getElementById(selectId);
    if (!select) {
      return;
    }

    try {
      const response = await fetch(`/api${endpoint}`);
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(
          `Network response was not ok: ${response.status} ${response.statusText} - ${errorText}`
        );
      }
      const data = await response.json();

      if (!data || !Array.isArray(data)) {
        throw new Error("Dữ liệu không hợp lệ hoặc rỗng");
      }

      select.innerHTML =
        `<option value="">${placeholder}</option>` +
        data
          .map(
            (item) =>
              `<option value="${item[valueKey]}">${item[textKey]}</option>`
          )
          .join("");
    } catch (error) {
      select.innerHTML = `<option value="">Lỗi tải dữ liệu</option>`;
      showToast(
        `Lỗi khi tải dữ liệu cho ${placeholder}: ${error.message}`,
        "danger"
      );
    }
  }

  // Hàm load dữ liệu cho variant colors
  async function loadVariantColors() {
    try {
      const response = await fetch(`/api/color/filter`);
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(
          `Network response was not ok: ${response.status} ${response.statusText} - ${errorText}`
        );
      }
      const colors = await response.json();

      if (!colors || !Array.isArray(colors)) {
        throw new Error("Dữ liệu màu không hợp lệ");
      }

      const colorOptions = `
    <option value="">Chọn màu</option>
    ${colors
          .map(
            (color) => `
  <option value="${color.color_id}" data-hex="${color.color_hex}">
    ${color.color_name}
  </option>
    `
          )
          .join("")}
`;

      document.querySelectorAll(".variant-color").forEach((select) => {
        select.innerHTML = colorOptions;
      });

      document
        .querySelector(".btn-add-variant")
        .addEventListener("click", function () {
          setTimeout(() => {
            const newVariantColorSelect = document.querySelector(
              ".variant-item:last-child .variant-color"
            );
            if (newVariantColorSelect) {
              newVariantColorSelect.innerHTML = colorOptions;

              const newVariant = newVariantColorSelect.closest(".variant-item");
              if (newVariant) {
                setupVariantEvents(newVariant);
              }
            }
          }, 50);
        });
    } catch (error) {
      showToast("Lỗi khi tải dữ liệu màu sắc", "danger");
    }
  }

  let allMaterials = [];
  async function loadAllMaterials() {
    try {
      const response = await fetch(`/api/materials`);
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(
          `Network response was not ok: ${response.status} ${response.statusText} - ${errorText}`
        );
      }
      const materials = await response.json();

      if (!materials || !Array.isArray(materials)) {
        throw new Error("Dữ liệu chất liệu không hợp lệ");
      }
      allMaterials = materials;
    } catch (error) {
      showToast("Lỗi khi tải danh sách chất liệu.", "danger");
    }
  }

  async function loadCategoryAttributes(categoryId) {
    const dynamicAttributesContainer = document.getElementById("dynamicAttributesContainer");
    dynamicAttributesContainer.innerHTML = ""; // Clear existing attributes

    if (!categoryId) {
      return;
    }
    try {
      const response = await fetch(`/api/attribute/${categoryId}/attributes`);
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(
          `Network response was not ok: ${response.status} ${response.statusText} - ${errorText}`
        );
      }
      const attributes = await response.json();
      if (!attributes || !Array.isArray(attributes) || attributes.length === 0) {
        // showToast("Không tìm thấy thuộc tính cho danh mục này.", "info"); // Removed this toast for cleaner UX
        return;
      }

      let formRowsHtml = "";
      let currentFormRow = '<div class="form-row">';
      let rowCount = 0; // Track elements in current row

      attributes.forEach((attr, index) => {
        let inputHtml = '';
        const inputId = `attribute-${attr.attribute_id}`;
        const inputName = `attributes[${attr.attribute_id}]`;

        if (attr.value_type === 'material_id') {
          inputHtml = `
            <div class="select-wrapper">
              <select class="form-control dynamic-attribute" id="${inputId}" name="${inputName}" data-attribute-id="${attr.attribute_id}" data-value-type="${attr.value_type}" ${attr.is_required ? 'required' : ''}>
                <option value="">Chọn chất liệu</option>
                ${allMaterials.map(material => `<option value="${material.material_id}">${material.material_name}</option>`).join('')}
              </select>
              <i class="fas fa-chevron-down"></i>
            </div>
          `;
        } else {
          const type = attr.value_type === 'number' ? 'number' : 'text';
          const placeholder = `Nhập ${attr.attribute_name}${attr.unit ? ` (${attr.unit})` : ''}`;
          inputHtml = `
            <input
              type="${type}"
              class="form-control dynamic-attribute"
              id="${inputId}"
              name="${inputName}"
              placeholder="${placeholder}"
              data-attribute-id="${attr.attribute_id}"
              data-value-type="${attr.value_type}"
              ${attr.is_required ? 'required' : ''}
            />
          `;
        }

        currentFormRow += `
          <div class="form-group col-md-6">
            <label for="${inputId}">${attr.attribute_name}${attr.is_required ? ' <span class="required-asterisk">*</span>' : ''}</label>
            ${inputHtml}
            <div class="invalid-feedback"></div>
          </div>
        `;
        rowCount++;

        // Close row if it has 2 elements or if it's the last element
        if (rowCount % 2 === 0 || index === attributes.length - 1) {
          currentFormRow += '</div>'; // End the row
          formRowsHtml += currentFormRow;
          currentFormRow = '<div class="form-row">'; // Start a new row
          rowCount = 0; // Reset row count
        }
      });

      dynamicAttributesContainer.innerHTML = formRowsHtml;
    } catch (error) {
      showToast("Lỗi khi tải thuộc tính danh mục: " + error.message, "danger");
    }
  }

  // Khởi tạo form
  async function initializeForm() {
    try {
      await loadSelectData(
        "productCategory",
        "/categories",
        "category_id",
        "category_name",
        "Chọn danh mục"
      );

      await loadSelectData(
        "productRooms",
        "/rooms/filter",
        "room_id",
        "room_name",
        "Chọn phòng"
      );

      await loadAllMaterials(); // Load materials for potential material_id attributes

      await loadVariantColors();

      // Thêm sự kiện cho nút Cancel
      document
        .querySelector(".btn-cancel")
        .addEventListener("click", function () {
          window.location.href = "/dashboard/products";
        });

      const productCategorySelect = document.getElementById("productCategory");
      if (productCategorySelect) {
        productCategorySelect.addEventListener("change", function () {
          // Clear new attributes container when category changes
          document.getElementById("newAttributesContainer").innerHTML = '';
          loadCategoryAttributes(this.value);
        });

        if (productCategorySelect.value) {
          loadCategoryAttributes(productCategorySelect.value);
        }
      } else {
      }
    } catch (error) {
      showToast("Lỗi khởi tạo form", "danger");
    }
  }
  document.addEventListener("change", function (e) {
    // Clear main image validation on file select
    if (e.target.id === "mainImageFile") {
      const mainImageUploadZone = document.getElementById("mainImageUpload");
      mainImageUploadZone.classList.remove("is-invalid");
      const feedback = mainImageUploadZone.querySelector(".invalid-feedback");
      if (feedback) feedback.remove();

      const nextSibling = mainImageUploadZone.nextElementSibling;
      if (nextSibling && nextSibling.classList.contains("invalid-feedback")) {
        nextSibling.remove();
      }
    }

    // Clear variant image validation on file select
    if (e.target.matches('.variant-image-item input[type="file"]')) {
      const variantImageGrid = e.target.closest(".variant-image-grid");
      if (variantImageGrid) {
        // Đảm bảo có ít nhất 1 ảnh sau khi thay đổi để xóa lỗi
        const currentImages = variantImageGrid.querySelectorAll(
          ".variant-image-item.loaded img"
        ).length;
        if (currentImages > 0) {
          variantImageGrid.classList.remove("is-invalid");
          const feedback = variantImageGrid.querySelector(".invalid-feedback");
          if (feedback) feedback.remove();
        }
      }
    }

    // General clearing for form-control inputs/selects
    if (
      e.target.classList.contains("form-control") &&
      e.target.classList.contains("is-invalid")
    ) {
      e.target.classList.remove("is-invalid");
      const feedback = e.target
        .closest(".form-group")
        ?.querySelector(".invalid-feedback");
      if (feedback) feedback.textContent = "";
    }
  });

  document.addEventListener("DOMContentLoaded", function () {
    initializeForm();

    setupMainImageUpload();
    setupProductNameSlugGeneration();

    document.querySelectorAll(".variant-item").forEach((variant) => {
      if (variant.id !== "variantTemplate") {
        setupVariantEvents(variant);
      }
    });

    // Event listener for "Thêm thuộc tính" button
    document.querySelector(".btn-add-attribute").addEventListener("click", addCustomAttributeRow);
  });

  document
    .querySelector(".btn-add-variant")
    .addEventListener("click", function () {
      const visibleVariants = [
        ...document.querySelectorAll(".variant-item"),
      ].filter((v) => v.style.display !== "none");
      const newIndex = visibleVariants.length;

      const newVariant = document
        .getElementById("variantTemplate")
        .cloneNode(true);
      newVariant.id = `variant-${newIndex + 1}`;
      newVariant.style.display = "block";
      newVariant.querySelector(".variant-title").textContent = `Biến thể ${newIndex + 1
        }`;

      newVariant
        .querySelectorAll(".is-invalid")
        .forEach((el) => el.classList.remove("is-invalid"));
      newVariant
        .querySelectorAll(".invalid-feedback")
        .forEach((el) => (el.textContent = ""));

      const clonedImageGrid = newVariant.querySelector(".variant-image-grid");
      if (
        clonedImageGrid &&
        clonedImageGrid.nextElementSibling &&
        clonedImageGrid.nextElementSibling.classList.contains(
          "invalid-feedback"
        )
      ) {
        clonedImageGrid.nextElementSibling.remove();
      }

      setupVariantEvents(newVariant);

      document.getElementById("variantsList").appendChild(newVariant);
    });

  // Hàm setup các sự kiện cho biến thể
  function setupVariantEvents(variantElement) {
    const toggleButton = variantElement.querySelector(".btn-toggle-variant");
    if (toggleButton) {
      toggleButton.addEventListener("click", function () {
        const content = variantElement.querySelector(".variant-content");
        const icon = this.querySelector("i");
        if (content.style.display === "none") {
          content.style.display = "block";
          icon.classList.replace("fa-chevron-down", "fa-chevron-up");
        } else {
          content.style.display = "none";
          icon.classList.replace("fa-chevron-up", "fa-chevron-down");
        }
      });
    }

    // Xóa biến thể
    const removeButton = variantElement.querySelector(".btn-remove-variant");
    if (removeButton) {
      removeButton.addEventListener("click", function () {
        if (confirm("Bạn có chắc muốn xóa biến thể này?")) {
          variantElement.remove();

        }
      });
    }

    // Tự động tạo slug khi chọn màu
    const colorSelect = variantElement.querySelector(".variant-color");
    const slugInput = variantElement.querySelector(".variant-slug");

    if (colorSelect && slugInput) {
      colorSelect.addEventListener("change", () => {
        const selectedOption = colorSelect.options[colorSelect.selectedIndex];
        const colorName = selectedOption?.textContent?.trim() || "";
        if (colorName && !slugInput.value) {
          slugInput.value = generateSlug(colorName);
        }
      });
    }

    setupVariantImageUpload(variantElement);
  }

  function setupVariantImageUpload(variantElement) {
    const imageGrid = variantElement.querySelector(".variant-image-grid");
    const maxImages = 7;

    if (typeof variantElement._imageCount === "undefined") {
      variantElement._imageCount = 0;
    } else {

      variantElement._imageCount = imageGrid.querySelectorAll(
        ".variant-image-item.loaded"
      ).length;
    }

    function createImageBox() {
      const div = document.createElement("div");
      div.className = "variant-image-item active";
      div.innerHTML = `
      <div class="upload-placeholder">
        <i class="fas fa-plus"></i>
        <input type="file" hidden accept="image/*">
      </div>
    `;
      return div;
    }

    function setupImageBox(imageBox) {
      const input = imageBox.querySelector('input[type="file"]');
      const placeholder = imageBox.querySelector(".upload-placeholder");

      imageBox.addEventListener("click", () => input.click());

      input.addEventListener("change", function (e) {
        const file = e.target.files[0];
        if (file && file.type.startsWith("image/")) {
          const reader = new FileReader();
          reader.onload = function (e) {
            imageBox.classList.add("loaded");
            imageBox.classList.remove("active");

            placeholder.style.display = "none";

            const img = document.createElement("img");
            img.src = e.target.result;
            img.alt = "Preview";
            imageBox.appendChild(img);

            // Add a remove button for the image
            const removeBtn = document.createElement("button");
            removeBtn.className = "remove-image";
            removeBtn.innerHTML = `<i class="fas fa-times"></i>`;
            imageBox.appendChild(removeBtn);

            // Handle removing the image
            removeBtn.addEventListener("click", function (e) {
              e.stopPropagation();
              imageBox.remove();

              if (
                imageGrid.querySelectorAll(".variant-image-item.active")
                  .length === 0 &&
                variantElement._imageCount < maxImages
              ) {
                const newBox = createImageBox();
                imageGrid.appendChild(newBox);
                setupImageBox(newBox);
              }

              input.dispatchEvent(new Event("change", {
                bubbles: true
              }));
            });

            variantElement._imageCount++;

            if (variantElement._imageCount < maxImages) {
              const newBox = createImageBox();
              imageGrid.appendChild(newBox);
              setupImageBox(newBox);
            }

            if (imageGrid.classList.contains("is-invalid")) {
              imageGrid.classList.remove("is-invalid");
              const feedback = imageGrid.nextElementSibling;
              if (feedback && feedback.classList.contains("invalid-feedback")) {
                feedback.remove();
              }
            }
          };
          reader.readAsDataURL(file);
        }
      });
    }

    imageGrid.innerHTML = "";
    variantElement._imageCount = 0;

    const firstBox = createImageBox();
    imageGrid.appendChild(firstBox);
    setupImageBox(firstBox);
  }

  function setupMainImageUpload() {
    mainImageUpload = document.getElementById("mainImageUpload");
    mainImageInput = mainImageUpload.querySelector('input[type="file"]');
    const mainImagePreview = document.querySelector(".main-image-preview");

    if (mainImageUpload && mainImageInput && mainImagePreview) {
      mainImageUpload.addEventListener("click", () => mainImageInput.click());

      mainImageInput.addEventListener("change", function (e) {
        const file = e.target.files[0];
        if (file && file.type.startsWith("image/")) {
          const reader = new FileReader();
          reader.onload = function (e) {
            mainImagePreview.querySelector("img").src = e.target.result;
            mainImagePreview.style.display = "block";
            mainImageUpload.style.display = "none";
          };
          reader.readAsDataURL(file);
        }
      });

      const removeMainImageBtn = document.querySelector(
        ".main-image-preview .remove-image"
      );
      if (removeMainImageBtn) {
        removeMainImageBtn.addEventListener("click", function () {
          mainImagePreview.style.display = "none";
          mainImageUpload.style.display = "block";
          mainImageInput.value = "";

          mainImageInput.dispatchEvent(new Event("change", {
            bubbles: true
          }));
        });
      }
    } else {
    }
  }

  function setupProductNameSlugGeneration() {
    const productNameInput = document.getElementById("productName");
    const productSlugInput = document.getElementById("productSlug");

    if (productNameInput && productSlugInput) {
      productNameInput.addEventListener("input", function () {
        const slug = generateSlug(this.value);
        productSlugInput.value = slug;
      });
    } else {
    }
  }

  // --- NEW: Function to save a newly added attribute ---
  async function saveNewAttribute(rowElement, counter) {
    const nameInput = rowElement.querySelector(`#newAttributeName-${counter}`);
    const valueTypeSelect = rowElement.querySelector(`#newAttributeValueType-${counter}`);
    const unitInput = rowElement.querySelector(`#newAttributeUnit-${counter}`);
    const selectedCategoryId = document.getElementById("productCategory").value;

    // Clear previous errors for this row
    clearFieldError(nameInput);
    clearFieldError(valueTypeSelect);
    clearFieldError(unitInput);

    const attribute_name = nameInput.value.trim();
    const value_type = valueTypeSelect.value;
    const unit = unitInput.value.trim() || null;
    const is_required = false; // Always false for new custom attributes

    let hasErrors = false;
    if (!attribute_name) {
      showFieldError(nameInput, "Tên thuộc tính là bắt buộc.");
      hasErrors = true;
    }
    if (!value_type) {
      showFieldError(valueTypeSelect, "Loại giá trị là bắt buộc.");
      hasErrors = true;
    }
    if (!selectedCategoryId) {
      showToast("Vui lòng chọn danh mục sản phẩm trước khi thêm thuộc tính.", "danger");
      showFieldError(document.getElementById("productCategory"), "Vui lòng chọn danh mục.");
      hasErrors = true;
    }

    if (hasErrors) {
      return;
    }

    const payload = {
      attribute_name,
      value_type,
      unit,
      is_required,
    };

     // Log payload
    try {
      const response = await fetch(`/api/attribute/${selectedCategoryId}`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(payload),
      });

      const addAttributeRes = await response.json();
       // Log API response

      if (response.ok && addAttributeRes && addAttributeRes.success) {
        showToast(`Đã thêm thuộc tính mới: ${attribute_name}`, "success");
        rowElement.remove(); // Remove the new attribute row from the DOM
        // Reload dynamic attributes to show the newly added one
        await loadCategoryAttributes(selectedCategoryId, []);
      } else {
        showToast(addAttributeRes?.message || "Không thể thêm thuộc tính mới.", "danger");
      }
    } catch (error) {
      showToast(`Lỗi khi thêm thuộc tính '${attribute_name}': ${error.message}`, "danger");
    }
  }

  // --- New Functionality: Add Custom Attribute Row ---
  function addCustomAttributeRow() {
    const newAttributesContainer = document.getElementById("newAttributesContainer");
    newAttributeCounter++;
    const rowId = `new-attribute-row-${newAttributeCounter}`;

    const newAttributeHtml = `
      <div class="form-row new-attribute-row" id="${rowId}">
        <div class="form-group col-md-3">
          <label for="newAttributeName-${newAttributeCounter}">Tên thuộc tính</label>
          <input type="text" id="newAttributeName-${newAttributeCounter}" class="form-control new-attribute-input" placeholder="Tên thuộc tính">
          <div class="invalid-feedback"></div>
        </div>
        <div class="form-group col-md-3">
          <label for="newAttributeValueType-${newAttributeCounter}">Loại giá trị</label>
          <div class="select-wrapper">
            <select id="newAttributeValueType-${newAttributeCounter}" class="form-control new-attribute-input">
              <option value="">Chọn loại</option>
              <option value="text">Text</option>
              <option value="number">Number</option>
              <option value="material_id">Chất liệu</option>
            </select>
            <i class="fas fa-chevron-down"></i>
          </div>
          <div class="invalid-feedback"></div>
        </div>
        <div class="form-group col-md-3">
          <label for="newAttributeUnit-${newAttributeCounter}">Đơn vị (nếu có)</label>
          <input type="text" id="newAttributeUnit-${newAttributeCounter}" class="form-control new-attribute-input" placeholder="Ví dụ: cm, kg">
          <div class="invalid-feedback"></div>
        </div>
        <div class="form-group col-md-3 d-flex align-items-end justify-content-end gap-2">
          <button type="button" class="btn btn-primary btn-sm save-new-attribute" data-row-id="${rowId}" data-counter="${newAttributeCounter}">
            Lưu
          </button>
          <button type="button" class="btn btn-danger btn-sm remove-new-attribute" data-row-id="${rowId}">
            Xóa
          </button>
        </div>
      </div>
    `;
    newAttributesContainer.insertAdjacentHTML('beforeend', newAttributeHtml);

    const newRowElement = document.getElementById(rowId);

    // Add event listener for removing the new attribute row
    newRowElement.querySelector(".remove-new-attribute").addEventListener("click", function () {
      newRowElement.remove();
    });

    // Add event listener for saving the new attribute row
    newRowElement.querySelector(".save-new-attribute").addEventListener("click", function () {
      const counter = parseInt(this.dataset.counter);
      saveNewAttribute(newRowElement, counter);
    });

    // Add input/change listeners to clear errors for new attribute fields
    newRowElement.querySelectorAll(".new-attribute-input").forEach(input => {
      input.addEventListener("input", () => clearFieldError(input));
      input.addEventListener("change", () => clearFieldError(input));
    });
  }

  document.querySelector(".btn-save").addEventListener("click", async () => {
    const saveButton = document.querySelector(".btn-save");
    const originalButtonText = saveButton.textContent;
    const validationErrors = [];

    saveButton.textContent = "Đang lưu...";
    saveButton.disabled = true;

    document
      .querySelectorAll(".is-invalid")
      .forEach((el) => el.classList.remove("is-invalid"));
    document
      .querySelectorAll(".invalid-feedback")
      .forEach((el) => (el.textContent = ""));

    document
      .querySelectorAll(
        "#mainImageUpload + .invalid-feedback, .variant-image-grid .invalid-feedback"
      )
      .forEach((el) => el.remove());

    const name = document.getElementById("productName");
    const slug = document.getElementById("productSlug");
    const description = document.getElementById("productDescription");
    const categorySelect = document.getElementById("productCategory");
    const statusSelect = document.getElementById("productStatus");
    const roomSelect = document.getElementById("productRooms");

    const addValidationError = (element, message) => {
      element.classList.add("is-invalid");
      const feedbackEl = element
        .closest(".form-group")
        ?.querySelector(".invalid-feedback");
      if (feedbackEl) feedbackEl.textContent = message;
      validationErrors.push({
        element,
        message
      });
    };

    // --- Validate Product Info ---
    if (!name.value.trim())
      addValidationError(name, "Tên sản phẩm là bắt buộc");
    if (!description.value.trim())
      addValidationError(description, "Mô tả sản phẩm là bắt buộc");
    if (!categorySelect.value)
      addValidationError(categorySelect, "Danh mục là bắt buộc");
    if (!statusSelect.value)
      addValidationError(statusSelect, "Trạng thái là bắt buộc");

    // --- Validate Main Image ---
    const mainImageInput = document.getElementById("mainImageFile");
    const mainImageUploadZone = document.getElementById("mainImageUpload");
    const mainImageFile = mainImageInput ? mainImageInput.files[0] : null;

    // Xóa feedback cũ và class is-invalid trước khi validate lại
    let mainImageFeedback =
      mainImageUploadZone.querySelector(".invalid-feedback");
    if (mainImageFeedback) mainImageFeedback.remove();
    mainImageUploadZone.classList.remove("is-invalid");

    // Kiểm tra nếu vùng upload ảnh chính đang hiển thị (chưa có ảnh) VÀ không có file nào được chọn
    if (mainImageUploadZone.style.display !== "none" && !mainImageFile) {
      mainImageUploadZone.classList.add("is-invalid");
      mainImageFeedback = document.createElement("div");
      mainImageFeedback.className = "invalid-feedback d-block";
      mainImageFeedback.textContent = "Ảnh chính sản phẩm là bắt buộc.";
      mainImageUploadZone.parentNode.insertBefore(
        mainImageFeedback,
        mainImageUploadZone.nextSibling
      );
      validationErrors.push({
        element: mainImageUploadZone,
        message: "Vui lòng nhập đầy đủ thông tin cần thiết.",
      });
    }

    // Lấy room_ids từ select box
    const room_ids = [...roomSelect.selectedOptions]
      .map((opt) => opt.value)
      .filter((val) => val);
    if (room_ids.length === 0) {
      addValidationError(roomSelect, "Vui lòng chọn ít nhất một phòng.");
    }
    // Validate dynamic attributes (existing category attributes)
    const attributes = [];
    const dynamicAttributeInputs =
      document.querySelectorAll("#dynamicAttributesContainer .dynamic-attribute");
    dynamicAttributeInputs.forEach((input) => {
      const attribute_id = input.dataset.attributeId;
      const valueType = input.dataset.valueType;
      let value = input.value.trim();
      let material_id = null;

      if (valueType === "material_id") {
        material_id = value;
        value = null;
      } else {
        if (input.type === "number") {
          value = value === "" ? null : parseFloat(value);
        } else {
          value = value === "" ? null : value;
        }
      }

      if (input.hasAttribute("required") && (value === null || value === "" || material_id === null || material_id === "")) {
        addValidationError(input, `Thông tin ${input.previousElementSibling.textContent.replace('<span class="required-asterisk">*</span>', '').trim()} là bắt buộc.`);
      }

      if (attribute_id) { // Ensure attribute_id exists for an existing attribute
        attributes.push({
          attribute_id: parseInt(attribute_id),
          value: value,
          material_id: material_id,
        });
      }
    });

    const variantElements = [
      ...document.querySelectorAll(".variant-item"),
    ].filter(
      (item) => item.style.display !== "none" && item.id !== "variantTemplate"
    );

    if (variantElements.length === 0) {
      const sectionTitle = [
        ...document.querySelectorAll(".section-title"),
      ].find((el) => el.textContent.includes("Biến thể"));

      validationErrors.push({
        element: sectionTitle || document.querySelector(".btn-add-variant"),
        message: "Sản phẩm phải có ít nhất 1 biến thể!",
      });
    }

    const variants = [];
    // Validate individual variants only if there are variants to check
    if (variantElements.length > 0) {
      for (const item of variantElements) {
        const color_id_el = item.querySelector(".variant-color");
        const variant_slug_el = item.querySelector(".variant-slug");
        const quantity_el = item.querySelector(".variant-quantity");
        const price_el = item.querySelector(".variant-price");
        const price_sale_el = item.querySelector(".variant-sale-price");

        if (!color_id_el.value)
          addValidationError(color_id_el, "Màu sắc là bắt buộc.");

        if (
          isNaN(parseInt(quantity_el.value)) ||
          parseInt(quantity_el.value) < 0
        )
          addValidationError(quantity_el, "Số lượng không hợp lệ.");
        if (isNaN(parseFloat(price_el.value)) || parseFloat(price_el.value) < 0)
          addValidationError(price_el, "Giá là bắt buộc.");

        // --- Validate Variant Images ---
        const variantImageGrid = item.querySelector(".variant-image-grid");
        let imageGridFeedback =
          variantImageGrid.querySelector(".invalid-feedback");

        if (imageGridFeedback) imageGridFeedback.remove();
        variantImageGrid.classList.remove("is-invalid");

        const list_image_items_loaded = [
          ...item.querySelectorAll(".variant-image-item.loaded"),
        ];
        if (list_image_items_loaded.length === 0) {
          variantImageGrid.classList.add("is-invalid");
          imageGridFeedback = document.createElement("div");
          imageGridFeedback.className = "invalid-feedback d-block";
          imageGridFeedback.textContent = "Cần ít nhất 1 ảnh cho biến thể.";
          variantImageGrid.parentNode.insertBefore(
            imageGridFeedback,
            variantImageGrid.nextSibling
          );
        }

        variants.push({
          color_id: color_id_el.value,
          variant_slug: variant_slug_el.value.trim(),
          quantity: parseInt(quantity_el.value),
          price: parseFloat(price_el.value),
          price_sale: parseFloat(price_sale_el.value) || null,
          list_image: [],
        });
      }
    }

    if (validationErrors.length > 0) {

      validationErrors[0].element.scrollIntoView({
        behavior: "smooth",
        block: "center",
      });
      // showToast(
      //   "Vui lòng điền đầy đủ các thông tin bắt buộc.",
      //   "danger"
      // );
      // Hiển thị từng toast một với độ trễ
      let delay = 0;
      for (const error of validationErrors) {
        let shouldShowToast = true;

        // Kiểm tra nếu lỗi đã được hiển thị inline trên form-control thông thường
        if (error.element && error.element.classList.contains("form-control")) {
          const feedbackEl = error.element
            .closest(".form-group")
            ?.querySelector(".invalid-feedback");
          if (feedbackEl && feedbackEl.textContent === error.message) {
            shouldShowToast = false;
          }
        }

        // Kiểm tra nếu lỗi là của mainImageUploadZone
        if (error.element && error.element.id === "mainImageUpload") {
          const feedbackEl = error.element.nextElementSibling;
          if (
            feedbackEl &&
            feedbackEl.classList.contains("invalid-feedback") &&
            feedbackEl.textContent === error.message
          ) {
            shouldShowToast = false;
          }
        }

        // Kiểm tra nếu lỗi là của variant-image-grid
        if (
          error.element &&
          error.element.classList.contains("variant-image-grid")
        ) {
          const feedbackEl = error.element.querySelector(".invalid-feedback");
          if (feedbackEl && feedbackEl.textContent === error.message) {
            shouldShowToast = false;
          }
        }

        if (shouldShowToast) {
          setTimeout(() => {
            showToast(error.message, "danger");
          }, delay);
          delay += 500;
        }
      }

      saveButton.textContent = originalButtonText;
      saveButton.disabled = false;
      return;
    }

    let main_image_url = null;
    try {
      if (mainImageFile) {
        main_image_url = await uploadImage(
          mainImageFile,
          "SonaSpace/Product",
          "main"
        );
        if (!main_image_url) {
          throw new Error("Không thể tải ảnh chính lên.");
        }
      }
    } catch (uploadError) {
      showToast("Lỗi khi tải ảnh chính: " + uploadError.message, "danger");

      saveButton.textContent = originalButtonText;
      saveButton.disabled = false;
      return;
    }

    const finalVariants = [];
    for (let i = 0; i < variantElements.length; i++) {
      const item = variantElements[i];
      const currentVariantData = variants[i];

      const list_image_inputs_to_upload = [
        ...item.querySelectorAll(
          '.variant-image-item.loaded input[type="file"]'
        ),
      ];
      const list_image_urls = [];

      for (const input of list_image_inputs_to_upload) {
        const file = input.files[0];
        try {
          const url = await uploadImage(file, "SonaSpace/Product", "variant");
          if (url) {
            list_image_urls.push(url);
          } else if (file) {
            throw new Error("Không thể lấy URL ảnh biến thể sau khi tải lên.");
          }
        } catch (uploadError) {
          showToast(
            "Lỗi khi tải ảnh biến thể: " + uploadError.message,
            "danger"
          );
          saveButton.textContent = originalButtonText;
          saveButton.disabled = false;
          return;
        }
      }
      finalVariants.push({
        ...currentVariantData,
        list_image: list_image_urls,
      });
    }

    try {
      const res = await fetch(`/api/products/add`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          name: name.value.trim(),
          slug: slug.value.trim(),
          description: description.value.trim(),
          category_id: parseInt(categorySelect.value),
          status: parseInt(statusSelect.value),
          main_image: main_image_url,
          room_ids: room_ids.map(Number),
          attributes: attributes,
          variants: finalVariants,
        }),
      });

      const data = await res.json();
      if (!res.ok) {
        if (data.errors && Array.isArray(data.errors)) {
          data.errors.forEach(({
            field,
            message
          }) => {
            let input = null;

            if (field.startsWith("attributes")) {
              const errorElement = document.getElementById(
                "dynamicAttributesContainer"
              );
              if (errorElement) {
                // Find the specific attribute input if possible
                const attrIdMatch = field.match(/attributes\[(\d+)\]/);
                if (attrIdMatch) {
                  const attrId = attrIdMatch[1];
                  const specificInput = document.getElementById(`attribute-${attrId}`);
                  if (specificInput) {
                    addValidationError(specificInput, message);
                  } else {
                    // Fallback if specific input not found
                    errorElement.classList.add("is-invalid");
                    showToast(message, "danger");
                  }
                } else {
                  errorElement.classList.add("is-invalid");
                  showToast(message, "danger");
                }
              }
              return;
            }

            if (field.startsWith("variants[")) {
              const match = field.match(/variants\[(\d+)\]\.(.+)/);
              if (match) {
                const idx = parseInt(match[1]);
                const key = match[2];
                const visibleVariants = [
                  ...document.querySelectorAll(".variant-item"),
                ].filter(
                  (v) =>
                    v.style.display !== "none" && v.id !== "variantTemplate"
                );
                const variantEl = visibleVariants[idx];

                if (variantEl) {
                  if (key === "color_id")
                    input = variantEl.querySelector(".variant-color");
                  else if (key === "variant_slug")
                    input = variantEl.querySelector(".variant-slug");
                  else if (key === "quantity")
                    input = variantEl.querySelector(".variant-quantity");
                  else if (key === "price")
                    input = variantEl.querySelector(".variant-price");

                  if (input) {
                    input.classList.add("is-invalid");
                    const feedback = input
                      .closest(".form-group")
                      ?.querySelector(".invalid-feedback");
                    if (feedback) feedback.textContent = message;
                  }

                  if (key === "list_image") {
                    const imageGrid = variantEl.querySelector(
                      ".variant-image-grid"
                    );
                    const oldFeedback = imageGrid.nextElementSibling;
                    if (
                      oldFeedback &&
                      oldFeedback.classList.contains("invalid-feedback")
                    )
                      oldFeedback.remove();

                    imageGrid.classList.add("is-invalid");
                    const feedback = document.createElement("div");
                    feedback.className = "invalid-feedback d-block";
                    feedback.textContent = message;
                    imageGrid.parentNode.insertBefore(
                      feedback,
                      imageGrid.nextSibling
                    );
                  }
                }
              }
            } else {
              const fieldMap = {
                name: "productName",
                slug: "productSlug",
                description: "productDescription",
                category_id: "productCategory",
                status: "productStatus",
                main_image: "mainImageUpload",
                room_ids: "productRooms",
              };
              const id = fieldMap[field];
              if (id) {
                input = document.getElementById(id);
                if (input) {
                  if (field === "main_image") {
                    input.classList.add("is-invalid");

                    let existingFeedback = input.nextElementSibling;
                    if (
                      existingFeedback &&
                      existingFeedback.classList.contains("invalid-feedback")
                    ) {
                      existingFeedback.remove();
                    }
                    const feedbackDiv = document.createElement("div");
                    feedbackDiv.className = "invalid-feedback d-block";
                    feedbackDiv.textContent = message;
                    input.parentNode.insertBefore(
                      feedbackDiv,
                      input.nextSibling
                    );

                    input
                      .closest(".form-section")
                      ?.scrollIntoView({
                        behavior: "smooth"
                      });
                  } else {
                    input.classList.add("is-invalid");
                    const feedback = input
                      .closest(".form-group")
                      ?.querySelector(".invalid-feedback");
                    if (feedback) feedback.textContent = message;
                  }
                } else {
                  showToast(`Lỗi trường '${field}`, "danger");
                }
              } else {
                showToast(`Lỗi trường '${field}`, "danger");
              }
            }
          });

          const firstInvalid = document.querySelector(".is-invalid");
          if (firstInvalid) {
            firstInvalid.scrollIntoView({
              behavior: "smooth",
              block: "center",
            });
          }
        } else {
          showToast(
            data.error || "Lỗi không xác định khi tạo sản phẩm.",
            "danger"
          );
        }

        saveButton.textContent = originalButtonText;
        saveButton.disabled = false;
        return;
      }

      showToast("Tạo sản phẩm thành công");
      setTimeout(() => {
        window.location.href = "/dashboard/products";
      }, 1000);
    } catch (error) {
      showToast("Lỗi khi kết nối đến máy chủ: " + error.message, "danger");

      saveButton.textContent = originalButtonText;
      saveButton.disabled = false;
    }
  });
  document.addEventListener("input", function (e) {
    if (
      e.target.classList.contains("form-control") &&
      e.target.classList.contains("is-invalid")
    ) {
      e.target.classList.remove("is-invalid");
      const feedback = e.target
        .closest(".form-group")
        ?.querySelector(".invalid-feedback");
      if (feedback) feedback.textContent = "";
    }
  });

  document.addEventListener("change", function (e) {
    if (e.target.id === "mainImageFile") {
      const mainImageUploadZone = document.getElementById("mainImageUpload");
      mainImageUploadZone.classList.remove("is-invalid");

      const nextSibling = mainImageUploadZone.nextElementSibling;
      if (nextSibling && nextSibling.classList.contains("invalid-feedback")) {
        nextSibling.remove();
      }
    }

    if (e.target.matches('.variant-image-item input[type="file"]')) {
      const variantImageGrid = e.target.closest(".variant-image-grid");
      if (variantImageGrid) {
        const currentImages = variantImageGrid.querySelectorAll(
          ".variant-image-item.loaded img"
        ).length;
        if (currentImages > 0) {
          variantImageGrid.classList.remove("is-invalid");
          const feedback = variantImageGrid.querySelector(".invalid-feedback");
          if (feedback) feedback.remove();
        }
      }
    }

    if (
      e.target.classList.contains("form-control") &&
      e.target.classList.contains("is-invalid")
    ) {
      e.target.classList.remove("is-invalid");
      const feedback = e.target
        .closest(".form-group")
        ?.querySelector(".invalid-feedback");
      if (feedback) feedback.textContent = "";
    }
  });
</script>

<div id="toastContainer" class="position-fixed top-0 end-0 p-3" style="z-index: 1050"></div>