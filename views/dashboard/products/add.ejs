<div class="dashboard-header-row">
  <h2 class="dashboard-title">Thêm sản phẩm</h2>
</div>

<form id="addProductForm" novalidate>
  <div class="add-product-container">
    <div class="product-form-column">
      <div class="form-section">
        <h3 class="section-title">Thông tin sản phẩm</h3>
        <div class="form-row">
          <div class="form-group">
            <label for="productName">Tên sản phẩm</label>
            <input type="text" id="productName" class="form-control" placeholder="Nhập tên sản phẩm" />
            <div class="invalid-feedback"></div>
          </div>
          <div class="form-group">
            <label for="productSlug">Slug</label>
            <input type="text" id="productSlug" class="form-control" placeholder="Có thể tự tạo nếu bỏ trống" />
            <div class="invalid-feedback"></div>
          </div>
          <div class="form-group">
            <label for="productStatus">Trạng thái</label>
            <div class="select-wrapper">
              <select id="productStatus" class="form-control">
                <option value="">Chọn trạng thái</option>
                <option value="1">Hiển thị</option>
                <option value="0">Ẩn</option>
              </select>
              <i class="fas fa-chevron-down"></i>
            </div>
            <div class="invalid-feedback"></div>
          </div>
        </div>
        <div class="form-row">
          <div class="form-group">
            <label for="productCategory">Danh mục</label>
            <div class="select-wrapper">
              <select id="productCategory" class="form-control">
                <option value="">Chọn danh mục</option>
              </select>
              <i class="fas fa-chevron-down"></i>
            </div>
            <div class="invalid-feedback"></div>
          </div>
          <div class="form-group">
            <label for="productRooms">Danh mục phòng</label>
            <div class="select-wrapper">
              <select id="productRooms" class="form-control">
                <option value="">Chọn phòng</option>
              </select>
              <i class="fas fa-chevron-down"></i>
            </div>
            <div class="invalid-feedback"></div>
          </div>
        </div>
        <div class="form-row">
          <div class="form-group full-width">
            <label for="productDescription">Mô tả</label>
            <textarea id="productDescription" class="form-control" rows="5" placeholder="Nhập mô tả"></textarea>
            <div class="invalid-feedback"></div>
          </div>
        </div>
      </div>
      <div class="form-section">
        <h3 class="section-title">Thông tin bổ sung</h3>
        <div class="form-row">
          <div class="form-group">
            <label for="productDepth">Độ sâu (cm)</label>
            <input type="number" id="productDepth" class="form-control" placeholder="Nhập độ sâu" />
            <div class="invalid-feedback"></div>
          </div>
          <div class="form-group">
            <label for="productWidth">Chiều rộng (cm)</label>
            <input type="number" id="productWidth" class="form-control" placeholder="Nhập chiều rộng" />
            <div class="invalid-feedback"></div>
          </div>
        </div>
        <div class="form-row">
          <div class="form-group">
            <label for="productHeight">Chiều cao (cm)</label>
            <input type="number" id="productHeight" class="form-control" placeholder="Nhập chiều cao" />
            <div class="invalid-feedback"></div>
          </div>
          <div class="form-group">
            <label for="productMaxLoad">Tải trọng tối đa (kg)</label>
            <input type="number" id="productMaxLoad" class="form-control" placeholder="Nhập tải trọng" />
            <div class="invalid-feedback"></div>
          </div>
        </div>
        <div class="form-row">
          <div class="form-group">
            <label for="productSeatHeight">Chiều cao chỗ ngồi (cm)</label>
            <input type="number" id="productSeatHeight" class="form-control" placeholder="Nhập chiều cao chỗ ngồi" />
            <div class="invalid-feedback"></div>
          </div>
          <div class="form-group">
            <label for="productMaterial">Chất liệu</label>
            <input type="text" id="productMaterial" class="form-control" placeholder="Nhập chất liệu" />
            <div class="invalid-feedback"></div>
          </div>
        </div>
      </div>
    </div>
    <div class="right-column">
      <div class="form-section">
        <h3 class="section-title">Ảnh chính sản phẩm</h3>
        <div class="main-image-upload">
          <div class="upload-zone" id="mainImageUpload">
            <i class="fas fa-cloud-upload-alt"></i>
            <p>Kéo thả hoặc click để tải ảnh</p>
            <p class="upload-hint">Định dạng: JPG, PNG (Tối đa 5MB)</p>
            <input type="file" id="mainImageFile" accept="image/*" hidden />
          </div>
          <div class="main-image-preview" style="display: none">
            <img src="" alt="Preview" />
            <button class="remove-image"><i class="fas fa-times"></i></button>
          </div>
        </div>
      </div>
      <div class="form-section">
        <div class="variant-header">
          <h3 class="section-title">Biến thể sản phẩm</h3>
          <button type="button" class="btn btn-add-variant">
            <i class="fas fa-plus"></i> Thêm biến thể
          </button>
        </div>
        <div id="variantsList">
          <!-- Template biến thể -->
          <div class="variant-item" style="display: none" id="variantTemplate">
            <div class="variant-header">
              <h4 class="variant-title">Biến thể mới</h4>
              <div class="variant-actions">
                <button class="btn-toggle-variant">
                  <i class="fas fa-chevron-down"></i>
                </button>
                <button class="btn-remove-variant">
                  <i class="fas fa-trash"></i>
                </button>
              </div>
            </div>
            <div class="variant-content">
              <div class="form-row">
                <div class="form-group">
                  <label>Tên màu</label>
                  <div class="select-wrapper">
                    <select class="form-control variant-color">
                      <option value="">Chọn màu</option>
                    </select>
                    <i class="fas fa-chevron-down"></i>
                  </div>
                  <div class="invalid-feedback"></div>
                </div>
                <div class="form-group">
                  <label>Slug</label>
                  <input type="text" class="form-control variant-slug" placeholder="Tự động tạo nếu để trống" />
                  <div class="invalid-feedback"></div>
                </div>
              </div>
              <div class="form-row">
                <div class="form-group">
                  <label>Số lượng</label>
                  <input type="number" class="form-control variant-quantity" min="0" placeholder="Nhập số lượng" />
                  <div class="invalid-feedback"></div>
                </div>
                <div class="form-group">
                  <label>Giá gốc</label>
                  <input type="number" class="form-control variant-price" min="0" placeholder="Nhập giá gốc" />
                  <div class="invalid-feedback"></div>
                </div>
                <div class="form-group">
                  <label>Giá giảm</label>
                  <input type="number" class="form-control variant-sale-price" min="0" placeholder="Nhập giá giảm" />
                </div>
              </div>
              <div class="variant-images">
                <label>Hình ảnh biến thể</label>
                <div class="variant-image-grid">
                  <div class="variant-image-item active">
                    <div class="upload-placeholder">
                      <i class="fas fa-plus"></i>
                      <input type="file" accept="image/*" />
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <!-- end template -->
        </div>
      </div>
    </div>
  </div>
  <div class="form-actions">
    <button type="button" class="btn btn-cancel">Hủy</button>
    <button type="button" class="btn btn-save">Lưu</button>
  </div>
</form>


<script>
  const API_URL = "http://localhost:3501/api";
  async function uploadImage(file, folder = "", subfolder = "") {
    if (!file) return null;
    const formData = new FormData();
    formData.append("image", file);
    formData.append("folder", folder);
    if (subfolder) formData.append("subfolder", subfolder);

    const res = await fetch(`${API_URL}/upload/product`, {
      method: "POST",
      body: formData,
    });
    const data = await res.json();
    return data.url || null;
  }

  function generateSlug(str) {
    return str
      .toLowerCase()
      .normalize("NFD")
      .replace(/[\u0300-\u036f]/g, "") // Xoá dấu tiếng Việt
      .replace(/[đĐ]/g, "d")
      .replace(/[^a-z0-9]/g, "-") // Thay ký tự đặc biệt bằng dấu -
      .replace(/-+/g, "-") // Loại bỏ dấu - liên tiếp
      .replace(/^-+|-+$/g, ""); // Xoá - ở đầu và cuối
  }

  // Hàm gọi API và xử lý dữ liệu
  async function fetchAPI(endpoint) {
    try {
      const response = await fetch(`${API_URL}${endpoint}`);
      if (!response.ok) {
        throw new Error("Network response was not ok");
      }
      const data = await response.json();
      return data;
    } catch (error) {
      console.error("Error fetching from " + endpoint + ":", error);
      showToast("Lỗi khi tải dữ liệu: " + error.message, "danger");
      return null;
    }
  }

  // Hàm hiển thị thông báo
  function showToast(message, type = "success") {
    let toastContainer = document.getElementById("toastContainer");
    if (!toastContainer) {
      toastContainer = document.createElement("div");
      toastContainer.id = "toastContainer";
      toastContainer.className = "position-fixed top-0 end-0 p-3";
      toastContainer.style.zIndex = "1050";
      document.body.appendChild(toastContainer);
    }

    const toast = document.createElement("div");
    toast.className = `toast align-items-center text-white bg-${type} border-0`;
    toast.setAttribute("role", "alert");
    toast.setAttribute("aria-live", "assertive");
    toast.setAttribute("aria-atomic", "true");

    toast.innerHTML = `
  <div class="d-flex">
    <div class="toast-body" style="font-size: 24px;">${message}</div>
    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
  </div>
`;


    toastContainer.appendChild(toast);
    const bsToast = new bootstrap.Toast(toast, { delay: 3000 });
    bsToast.show();

    toast.addEventListener("hidden.bs.toast", () => toast.remove());
  }

  // Hàm load dữ liệu cho select box
  async function loadSelectData(
    selectId,
    endpoint,
    valueKey,
    textKey,
    placeholder = "Chọn..."
  ) {
    const select = document.getElementById(selectId);
    if (!select) return;

    try {
      const data = await fetchAPI(endpoint);
      if (!data || !Array.isArray(data)) {
        throw new Error("Dữ liệu không hợp lệ");
      }

      select.innerHTML =
        `<option value="">${placeholder}</option>` +
        data
          .map(
            (item) =>
              `<option value="${item[valueKey]}">${item[textKey]}</option>`
          )
          .join("");
    } catch (error) {
      console.error(`Error loading ${selectId}:`, error);
      select.innerHTML = `<option value="">Lỗi tải dữ liệu</option>`;
    }
  }

  // Hàm load dữ liệu cho variant colors
  async function loadVariantColors() {
    try {
      const colors = await fetchAPI("/color/filter");
      if (!colors || !Array.isArray(colors)) {
        throw new Error("Dữ liệu màu không hợp lệ");
      }

      const colorOptions = `
            <option value="">Chọn màu</option>
            ${colors
          .map(
            (color) => `
                <option value="${color.color_id}" data-hex="${color.color_hex}">
                    ${color.color_name}
                </option>
            `
          )
          .join("")}
        `;

      document.querySelectorAll(".variant-color").forEach((select) => {
        select.innerHTML = colorOptions;
      });

      // Thêm sự kiện cho variant mới
      document
        .querySelector(".btn-add-variant")
        .addEventListener("click", function () {
          setTimeout(() => {
            const newVariant = document.querySelector(
              ".variant-item:last-child .variant-color"
            );
            if (newVariant) {
              newVariant.innerHTML = colorOptions;
            }
          }, 100);
        });
    } catch (error) {
      console.error("Error loading colors:", error);
      showToast("Lỗi khi tải dữ liệu màu sắc", "danger");
    }
  }

  // Khởi tạo form
  async function initializeForm() {
    try {
      // Load categories
      await loadSelectData(
        "productCategory",
        "/categories",
        "category_id",
        "category_name",
        "Chọn danh mục"
      );

      // Load rooms
      await loadSelectData(
        "productRooms",
        "/rooms/filter",
        "room_id",
        "room_name",
        "Chọn phòng"
      );

      // Load colors cho variants
      await loadVariantColors();

      // Thêm sự kiện cho nút Cancel
      document
        .querySelector(".btn-cancel")
        .addEventListener("click", function () {
          window.location.href = "/dashboard/products";
        });
    } catch (error) {
      console.error("Error initializing form:", error);
      showToast("Lỗi khởi tạo form", "danger");
    }
  }

  // Khởi tạo khi trang load xong
  document.addEventListener("DOMContentLoaded", function () {
    initializeForm();
  });

  // Xử lý thêm biến thể mới
  document
    .querySelector(".btn-add-variant")
    .addEventListener("click", function () {
      const visibleVariants = [...document.querySelectorAll(".variant-item")].filter(v => v.style.display !== "none");
      const newIndex = visibleVariants.length;

      const newVariant = document.getElementById("variantTemplate").cloneNode(true);
      newVariant.id = `variant-${newIndex + 1}`;
      newVariant.style.display = "block";
      newVariant.querySelector(".variant-title").textContent = `Biến thể ${newIndex + 1}`;


      // Thêm sự kiện cho nút toggle và remove
      setupVariantEvents(newVariant);

      document.getElementById("variantsList").appendChild(newVariant);
    });

  // Hàm setup các sự kiện cho biến thể
  function setupVariantEvents(variantElement) {
    // Toggle nội dung biến thể
    variantElement
      .querySelector(".btn-toggle-variant")
      .addEventListener("click", function () {
        const content = variantElement.querySelector(".variant-content");
        const icon = this.querySelector("i");
        if (content.style.display === "none") {
          content.style.display = "block";
          icon.classList.replace("fa-chevron-down", "fa-chevron-up");
        } else {
          content.style.display = "none";
          icon.classList.replace("fa-chevron-up", "fa-chevron-down");
        }
      });

    // Xóa biến thể
    variantElement
      .querySelector(".btn-remove-variant")
      .addEventListener("click", function () {
        if (confirm("Bạn có chắc muốn xóa biến thể này?")) {
          variantElement.remove();
        }
      });

    // Tự động tạo slug khi chọn màu
    const colorSelect = variantElement.querySelector(".variant-color");
    const slugInput = variantElement.querySelector(".variant-slug");

    if (colorSelect && slugInput) {
      colorSelect.addEventListener("change", () => {
        const selectedOption = colorSelect.options[colorSelect.selectedIndex];
        const colorName = selectedOption?.textContent?.trim() || "";
        if (colorName && !slugInput.value) {
          slugInput.value = generateSlug(colorName);
        }
      });
    }

    // Xử lý upload ảnh biến thể
    setupVariantImageUpload(variantElement);
  }

  // Hàm xử lý upload ảnh cho variant
  function setupVariantImageUpload(variantElement) {
    const imageGrid = variantElement.querySelector(".variant-image-grid");
    const maxImages = 7; // Số lượng ảnh tối đa
    let currentImageCount = 0;

    function createImageBox() {
      const div = document.createElement("div");
      div.className = "variant-image-item active";
      div.innerHTML = `
            <div class="upload-placeholder">
                <i class="fas fa-plus"></i>
                <input type="file" hidden accept="image/*">
            </div>
        `;
      return div;
    }

    function setupImageBox(imageBox) {
      const input = imageBox.querySelector('input[type="file"]');
      const placeholder = imageBox.querySelector(".upload-placeholder");

      // Bấm box là chọn ảnh
      imageBox.addEventListener("click", () => input.click());

      // Khi chọn file ảnh
      input.addEventListener("change", function (e) {
        const file = e.target.files[0];
        if (file && file.type.startsWith("image/")) {
          const reader = new FileReader();
          reader.onload = function (e) {
            // Đánh dấu box đã có ảnh
            imageBox.classList.add("loaded");

            // Ẩn placeholder
            placeholder.style.display = "none";

            // Hiển thị ảnh preview
            const img = document.createElement("img");
            img.src = e.target.result;
            img.alt = "Preview";
            imageBox.appendChild(img);

            // Nút xóa ảnh
            const removeBtn = document.createElement("button");
            removeBtn.className = "remove-image";
            removeBtn.innerHTML = `<i class="fas fa-times"></i>`;
            imageBox.appendChild(removeBtn);

            // Xử lý xóa ảnh
            removeBtn.addEventListener("click", function (e) {
              e.stopPropagation();
              imageBox.remove();
              currentImageCount--;

              const lastBox = imageGrid.lastElementChild;
              if (!lastBox || lastBox.classList.contains("loaded")) {
                if (currentImageCount < maxImages) {
                  const newBox = createImageBox();
                  imageGrid.appendChild(newBox);
                  setupImageBox(newBox);
                  currentImageCount++;
                }
              }
            });

            // Nếu chưa đủ số ảnh, thêm box mới
            if (currentImageCount < maxImages) {
              const newBox = createImageBox();
              imageGrid.appendChild(newBox);
              setupImageBox(newBox);
              currentImageCount++;
            }
          };
          reader.readAsDataURL(file);
        }
      });
    }


    // Xóa tất cả box hiện tại
    imageGrid.innerHTML = "";

    // Thêm box đầu tiên
    const firstBox = createImageBox();
    imageGrid.appendChild(firstBox);
    setupImageBox(firstBox);
    currentImageCount++;
  }

  // Xử lý upload ảnh chính
  const mainImageUpload = document.getElementById("mainImageUpload");
  const mainImageInput = mainImageUpload.querySelector('input[type="file"]');
  const mainImagePreview = document.querySelector(".main-image-preview");

  mainImageUpload.addEventListener("click", () => mainImageInput.click());

  mainImageInput.addEventListener("change", function (e) {
    const file = e.target.files[0];
    if (file && file.type.startsWith("image/")) {
      const reader = new FileReader();
      reader.onload = function (e) {
        mainImagePreview.querySelector("img").src = e.target.result;
        mainImagePreview.style.display = "block";
        mainImageUpload.style.display = "none";
      };
      reader.readAsDataURL(file);
    }
  });

  // Xử lý xóa ảnh chính
  document
    .querySelector(".main-image-preview .remove-image")
    .addEventListener("click", function () {
      mainImagePreview.style.display = "none";
      mainImageUpload.style.display = "block";
      mainImageInput.value = "";
    });

  // Tự động tạo slug từ tên sản phẩm
  document.getElementById("productName").addEventListener("input", function () {
    const slug = this.value
      .toLowerCase()
      .normalize("NFD")
      .replace(/[\u0300-\u036f]/g, "")
      .replace(/[đĐ]/g, "d")
      .replace(/[^a-z0-9]/g, "-")
      .replace(/-+/g, "-")
      .replace(/^-+|-+$/g, "");
    document.getElementById("productSlug").value = slug;
  });
</script>
<script>
  /* Existing JavaScript code */

  // Add this before your existing event listener for .btn-save
  document.querySelector(".btn-save").addEventListener("click", async () => {
    const saveButton = document.querySelector(".btn-save");
    const originalButtonText = saveButton.textContent; // Lưu trữ text gốc của nút

    // 1. Thay đổi trạng thái nút ngay lập tức
    saveButton.textContent = "Đang lưu...";
    saveButton.disabled = true;

    const form = document.getElementById("addProductForm");

    // 2. Kiểm tra validation của form
    if (!form.checkValidity()) {
      form.classList.add("was-validated");
      saveButton.textContent = originalButtonText; // Khôi phục text
      saveButton.disabled = false; // Bật lại nút
      showToast("Vui lòng điền đầy đủ các thông tin bắt buộc.", "danger");
      // Cuộn đến lỗi đầu tiên nếu có
      const firstInvalid = document.querySelector(".is-invalid");
      if (firstInvalid) {
        firstInvalid.scrollIntoView({ behavior: "smooth", block: "center" });
      }
      return;
    }

    // 3. Lấy dữ liệu từ form
    const name = document.getElementById("productName").value.trim();
    const slug = document.getElementById("productSlug").value.trim();
    const description = document.getElementById("productDescription").value.trim();
    const category_id = document.getElementById("productCategory").value;
    const status = document.getElementById("productStatus").value;
    const materials = document.getElementById("productMaterial").value.trim();
    const height = document.getElementById("productHeight").value;
    const width = document.getElementById("productWidth").value;
    const depth = document.getElementById("productDepth").value;
    const seating_height = document.getElementById("productSeatHeight").value;
    const max_weight_load = document.getElementById("productMaxLoad").value;

    const room_ids = [...document.getElementById("productRooms").selectedOptions]
      .map((opt) => opt.value)
      .filter((val) => val);

    // 4. Tải lên ảnh chính
    const mainImageFile = mainImageInput.files[0];
    let main_image = null;
    try {
      main_image = await uploadImage(mainImageFile, "SonaSpace/Product", "main");
      if (!main_image && mainImageFile) { // Nếu có file nhưng không tải lên được URL
        throw new Error("Không thể lấy URL ảnh chính sau khi tải lên.");
      }
    } catch (uploadError) {
      showToast("Lỗi khi tải ảnh chính: " + uploadError.message, "danger");
      saveButton.textContent = originalButtonText;
      saveButton.disabled = false;
      return; // Dừng lại nếu lỗi tải ảnh chính
    }

    // 5. Lấy danh sách các biến thể đang hiển thị
    const variantElements = [...document.querySelectorAll(".variant-item")].filter(
      (item) => item.style.display !== "none"
    );

    if (variantElements.length === 0) {
      showToast("Sản phẩm phải có ít nhất 1 biến thể!", "danger");
      saveButton.textContent = originalButtonText;
      saveButton.disabled = false;
      const sectionTitle = [...document.querySelectorAll(".section-title")].find(el =>
        el.textContent.includes("Biến thể")
      );
      if (sectionTitle) {
        sectionTitle.scrollIntoView({ behavior: "smooth" });
      }
      return;
    }

    // 6. Xử lý các biến thể (tuần tự để giảm tải mạng/server)
    const variants = [];
    for (const item of variantElements) {
      const color_id = item.querySelector(".variant-color").value;
      const variant_slug = item.querySelector(".variant-slug").value.trim();
      const quantity = parseInt(item.querySelector(".variant-quantity").value);
      const price = parseFloat(item.querySelector(".variant-price").value);
      const price_sale =
        parseFloat(item.querySelector(".variant-sale-price").value) || null;

      const list_image_inputs = [
        ...item.querySelectorAll('.variant-image-item.loaded input[type="file"]'),
      ];
      const list_image_urls = [];

      for (const input of list_image_inputs) {
        const file = input.files[0];
        try {
          const url = await uploadImage(file, "SonaSpace/Product", "variant");
          if (url) {
            list_image_urls.push(url);
          } else if (file) {
            throw new Error("Không thể lấy URL ảnh biến thể sau khi tải lên.");
          }
        } catch (uploadError) {
          showToast("Lỗi khi tải ảnh biến thể: " + uploadError.message, "danger");
          saveButton.textContent = originalButtonText;
          saveButton.disabled = false;
          return;
        }
      }

      variants.push({
        color_id,
        variant_slug,
        quantity,
        price,
        price_sale,
        list_image: list_image_urls,
      });
    }

    // 7. Gửi dữ liệu sản phẩm lên API
    try {
      const res = await fetch(`${API_URL}/products/add`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          name,
          slug,
          description,
          category_id,
          status,
          materials,
          height,
          width,
          depth,
          seating_height,
          max_weight_load,
          main_image,
          room_ids,
          variants,
        }),
      });

      const data = await res.json();
      if (!res.ok) {
        // Xóa các lỗi cũ
        document.querySelectorAll(".is-invalid").forEach(el => el.classList.remove("is-invalid"));
        document.querySelectorAll(".invalid-feedback").forEach(el => el.textContent = "");

        if (data.errors && Array.isArray(data.errors)) {
          data.errors.forEach(({ field, message }) => {
            let input = null;

            // Lỗi liên quan đến biến thể
            if (field.startsWith("variants[")) {
              const match = field.match(/variants\[(\d+)\]\.(.+)/);
              if (match) {
                const idx = parseInt(match[1]);
                const key = match[2];
                const visibleVariants = [...document.querySelectorAll(".variant-item")].filter(v => v.style.display !== "none");
                const variantEl = visibleVariants[idx];

                if (variantEl) {
                  if (key === "color_id") input = variantEl.querySelector(".variant-color");
                  if (key === "variant_slug") input = variantEl.querySelector(".variant-slug");
                  if (key === "quantity") input = variantEl.querySelector(".variant-quantity");
                  if (key === "price") input = variantEl.querySelector(".variant-price");

                  if (input) {
                    input.classList.add("is-invalid");
                    const feedback = input.closest(".form-group")?.querySelector(".invalid-feedback");
                    if (feedback) feedback.textContent = message;
                  }

                  // Xử lý lỗi ảnh biến thể
                  if (key === "list_image") {
                    const imgSection = variantEl.querySelector(".variant-images");
                    const oldFeedback = imgSection.querySelector(".invalid-feedback");
                    if (oldFeedback) oldFeedback.remove();

                    const feedback = document.createElement("div");
                    feedback.className = "invalid-feedback d-block";
                    feedback.textContent = message;
                    imgSection.appendChild(feedback);
                  }
                }
              }
            } else {
              // Lỗi trường chung
              const fieldMap = {
                name: "productName",
                slug: "productSlug",
                description: "productDescription",
                category_id: "productCategory",
                status: "productStatus",
                materials: "productMaterial",
                height: "productHeight",
                width: "productWidth",
                depth: "productDepth",
                seating_height: "productSeatHeight",
                max_weight_load: "productMaxLoad",
                main_image: "mainImageFile",
                room_ids: "productRooms",
              };
              const id = fieldMap[field];
              if (id) {
                input = document.getElementById(id);
                if (input) {
                  input.classList.add("is-invalid");
                  const feedback = input.closest(".form-group")?.querySelector(".invalid-feedback");
                  if (feedback) feedback.textContent = message;
                }
              }
            }
          });


          const firstInvalid = document.querySelector(".is-invalid");
          if (firstInvalid) {
            firstInvalid.scrollIntoView({ behavior: "smooth", block: "center" });
          }
        } else {
          showToast(data.error || "Lỗi không xác định khi tạo sản phẩm.", "danger");
        }
        saveButton.textContent = originalButtonText;
        saveButton.disabled = false;
        return;
      }

      // 8. Thành công: hiển thị toast và chuyển hướng
      showToast("Tạo sản phẩm thành công");
      setTimeout(() => {
        window.location.href = "/dashboard/products";
      }, 1000);
    } catch (error) {
      console.error(error);
      showToast("Lỗi khi kết nối đến máy chủ: " + error.message, "danger");
      saveButton.textContent = originalButtonText;
      saveButton.disabled = false;
    }
  });
  document.addEventListener("input", function (e) {
    if (e.target.classList.contains("form-control") && e.target.classList.contains("is-invalid")) {
      e.target.classList.remove("is-invalid");
      const feedback = e.target.closest(".form-group")?.querySelector(".invalid-feedback");
      if (feedback) feedback.textContent = "";
    }
  });

  document.addEventListener("change", function (e) {
    if (e.target.classList.contains("form-control") && e.target.classList.contains("is-invalid")) {
      e.target.classList.remove("is-invalid");
      const feedback = e.target.closest(".form-group")?.querySelector(".invalid-feedback");
      if (feedback) feedback.textContent = "";
    }
  });


</script>