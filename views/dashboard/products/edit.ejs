<!-- Trang Sửa Sản phẩm -->

<!-- Tiêu đề -->
<div class="dashboard-header-row">
  <h2 class="dashboard-title">Sửa sản phẩm</h2>
</div>

<!-- Container chính - chia 2 cột -->
<div class="add-product-container">
  <!-- Cột trái: Form thông tin sản phẩm -->
  <div class="product-form-column">

    <!-- ===== Thông tin sản phẩm cơ bản ===== -->
    <div class="form-section">
      <h3 class="section-title">Thông tin sản phẩm</h3>
      <div class="form-row">
        <div class="form-group">
          <label for="productName">Tên sản phẩm</label>
          <input type="text" id="productName" class="form-control" placeholder="Nhập tên sản phẩm" />
          <div class="invalid-feedback"></div>
        </div>
        <div class="form-group">
          <label for="productSlug">Slug</label>
          <input type="text" id="productSlug" class="form-control" placeholder="Có thể tự tạo nếu bỏ trống" />
        </div>
        <div class="form-group">
          <label for="productStatus">Trạng thái</label>
          <div class="select-wrapper">
            <select id="productStatus" class="form-control">
              <option value="">Chọn trạng thái</option>
              <option value="1">Hiển thị</option>
              <option value="0">Ẩn</option>
            </select>
            <i class="fas fa-chevron-down"></i>
          </div>
          <div class="invalid-feedback"></div>
        </div>
      </div>

      <div class="form-row">
        <div class="form-group">
          <label for="productCategory">Danh mục</label>
          <div class="select-wrapper">
            <select id="productCategory" class="form-control"></select>
            <i class="fas fa-chevron-down"></i>
          </div>
          <div class="invalid-feedback"></div>
        </div>
        <div class="form-group">
          <label for="productRooms">Danh mục phòng</label>
          <div class="select-wrapper">
            <select id="productRooms" class="form-control"></select>
            <i class="fas fa-chevron-down"></i>
          </div>
          <div class="invalid-feedback"></div>
        </div>
      </div>

      <div class="form-row">
        <div class="form-group full-width">
          <label for="productDescription">Mô tả</label>
          <textarea id="productDescription" class="form-control" rows="5" placeholder="Nhập mô tả"></textarea>
          <div class="invalid-feedback"></div>
        </div>

      </div>
    </div>

    <!-- ===== Thông tin bổ sung ===== -->
    <div class="form-section">
      <h3 class="section-title">Thông tin bổ sung</h3>
      <div class="form-row">
        <div class="form-group">
          <label for="productDepth">Độ sâu (cm)</label>
          <input type="number" id="productDepth" class="form-control" placeholder="Nhập độ sâu" />
          <div class="invalid-feedback"></div>
        </div>
        <div class="form-group">
          <label for="productWidth">Chiều rộng (cm)</label>
          <input type="number" id="productWidth" class="form-control" placeholder="Nhập chiều rộng" />
          <div class="invalid-feedback"></div>
        </div>
      </div>
      <div class="form-row">
        <div class="form-group">
          <label for="productHeight">Chiều cao (cm)</label>
          <input type="number" id="productHeight" class="form-control" placeholder="Nhập chiều cao" />
          <div class="invalid-feedback"></div>
        </div>
        <div class="form-group">
          <label for="productMaxLoad">Tải trọng tối đa (kg)</label>
          <input type="number" id="productMaxLoad" class="form-control" placeholder="Nhập tải trọng" />
          <div class="invalid-feedback"></div>
        </div>
      </div>
      <div class="form-row">
        <div class="form-group">
          <label for="productSeatHeight">Chiều cao chỗ ngồi (cm)</label>
          <input type="number" id="productSeatHeight" class="form-control" placeholder="Nhập chiều cao chỗ ngồi" />
          <div class="invalid-feedback"></div>
        </div>
        <div class="form-group">
          <label for="productMaterial">Chất liệu</label>
          <input type="text" id="productMaterial" class="form-control" placeholder="Nhập chất liệu" />
          <div class="invalid-feedback"></div>
        </div>
      </div>
    </div>
  </div>

  <!-- Cột phải: Ảnh và biến thể -->
  <div class="right-column">
    <!-- ===== Ảnh chính ===== -->
    <div class="form-section">
      <h3 class="section-title">Ảnh chính sản phẩm</h3>
      <div class="main-image-upload" id="mainImageUpload" style="display: none;">
        <div class="upload-zone">
          <i class="fas fa-cloud-upload-alt"></i>
          <p>Kéo thả hoặc click để tải ảnh</p>
          <p class="upload-hint">Định dạng: JPG, PNG (Tối đa 5MB)</p>
          <input type="file" hidden accept="image/*" />
        </div>
      </div>
      <div class="main-image-preview" style="display: none">
        <img src="" alt="Preview" />
        <button class="remove-image"><i class="fas fa-times"></i></button>
      </div>
    </div>

    <!-- ===== Biến thể ===== -->
    <div class="form-section">
      <div class="variant-header">
        <h3 class="section-title">Biến thể sản phẩm</h3>
        <button type="button" class="btn btn-add-variant">
          <i class="fas fa-plus"></i> Thêm biến thể
        </button>
      </div>
      <div id="variantsList">
        <!-- Template Biến thể -->
        <div class="variant-item" style="display: none" id="variantTemplate">
          <div class="variant-header">
            <h4 class="variant-title">Biến thể mới</h4>
            <div class="variant-actions">
              <button class="btn-toggle-variant"><i class="fas fa-chevron-down"></i></button>
              <button class="btn-remove-variant"><i class="fas fa-trash"></i></button>
            </div>
          </div>

          <div class="variant-content">
            <div class="form-row">
              <div class="form-group">
                <label>Tên màu</label>
                <div class="select-wrapper">
                  <select class="form-control variant-color">
                    <option value="">Chọn màu</option>
                  </select>
                  <i class="fas fa-chevron-down"></i>
                </div>
                <div class="invalid-feedback"></div>
              </div>
              <div class="form-group">
                <label>Slug</label>
                <input type="text" class="form-control variant-slug" placeholder="Tự động tạo nếu để trống" />
                <div class="invalid-feedback"></div>
              </div>

            </div>


            <div class="form-row">
              <div class="form-group">
                <label>Số lượng</label>
                <input type="number" class="form-control variant-quantity" min="0" placeholder="Nhập số lượng" />
                <div class="invalid-feedback"></div>
              </div>
              <div class="form-group">
                <label>Giá gốc</label>
                <input type="number" class="form-control variant-price" min="0" placeholder="Nhập giá gốc" />
                <div class="invalid-feedback"></div>
              </div>
              <div class="form-group">
                <label>Giá giảm</label>
                <input type="number" class="form-control variant-sale-price" min="0" placeholder="Nhập giá giảm" />
                <div class="invalid-feedback"></div>
              </div>
            </div>

            <div class="variant-images">
              <label>Hình ảnh biến thể</label>
              <div class="variant-image-grid"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<div class="form-actions">
  <button type="button" class="btn btn-cancel">Hủy</button>
  <button type="button" class="btn btn-save">Lưu</button>
</div>

<script>
  function showFieldError(input, message) {
    if (!input) return;
    input.classList.add("is-invalid");

    let feedback = input.parentElement.querySelector(".invalid-feedback");
    if (!feedback) {
      feedback = document.createElement("div");
      feedback.className = "invalid-feedback";
      input.parentElement.appendChild(feedback);
    }
    feedback.textContent = message;
  }


  function clearFieldError(input) {
    if (!input) return;
    input.classList.remove("is-invalid");
    input.parentElement.querySelector(".invalid-feedback")?.remove();
  }

  const API_URL = "http://localhost:3501";
  const slug = window.location.pathname.split("/").pop();
  let globalColors = [];

  const productNameInput = document.getElementById("productName");
  const productSlugInput = document.getElementById("productSlug");
  const productStatusSelect = document.getElementById("productStatus");
  const productCategorySelect = document.getElementById("productCategory");
  const productRoomsSelect = document.getElementById("productRooms");
  const productDescriptionTextarea = document.getElementById("productDescription");
  const productDepthInput = document.getElementById("productDepth");
  const productWidthInput = document.getElementById("productWidth");
  const productHeightInput = document.getElementById("productHeight");
  const productMaxLoadInput = document.getElementById("productMaxLoad");
  const productSeatHeightInput = document.getElementById("productSeatHeight");
  const productMaterialInput = document.getElementById("productMaterial");

  const mainImagePreview = document.querySelector(".main-image-preview img");
  const mainImageContainer = document.querySelector(".main-image-preview");
  const mainImageUpload = document.getElementById("mainImageUpload");
  const mainImageUploadInput = mainImageUpload.querySelector('input[type="file"]');

  const variantTemplate = document.getElementById("variantTemplate");
  const variantsList = document.getElementById("variantsList");
  let removedImages = [];

  function extractPublicIdFromUrl(url) {
    const matches = url.match(/upload\/(?:v\d+\/)?([^\.]+)\.(jpg|jpeg|png|webp|gif)/);
    if (!matches || !matches[1]) return null;
    return matches[1];
  }



  // Xử lý xóa ảnh chính
  mainImageContainer.querySelector(".remove-image")?.addEventListener("click", () => {
    const publicId = extractPublicIdFromUrl(mainImagePreview.src);
    if (publicId) {
      removedImages.push(publicId);
      console.log("[REMOVE IMAGE] Đã đánh dấu xóa ảnh chính:", publicId);
    }
    mainImagePreview.src = "";
    mainImageContainer.style.display = "none";
    // Hiện lại box upload ảnh chính
    mainImageUpload.style.display = "block";
    mainImageUploadInput.value = "";
  });

  // Xử lý upload ảnh chính mới
  mainImageUpload.addEventListener("click", () => mainImageUploadInput.click());
  mainImageUploadInput.addEventListener("change", function (e) {
    const file = e.target.files[0];
    if (file && file.type.startsWith("image/")) {
      const reader = new FileReader();
      reader.onload = function (e) {
        mainImagePreview.src = e.target.result;
        mainImageContainer.style.display = "block";
        mainImageUpload.style.display = "none";
      };
      reader.readAsDataURL(file);
    }
  });

  // ==== Load sản phẩm ====
  async function loadProductDetail() {
    try {
      const res = await fetch(`${API_URL}/api/products/admin/${slug}`);
      const data = await res.json();
      const product = data.product;

      // === Thông tin sản phẩm ===
      productNameInput.value = product.name || "";
      productSlugInput.value = product.slug || "";
      productStatusSelect.value = product.status ?? "";
      productCategorySelect.value = product.category_id ?? "";
      productDescriptionTextarea.value = product.description || "";
      productDepthInput.value = product.depth ?? "";
      productWidthInput.value = product.width ?? "";
      productHeightInput.value = product.height ?? "";
      productMaxLoadInput.value = product.max_weight_load ?? "";
      productSeatHeightInput.value = product.seating_height ?? "";
      productMaterialInput.value = product.materials || "";

      // === Ảnh chính (lấy từ product.product_image) ===
      if (product.main_image) {
        mainImagePreview.src = product.main_image;
        mainImageContainer.style.display = "block";
        mainImageUpload.style.display = "none";
      } else {
        mainImagePreview.src = "";
        mainImageContainer.style.display = "none";
        mainImageUpload.style.display = "block";
      }

      // Load danh sách select boxes (phải gọi ở đây vì cần category_id và room_ids)
      await loadProductSelectBoxes(slug, product.category_id, data.rooms?.map(r => r.room_id), null);

      // === Danh sách biến thể ===
      // Xóa hết biến thể cũ trước khi render lại
      variantsList.innerHTML = "";

      product.variants.forEach((variant, idx) => {
        const clone = variantTemplate.cloneNode(true);
        clone.style.display = "block";
        clone.removeAttribute("id");
        clone.setAttribute("data-id", variant.variant_id);
        clone.classList.add("variant-item");

        // Tiêu đề
        clone.querySelector(".variant-title").textContent = variant.color_name || `Biến thể ${idx + 1}`;

        // Render lại danh sách màu cho select box này
        const colorSelect = clone.querySelector(".variant-color");
        colorSelect.innerHTML = globalColors.map(
          (color) =>
            `<option value="${color.color_id}" ${color.color_id == variant.color_id ? "selected" : ""}>${color.color_name}</option>`
        ).join("");

        // Gán dữ liệu khác
        colorSelect.value = variant.color_id;
        clone.querySelector(".variant-slug").value = variant.slug || "";
        clone.querySelector(".variant-quantity").value = variant.quantity ?? 0;
        clone.querySelector(".variant-price").value = variant.price ?? 0;
        clone.querySelector(".variant-sale-price").value = variant.price_sale ?? 0;

        // Lưu lại dữ liệu variant vào node để submit
        clone.variantData = {
          color_id: variant.color_id,
          variant_slug: variant.slug || "",
          quantity: variant.quantity,
          price: variant.price ?? 0,
          price_sale: variant.price_sale ?? 0,
          // http...,http...,http...
          list_image: typeof variant.list_image === "string"
            ? variant.list_image.split(",")
            : (Array.isArray(variant.list_image) ? variant.list_image : []),
        };

        variantsList.appendChild(clone);
        setupVariantEvents(clone);
      });

      // Nếu muốn render lại dropdown màu cho các select còn lại (ví dụ khi thêm mới biến thể)
      document.querySelectorAll(".variant-color").forEach((select) => {
        if (!select.value) { // chỉ render nếu chưa có giá trị
          select.innerHTML = globalColors.map(
            (color) =>
              `<option value="${color.color_id}">${color.color_name}</option>`
          ).join("");
        }
      });
    } catch (err) {
      console.error("Lỗi load sản phẩm:", err);
      alert("Không thể tải sản phẩm");
    }
    // setupAllVariantEvents();
  }

  async function loadProductSelectBoxes(slug, selectedCategoryId, selectedRoomIds, selectedColorId) {
    try {
      // Gọi đồng thời 3 API
      const [categoryRes, roomsRes, colorsRes] = await Promise.all([
        fetch(`${API_URL}/api/categories`),
        fetch(`${API_URL}/api/rooms`),
        fetch(`${API_URL}/api/color/filter`),
      ]);

      const [categories, rooms, colors] = await Promise.all([
        categoryRes.json(),
        roomsRes.json(),
        colorsRes.json(),
      ]);

      globalColors = colors; // Lưu lại danh sách màu cho các nơi khác dùng

      // ===== Category select =====
      productCategorySelect.innerHTML = categories.map(c =>
        `<option value="${c.category_id}" ${c.category_id == selectedCategoryId ? "selected" : ""}>${c.category_name}</option>`
      ).join("");

      // ===== Rooms select =====
      // productRoomsSelect.innerHTML = rooms.map(r =>
      //   `<option value="${r.room_id}" ${r.room_id == selectedRoomIds ? "selected" : ""}>${r.room_name}</option>`
      // ).join("");
      productRoomsSelect.innerHTML = rooms.map(r =>
        `<option value="${r.room_id}" ${selectedRoomIds?.includes(r.room_id) ? "selected" : ""}>${r.room_name}</option>`
      ).join("");

      // Không cần render dropdown màu ở đây nữa, sẽ render ở loadProductDetail cho từng biến thể
    } catch (error) {
      console.error("Lỗi khi tải select boxes:", error);
      showToast("Lỗi khi tải thông tin danh mục / phòng / màu sắc", "danger");
    }
  }

  // Thêm hàm tạo box upload dấu cộng cho variant
  function createUploadBox(imageGrid, variantId = null) {
    const uploadBox = document.createElement("div");
    uploadBox.className = "variant-image-item active variant-upload-box";
    uploadBox.innerHTML = `
    <div class="upload-placeholder">
      <i class="fas fa-plus"></i>
      <input type="file" hidden accept="image/*" />
    </div>
  `;

    const input = uploadBox.querySelector('input[type="file"]');
    const maxImages = 7;

    uploadBox.addEventListener("click", () => input.click());

    input.addEventListener("change", function (e) {
      const file = e.target.files[0];
      if (file && file.type.startsWith("image/")) {
        const reader = new FileReader();
        reader.onload = function (event) {
          console.log("Ảnh biến thể src:", event.target.result);
          addLoadedImageBox(event.target.result, imageGrid, uploadBox, file);
        };
        reader.readAsDataURL(file);
      }
    });

    return uploadBox;
  }


  // Hàm thêm box ảnh đã upload thành công vào grid
  function addLoadedImageBox(imgUrl, imageGrid, uploadBox, file) {
    const loadedBox = document.createElement("div");
    loadedBox.className = "variant-image-item loaded";
    loadedBox.dataset.local = "true"; // đánh dấu là ảnh mới
    loadedBox.dataset.filename = file?.name || "";

    loadedBox.innerHTML = `
    <img src="${imgUrl}" alt="Preview" style="width:80px;margin:5px;">
    <button class="remove-image"><i class="fas fa-times"></i></button>
    <input type="file" hidden />
  `;

    // Lưu lại file để upload về sau
    const hiddenInput = loadedBox.querySelector('input[type="file"]');
    if (file) {
      const dataTransfer = new DataTransfer();
      dataTransfer.items.add(file);
      hiddenInput.files = dataTransfer.files;
    }

    loadedBox.querySelector(".remove-image").addEventListener("click", function (ev) {
      ev.stopPropagation();
      loadedBox.remove();
      if (!imageGrid.querySelector('.variant-upload-box')) {
        imageGrid.appendChild(createUploadBox(imageGrid));
      }
    });

    imageGrid.insertBefore(loadedBox, uploadBox);
    uploadBox.querySelector('input[type="file"]').value = "";

    if (imageGrid.querySelectorAll('.variant-image-item.loaded').length >= 7) {
      uploadBox.style.display = "none";
    }
  }


  // Sửa lại setupVariantImageUpload để truyền variantId cho createUploadBox
  function setupVariantImageUpload(variantElement) {
    const imageGrid = variantElement.querySelector(".variant-image-grid");
    if (!imageGrid) return;

    imageGrid.innerHTML = "";

    const maxImages = 7;
    const existingImages = variantElement.variantData?.list_image || [];
    const variantId = variantElement.getAttribute("data-id") || null;

    // Render ảnh đã có nếu tồn tại
    existingImages.forEach((imgUrl) => {
      const imgBox = document.createElement("div");
      imgBox.className = "variant-image-item loaded";
      imgBox.innerHTML = `
      <img src="${imgUrl}" alt="Preview" style="width:80px;margin:5px;">
      <button class="remove-image"><i class="fas fa-times"></i></button>
    `;
      imgBox.querySelector(".remove-image").addEventListener("click", function (ev) {
        ev.stopPropagation();
        const publicId = extractPublicIdFromUrl(imgUrl);
        if (publicId) {
          removedImages.push(publicId);
          console.log("[REMOVE IMAGE] Đã đánh dấu xóa ảnh biến thể:", publicId);
        }
        imgBox.remove();
        if (!imageGrid.querySelector('.variant-upload-box') && imageGrid.querySelectorAll('.variant-image-item.loaded').length < maxImages) {
          imageGrid.appendChild(createUploadBox(imageGrid, variantId));
        }
      });
      imageGrid.appendChild(imgBox);
    });

    // Nếu chưa đủ số lượng ảnh, thêm ô upload
    if (existingImages.length < maxImages) {
      imageGrid.appendChild(createUploadBox(imageGrid, variantId));
    }
  }

  // ==== Gọi khi tải trang ====
  window.addEventListener("DOMContentLoaded", () => {
    loadProductDetail();

    // Clear lỗi khi người dùng nhập lại
    const allInputs = [
      productNameInput,
      productSlugInput,
      productCategorySelect,
      productStatusSelect,
      productDescriptionTextarea,
      productMaterialInput,
      productDepthInput,
      productWidthInput,
      productHeightInput,
      productSeatHeightInput,
      productMaxLoadInput
    ];


    allInputs.forEach(input => {
      if (!input) return;
      input.addEventListener("input", () => clearFieldError(input));
      input.addEventListener("change", () => clearFieldError(input));
    });
  });


  async function deleteVariant(variantId) {
    try {
      const res = await fetch(`${API_URL}/api/variants/${variantId}`, {
        method: "DELETE",
      });
      const result = await res.json();
      if (!res.ok) {
        showToast(`Xoá biến thể ${variantId} thất bại: ` + (result.error || ""), "danger");
        console.error("Lỗi xoá biến thể:", result);
        return;
      }
      console.log("✅ Xoá biến thể thành công:", variantId);
    } catch (err) {
      console.error("❌ Lỗi khi gọi deleteVariant:", err);
      showToast("Lỗi kết nối khi xoá biến thể", "danger");
    }
  }


  // ==== Xử lý sự kiện nút lưu (chỉ cập nhật thông tin chung sản phẩm) ====
  document.querySelector(".btn-save").addEventListener("click", async () => {
    try {
      // ===== LẤY DỮ LIỆU FORM =====
      const name = productNameInput.value.trim();
      const slugValue = productSlugInput.value.trim() || name.toLowerCase().replace(/\s+/g, "-");
      const status = parseInt(productStatusSelect.value);
      const category_id = parseInt(productCategorySelect.value);
      const room_ids = Array.from(productRoomsSelect.selectedOptions).map(opt => parseInt(opt.value));
      const description = productDescriptionTextarea.value.trim();
      const depth = parseFloat(productDepthInput.value) || null;
      const width = parseFloat(productWidthInput.value) || null;
      const height = parseFloat(productHeightInput.value) || null;
      const max_weight_load = parseFloat(productMaxLoadInput.value) || null;
      const seating_height = parseFloat(productSeatHeightInput.value) || null;
      const materials = productMaterialInput.value.trim();

      // Ảnh chính
      let mainImageUrl = mainImagePreview?.src || null;
      if (mainImageUrl && mainImageUrl.startsWith("data:image/")) {
        try {
          const formData = new FormData();
          const res = await fetch(mainImageUrl);
          const blob = await res.blob();
          formData.append("image", blob, "main-image.png");
          formData.append("folder", "SonaSpace/Product");
          formData.append("subfolder", "main");
          const uploadRes = await fetch(`${API_URL}/api/upload/product`, {
            method: "POST",
            body: formData,
          });
          const uploadData = await uploadRes.json();
          mainImageUrl = uploadData.url || mainImageUrl;
        } catch (err) {
          showToast("Lỗi upload ảnh chính", "danger");
        }
      }

      // XÓA CÁC ẢNH ĐÃ ẤN DẤU ❌
      if (removedImages.length > 0) {
        for (const publicId of removedImages) {
          try {
            const res = await fetch(`${API_URL}/api/upload/${publicId}`, {
              method: "DELETE",
            });
            const result = await res.json();
            if (!res.ok) {
              console.warn("❌ Lỗi xoá ảnh:", result);
            } else {
              console.log("🗑️ Đã xoá ảnh:", publicId);
            }
            console.log("[REMOVE IMAGE] Đã gửi yêu cầu xóa ảnh trên server:", publicId);
          } catch (err) {
            console.error("❌ Lỗi kết nối khi xoá ảnh:", err);
          }
        }

        // Xóa mảng sau khi xử lý xong
        removedImages = [];
      }

      // Chỉ gửi thông tin chung sản phẩm
      const payload = {
        name: productNameInput.value.trim(),
        slug: productSlugInput.value.trim() || productNameInput.value.trim().toLowerCase().replace(/\s+/g, "-"),
        description: productDescriptionTextarea.value.trim(),
        category_id: parseInt(productCategorySelect.value),
        status: parseInt(productStatusSelect.value),
        materials: productMaterialInput.value.trim(),
        height: parseFloat(productHeightInput.value) || null,
        width: parseFloat(productWidthInput.value) || null,
        depth: parseFloat(productDepthInput.value) || null,
        seating_height: parseFloat(productSeatHeightInput.value) || null,
        max_weight_load: parseFloat(productMaxLoadInput.value) || null,
        main_image: mainImageUrl,
        room_ids: Array.from(productRoomsSelect.selectedOptions).map(opt => parseInt(opt.value)),
      };
      console.log("[PRODUCT PAYLOAD]", payload);

      // Cập nhật sản phẩm trước
      const res = await fetch(`${API_URL}/api/products/admin/${slug}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload)
      });
      const result = await res.json();
      if (!res.ok) {
        if (result.errors && Array.isArray(result.errors)) {
          result.errors.forEach((err) => {
            const field = err.field;
            const message = err.message;

            // ===== Lỗi của sản phẩm chung =====
            if (field === "name") {
              showFieldError(productNameInput, message);
            } else if (field === "slug") {
              showFieldError(productSlugInput, message);
            } else if (field === "category_id") {
              showFieldError(productCategorySelect, message);
            } else if (field === "status") {
              showFieldError(productStatusSelect, message);
            } else if (field === "description") {
              showFieldError(productDescriptionTextarea, message);
            } else if (field === "height") {
              showFieldError(productHeightInput, message);
            } else if (field === "width") {
              showFieldError(productWidthInput, message);
            } else if (field === "depth") {
              showFieldError(productDepthInput, message);
            } else if (field === "seating_height") {
              showFieldError(productSeatHeightInput, message);
            } else if (field === "max_weight_load") {
              showFieldError(productMaxLoadInput, message);
            } else if (field === "materials") {
              showFieldError(productMaterialInput, message);
            }


            // ===== Lỗi của biến thể =====
            else if (field.startsWith("variants[")) {
              const match = field.match(/variants\[(\d+)\]\.(.+)/);

              if (match) {
                const index = parseInt(match[1], 10);
                const fieldName = match[2];

                const variantEl = document.querySelectorAll("#variantsList .variant-item")[index];
                if (variantEl) {
                  let input;
                  if (fieldName === "slug") {
                    input = variantEl.querySelector(".variant-slug");
                  } else if (fieldName === "quantity") {
                    input = variantEl.querySelector(".variant-quantity");
                    console.log("[VALIDATE] Tìm thấy input quantity:", input);
                  } else if (fieldName === "price") {
                    input = variantEl.querySelector(".variant-price");
                  } else if (fieldName === "price_sale") {
                    input = variantEl.querySelector(".variant-sale-price");
                  } else if (fieldName === "color_id") {
                    input = variantEl.querySelector(".variant-color");
                  } else if (fieldName === "list_image") {
                    // Nếu muốn hiện lỗi ảnh, có thể thêm alert/tooltip gần khung ảnh
                    const imageGrid = variantEl.querySelector(".variant-image-grid");
                    if (imageGrid) {
                      const existingError = imageGrid.querySelector(".invalid-feedback");
                      if (!existingError) {
                        const errorBox = document.createElement("div");
                        errorBox.className = "invalid-feedback";
                        errorBox.style.display = "block";
                        errorBox.style.fontSize = "13px";
                        errorBox.style.color = "#dc3545";
                        errorBox.textContent = message;
                        imageGrid.appendChild(errorBox);
                      }
                    }
                    return;
                  }

                  if (input) {
                    showFieldError(input, message);
                  }

                }
              }
            }
          });
        }

        showToast("Lỗi khi cập nhật sản phẩm", "danger");
        return;
      }

      showToast("Cập nhật sản phẩm thành công!", "success");


      // === Cập nhật hoặc xóa các biến thể đã có (KHÔNG tạo mới ở đây) ===
      const productId = result.product?.id || result.product?.product_id || result.product_id;
      const variantElements = document.querySelectorAll("#variantsList .variant-item");
      // XÓA: console.log("== VARIANT ELEMENTS =="";
      // XÓA: variantElements.forEach(el => { console.log("data-id:", el.getAttribute("data-id")); });

      // Xử lý xóa các biến thể đã bị remove khỏi DOM
      const currentIds = Array.from(variantElements)
        .map(el => el.getAttribute("data-id"))
        .filter(Boolean);
      const loadedIds = Array.from(document.querySelectorAll("#variantsList .variant-item[data-id]"))
        .map(el => el.getAttribute("data-id"));
      const deletedIds = loadedIds.filter(id => !currentIds.includes(id));
      for (const delId of deletedIds) {
        if (delId) {
          await deleteVariant(delId);
        }
      }


      for (const variantEl of variantElements) {
        let variantId = variantEl.getAttribute("data-id");
        const color_id = parseInt(variantEl.querySelector(".variant-color")?.value || 0);
        const slug = variantEl.querySelector(".variant-slug")?.value.trim();
        const quantity = parseInt(variantEl.querySelector(".variant-quantity")?.value || 0);
        const price = parseFloat(variantEl.querySelector(".variant-price")?.value || 0);
        const price_sale = parseFloat(variantEl.querySelector(".variant-sale-price")?.value || 0);

        let finalVariantId = variantId;
        let list_image = [];

        const loadedImageBoxes = Array.from(
          variantEl.querySelectorAll(".variant-image-item.loaded")
        );

        // Nếu là biến thể mới, tạo trước khi upload ảnh
        if (!finalVariantId) {
          const created = await addVariant(productId, {
            color_id,
            slug,
            quantity,
            price,
            price_sale,
            list_image: "", // Tạo tạm, ảnh sẽ thêm sau
          });

          if (!created || !created.variant_id) {
            showToast("Không thể tạo biến thể mới", "danger");
            continue;
          }

          finalVariantId = created.variant_id;
          variantEl.setAttribute("data-id", finalVariantId);
        }

        // Upload ảnh nếu là ảnh base64
        for (const box of loadedImageBoxes) {
          const img = box.querySelector("img");
          const input = box.querySelector('input[type="file"]');
          if (!img) continue;

          const src = img.src;

          if (src.startsWith("http")) {
            list_image.push(src); // Ảnh cũ giữ nguyên
          } else if (src.startsWith("data:image/") && input?.files?.[0]) {
            const uploadedUrl = await uploadVariantImageToServer(finalVariantId, input.files[0]);
            if (uploadedUrl) {
              list_image.push(uploadedUrl);
              img.src = uploadedUrl;
              input.value = "";
            }
          }
        }

        // Cập nhật lại list_image trong DOM và variantData
        variantEl.variantData = {
          color_id,
          slug,
          quantity,
          price,
          price_sale,
          list_image,
        };

        setupVariantImageUpload(variantEl); // Cập nhật lại box ảnh

        // Gửi request cập nhật biến thể với ảnh đã upload
        await updateVariant(finalVariantId, {
          color_id,
          slug,
          quantity,
          price,
          price_sale,
          list_image: list_image.join(","), // backend yêu cầu dạng chuỗi
        });
      }
      showToast("Cập nhật biến thể thành công!", "success");
    } catch (err) {
      console.error("Lỗi khi lưu sản phẩm:", err);
      showToast("Lỗi khi lưu sản phẩm", "danger");
    }
  });
  window.addEventListener("DOMContentLoaded", () => {
    [productNameInput, productSlugInput, productCategorySelect, productStatusSelect, productDescriptionTextarea].forEach(input => {
      input.addEventListener("input", () => clearFieldError(input));
    });
  });

  async function updateVariant(variantId, data) {
    try {
      const res = await fetch(`${API_URL}/api/variants/${variantId}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(data),
      });

      const result = await res.json();
      if (!res.ok) {
        console.error("❌ Lỗi cập nhật variant:", result);
        showToast("Cập nhật biến thể thất bại", "danger");
        return null;
      }

      console.log("✅ Cập nhật variant thành công:", result);
      return result;
    } catch (err) {
      console.error("❌ Lỗi kết nối khi gọi updateVariant:", err);
      showToast("Lỗi kết nối khi cập nhật biến thể", "danger");
      return null;
    }
  }
  async function addVariant(productId, data) {
    try {
      const res = await fetch(`${API_URL}/api/variants/${productId}`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(data),
      });

      const result = await res.json();
      if (!res.ok) {
        console.error("❌ Lỗi tạo biến thể:", result);
        showToast("Tạo biến thể thất bại", "danger");
        return null;
      }

      console.log("✅ Tạo biến thể thành công:", result);
      return result;
    } catch (err) {
      console.error("❌ Lỗi kết nối khi gọi addVariant:", err);
      showToast("Lỗi kết nối khi tạo biến thể", "danger");
      return null;
    }
  }
  document.querySelector(".btn-add-variant").addEventListener("click", async function () {
    const newVariant = variantTemplate.cloneNode(true);
    newVariant.style.display = "block";
    newVariant.removeAttribute("id");
    newVariant.classList.add("variant-item");

    // Render dropdown màu
    const colorSelect = newVariant.querySelector(".variant-color");
    colorSelect.innerHTML = globalColors.map(
      (color) => `<option value="${color.color_id}">${color.color_name}</option>`
    ).join("");

    // Setup event
    setupVariantEvents(newVariant);
    variantsList.appendChild(newVariant);
  });

  // Đảm bảo định nghĩa setupVariantEvents trước khi gọi trong loadProductDetail
  function setupVariantEvents(variantElement) {
    // Toggle nội dung biến thể
    variantElement
      .querySelector(".btn-toggle-variant")
      ?.addEventListener("click", function () {
        const content = variantElement.querySelector(".variant-content");
        const icon = this.querySelector("i");
        if (content.style.display === "none") {
          content.style.display = "block";
          icon.classList.replace("fa-chevron-down", "fa-chevron-up");
        } else {
          content.style.display = "none";
          icon.classList.replace("fa-chevron-up", "fa-chevron-down");
        }
      });
    variantElement.querySelectorAll("input, select").forEach((input) => {
      input.addEventListener("input", () => clearFieldError(input));
    });

    // Xóa biến thể
    variantElement
      .querySelector(".btn-remove-variant")
      ?.addEventListener("click", async function () {
        if (confirm("Bạn có chắc muốn xóa biến thể này?")) {
          const variantId = variantElement.getAttribute("data-id");

          // Nếu đã có trong DB thì gọi API xoá
          if (variantId) {
            await deleteVariant(variantId);
          }

          // Dù là mới hay cũ cũng xoá khỏi DOM
          console.log("[REMOVE VARIANT] Đã xóa biến thể khỏi DOM:", variantId || "new (chưa có ID)");
          variantElement.remove();
        }
      });


    // Tự động tạo slug khi chọn màu
    const colorSelect = variantElement.querySelector(".variant-color");
    const slugInput = variantElement.querySelector(".variant-slug");
    if (colorSelect && slugInput) {
      colorSelect.addEventListener("change", () => {
        const selectedOption = colorSelect.options[colorSelect.selectedIndex];
        const colorName = selectedOption?.textContent?.trim() || "";
        if (colorName && !slugInput.value) {
          slugInput.value = colorName
            .toLowerCase()
            .normalize("NFD")
            .replace(/[\u0300-\u036f]/g, "")
            .replace(/[đĐ]/g, "d")
            .replace(/[^a-z0-9]/g, "-")
            .replace(/-+/g, "-")
            .replace(/^-+|-+$/g, "");
        }
      });
    }

    const firstInvalid = document.querySelector(".is-invalid");
    if (firstInvalid) {
      firstInvalid.scrollIntoView({ behavior: "smooth", block: "center" });
    }

    // Xử lý upload ảnh biến thể
    setupVariantImageUpload(variantElement);

    // Luôn đảm bảo phần .variant-content hiển thị khi thêm mới
    const content = variantElement.querySelector(".variant-content");
    if (content) content.style.display = "block";

    // Nếu có sẵn ảnh (khi load từ API), render lại đúng DOM structure cho từng ảnh
    const imageGrid = variantElement.querySelector(".variant-image-grid");
    if (imageGrid && variantElement.variantData?.list_image?.length) {
      imageGrid.innerHTML = "";
      variantElement.variantData.list_image.forEach((imgUrl) => {
        const imgBox = document.createElement("div");
        imgBox.className = "variant-image-item loaded";
        imgBox.innerHTML = `
            <img src="${imgUrl}" alt="Preview" style="width:80px;margin:5px;">
            <button class="remove-image"><i class="fas fa-times"></i></button>
          `;
        imgBox.querySelector(".remove-image").addEventListener("click", function (ev) {
          ev.stopPropagation();
          const publicId = extractPublicIdFromUrl(imgUrl);
          if (publicId) {
            removedImages.push(publicId);
            console.log("[REMOVE IMAGE] Đã đánh dấu xóa ảnh biến thể:", publicId);
          }
          imgBox.remove();
          if (!imageGrid.querySelector('.variant-upload-box')) {
            imageGrid.appendChild(createUploadBox(imageGrid));
          }
        });
        imageGrid.appendChild(imgBox);
      });
      imageGrid.appendChild(createUploadBox(imageGrid));
    }
  }

  // Hàm upload ảnh biến thể lên server và trả về URL
  async function uploadVariantImageToServer(variantId, file) {
    const formData = new FormData();
    formData.append("image", file);
    formData.append("folder", "SonaSpace/Product");
    formData.append("subfolder", "variant");

    try {
      console.log(">> Gửi file:", file);
      console.log(">> Tên:", file.name);
      console.log(">> Type:", file.type);
      const res = await fetch(`${API_URL}/api/upload/product`, {
        method: "POST",
        body: formData,
      });

      const result = await res.json();
      if (!res.ok || !result.url) {
        showToast("Lỗi upload ảnh: " + (result.error || "Không rõ"), "danger");
        return null;
      }

      return result.url;
    } catch (error) {
      console.error("Lỗi kết nối:", error);
      showToast("Lỗi kết nối khi upload ảnh", "danger");
      return null;
    }
  }
</script>

<div id="toastContainer" class="position-fixed top-0 end-0 p-3" style="z-index:1050"></div>
<script>

  function showToast(message, type = "success") {
    let toastContainer = document.getElementById("toastContainer");
    if (!toastContainer) {
      toastContainer = document.createElement("div");
      toastContainer.id = "toastContainer";
      toastContainer.className = "position-fixed top-0 end-0 p-3";
      toastContainer.style.zIndex = "1050";
      document.body.appendChild(toastContainer);
    }

    const toast = document.createElement("div");
    toast.className = `toast align-items-center text-white bg-${type} border-0`;
    toast.setAttribute("role", "alert");
    toast.setAttribute("aria-live", "assertive");
    toast.setAttribute("aria-atomic", "true");

    toast.innerHTML = `
      <div class="d-flex">
        <div class="toast-body">${message}</div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
      </div>
    `;

    toastContainer.appendChild(toast);
    const bsToast = new bootstrap.Toast(toast, { delay: 3000 });
    bsToast.show();

    toast.addEventListener("hidden.bs.toast", () => toast.remove());
  }

</script>



<!-- API -->

<!-- Lấy chi tiết sản phẩm -->
<!-- GET /api/products/admin/:slug -->

<!-- Lấy danh sách danh mục -->
<!-- GET /api/categories -->

<!-- Lấy danh sách phòng -->
<!-- GET /api/rooms -->

<!-- Lấy danh sách màu sắc -->
<!-- GET /api/color/filter -->

<!-- Cập nhật sản phẩm -->
<!-- PUT /api/products/admin/:slug -->

<!-- Thêm ảnh sản phẩm-->
<!-- POST /api/upload/product -->

<!-- Xoá ảnh sản phẩm -->
<!-- DELETE /api/upload/:publicId -->

<!-- Tạo biển thể mới -->
<!-- POST /api/variants/:productId -->

<!-- Cập nhật biến thể -->
<!-- PUT /api/variants/:variantId -->

<!-- Xoá biến thể -->
<!-- DELETE /api/variants/:variantId -->