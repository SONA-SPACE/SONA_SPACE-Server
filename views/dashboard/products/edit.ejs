<!-- Trang Sửa Sản phẩm -->

<!-- Tiêu đề -->
<div class="dashboard-header-row">
  <h2 class="dashboard-title">Sửa sản phẩm</h2>
</div>

<!-- Container chính - chia 2 cột -->
<div class="add-product-container">
  <!-- Cột trái: Form thông tin sản phẩm -->
  <div class="product-form-column">

    <!-- ===== Thông tin sản phẩm cơ bản ===== -->
    <div class="form-section">
      <h3 class="section-title">Thông tin sản phẩm</h3>
      <div class="form-row">
        <div class="form-group">
          <label for="productName">Tên sản phẩm</label>
          <input type="text" id="productName" class="form-control" placeholder="Nhập tên sản phẩm" />
        </div>
        <div class="form-group">
          <label for="productSlug">Slug</label>
          <input type="text" id="productSlug" class="form-control" placeholder="Có thể tự tạo nếu bỏ trống" />
        </div>
        <div class="form-group">
          <label for="productStatus">Trạng thái</label>
          <div class="select-wrapper">
            <select id="productStatus" class="form-control">
              <option value="">Chọn trạng thái</option>
              <option value="1">Hiển thị</option>
              <option value="0">Ẩn</option>
            </select>
            <i class="fas fa-chevron-down"></i>
          </div>
        </div>
      </div>

      <div class="form-row">
        <div class="form-group">
          <label for="productCategory">Danh mục</label>
          <div class="select-wrapper">
            <select id="productCategory" class="form-control"></select>
            <i class="fas fa-chevron-down"></i>
          </div>
        </div>
        <div class="form-group">
          <label for="productRooms">Danh mục phòng</label>
          <div class="select-wrapper">
            <select id="productRooms" class="form-control"></select>
            <i class="fas fa-chevron-down"></i>
          </div>
        </div>
      </div>

      <div class="form-row">
        <div class="form-group full-width">
          <label for="productDescription">Mô tả</label>
          <textarea id="productDescription" class="form-control" rows="5" placeholder="Nhập mô tả"></textarea>
        </div>
      </div>
    </div>

    <!-- ===== Thông tin bổ sung ===== -->
    <div class="form-section">
      <h3 class="section-title">Thông tin bổ sung</h3>
      <div class="form-row">
        <div class="form-group">
          <label for="productDepth">Độ sâu (cm)</label>
          <input type="number" id="productDepth" class="form-control" placeholder="Nhập độ sâu" />
        </div>
        <div class="form-group">
          <label for="productWidth">Chiều rộng (cm)</label>
          <input type="number" id="productWidth" class="form-control" placeholder="Nhập chiều rộng" />
        </div>
      </div>
      <div class="form-row">
        <div class="form-group">
          <label for="productHeight">Chiều cao (cm)</label>
          <input type="number" id="productHeight" class="form-control" placeholder="Nhập chiều cao" />
        </div>
        <div class="form-group">
          <label for="productMaxLoad">Tải trọng tối đa (kg)</label>
          <input type="number" id="productMaxLoad" class="form-control" placeholder="Nhập tải trọng" />
        </div>
      </div>
      <div class="form-row">
        <div class="form-group">
          <label for="productSeatHeight">Chiều cao chỗ ngồi (cm)</label>
          <input type="number" id="productSeatHeight" class="form-control" placeholder="Nhập chiều cao chỗ ngồi" />
        </div>
        <div class="form-group">
          <label for="productMaterial">Chất liệu</label>
          <input type="text" id="productMaterial" class="form-control" placeholder="Nhập chất liệu" />
        </div>
      </div>
    </div>
  </div>

  <!-- Cột phải: Ảnh và biến thể -->
  <div class="right-column">
    <!-- ===== Ảnh chính ===== -->
    <div class="form-section">
      <h3 class="section-title">Ảnh chính sản phẩm</h3>
      <div class="main-image-upload" id="mainImageUpload" style="display: none;">
        <div class="upload-zone">
          <i class="fas fa-cloud-upload-alt"></i>
          <p>Kéo thả hoặc click để tải ảnh</p>
          <p class="upload-hint">Định dạng: JPG, PNG (Tối đa 5MB)</p>
          <input type="file" hidden accept="image/*" />
        </div>
      </div>
      <div class="main-image-preview" style="display: none">
        <img src="" alt="Preview" />
        <button class="remove-image"><i class="fas fa-times"></i></button>
      </div>
    </div>

    <!-- ===== Biến thể ===== -->
    <div class="form-section">
      <div class="variant-header">
        <h3 class="section-title">Biến thể sản phẩm</h3>
        <button type="button" class="btn btn-add-variant">
          <i class="fas fa-plus"></i> Thêm biến thể
        </button>
      </div>
      <div id="variantsList">
        <!-- Template Biến thể -->
        <div class="variant-item" style="display: none" id="variantTemplate">
          <div class="variant-header">
            <h4 class="variant-title">Biến thể mới</h4>
            <div class="variant-actions">
              <button class="btn-toggle-variant"><i class="fas fa-chevron-down"></i></button>
              <button class="btn-remove-variant"><i class="fas fa-trash"></i></button>
            </div>
          </div>

          <div class="variant-content">
            <div class="form-row">
              <div class="form-group">
                <label>Tên màu</label>
                <div class="select-wrapper">
                  <select class="form-control variant-color">
                    <option value="">Chọn màu</option>
                  </select>
                  <i class="fas fa-chevron-down"></i>
                </div>
              </div>
              <div class="form-group">
                <label>Slug</label>
                <input type="text" class="form-control variant-slug" placeholder="Tự động tạo nếu để trống" />
              </div>
            </div>

            <div class="form-row">
              <div class="form-group">
                <label>Số lượng</label>
                <input type="number" class="form-control variant-quantity" min="0" placeholder="Nhập số lượng" />
              </div>
              <div class="form-group">
                <label>Giá gốc</label>
                <input type="number" class="form-control variant-price" min="0" placeholder="Nhập giá gốc" />
              </div>
              <div class="form-group">
                <label>Giá giảm</label>
                <input type="number" class="form-control variant-sale-price" min="0" placeholder="Nhập giá giảm" />
              </div>
            </div>

            <div class="variant-images">
              <label>Hình ảnh biến thể</label>
              <div class="variant-image-grid"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- ===== Nút hành động ===== -->
<div class="form-actions">
  <button type="button" class="btn btn-cancel">Hủy</button>
  <button type="button" class="btn btn-save">Lưu</button>
</div>


<!-- Hiển thị sản phẩm theo id -->
<script>
  const API_URL = "http://localhost:3501";
  const slug = window.location.pathname.split("/").pop();
  let globalColors = []; // Thêm biến toàn cục lưu danh sách màu

  // ==== DOM elements ====
  const productNameInput = document.getElementById("productName");
  const productSlugInput = document.getElementById("productSlug");
  const productStatusSelect = document.getElementById("productStatus");
  const productCategorySelect = document.getElementById("productCategory");
  const productRoomsSelect = document.getElementById("productRooms"); // Nếu có
  const productDescriptionTextarea = document.getElementById("productDescription");
  const productDepthInput = document.getElementById("productDepth");
  const productWidthInput = document.getElementById("productWidth");
  const productHeightInput = document.getElementById("productHeight");
  const productMaxLoadInput = document.getElementById("productMaxLoad");
  const productSeatHeightInput = document.getElementById("productSeatHeight");
  const productMaterialInput = document.getElementById("productMaterial");

  const mainImagePreview = document.querySelector(".main-image-preview img");
  const mainImageContainer = document.querySelector(".main-image-preview");
  const mainImageUpload = document.getElementById("mainImageUpload");
  const mainImageUploadInput = mainImageUpload.querySelector('input[type="file"]');

  const variantTemplate = document.getElementById("variantTemplate");
  const variantsList = document.getElementById("variantsList");
  let removedImages = [];
  function extractPublicIdFromUrl(url) {
    const matches = url.match(/\/upload\/(?:v\d+\/)?([^\.]+)\.(jpg|jpeg|png|webp|gif)/);
    return matches ? matches[1] : null;
  }

  // Xử lý xóa ảnh chính
  mainImageContainer.querySelector(".remove-image")?.addEventListener("click", () => {
    const publicId = extractPublicIdFromUrl(mainImagePreview.src);
    if (publicId) removedImages.push(publicId);
    mainImagePreview.src = "";
    mainImageContainer.style.display = "none";
    // Hiện lại box upload ảnh chính
    mainImageUpload.style.display = "block";
    mainImageUploadInput.value = "";
  });

  // Xử lý upload ảnh chính mới
  mainImageUpload.addEventListener("click", () => mainImageUploadInput.click());
  mainImageUploadInput.addEventListener("change", function (e) {
    const file = e.target.files[0];
    if (file && file.type.startsWith("image/")) {
      const reader = new FileReader();
      reader.onload = function (e) {
        mainImagePreview.src = e.target.result;
        mainImageContainer.style.display = "block";
        mainImageUpload.style.display = "none";
      };
      reader.readAsDataURL(file);
    }
  });

  // ==== Load sản phẩm ====
  async function loadProductDetail() {
    try {
      const res = await fetch(`${API_URL}/api/products/admin/${slug}`);
      const data = await res.json();
      const product = data.product;

      // === Thông tin sản phẩm ===
      productNameInput.value = product.name || "";
      productSlugInput.value = product.slug || "";
      productStatusSelect.value = product.status ?? "";
      productCategorySelect.value = product.category_id ?? "";
      productDescriptionTextarea.value = product.description || "";
      productDepthInput.value = product.depth ?? "";
      productWidthInput.value = product.width ?? "";
      productHeightInput.value = product.height ?? "";
      productMaxLoadInput.value = product.max_weight_load ?? "";
      productSeatHeightInput.value = product.seating_height ?? "";
      productMaterialInput.value = product.materials || "";

      // === Ảnh chính (lấy từ product.product_image) ===
      if (product.main_image) {
        mainImagePreview.src = product.main_image;
        mainImageContainer.style.display = "block";
        mainImageUpload.style.display = "none";
      } else {
        mainImagePreview.src = "";
        mainImageContainer.style.display = "none";
        mainImageUpload.style.display = "block";
      }

      // Load danh sách select boxes (phải gọi ở đây vì cần category_id và room_ids)
      await loadProductSelectBoxes(slug, product.category_id, data.rooms?.map(r => r.room_id), null);

      // === Danh sách biến thể ===
      product.variants.forEach((variant) => {
        const clone = variantTemplate.cloneNode(true);
        clone.style.display = "block";
        clone.removeAttribute("id");

        // Tiêu đề
        clone.querySelector(".variant-title").textContent = variant.color_name;

        // Render lại danh sách màu cho select box này
        const colorSelect = clone.querySelector(".variant-color");
        colorSelect.innerHTML = globalColors.map(
          (color) =>
            `<option value="${color.color_id}" ${color.color_id == variant.color_id ? "selected" : ""}>${color.color_name}</option>`
        ).join("");

        // Gán dữ liệu khác
        colorSelect.value = variant.color_id;
        clone.querySelector(".variant-slug").value = variant.slug || "";
        clone.querySelector(".variant-quantity").value = variant.quantity ?? 0;
        clone.querySelector(".variant-price").value = variant.price ?? 0;
        clone.querySelector(".variant-sale-price").value = variant.price_sale ?? 0;

        // Danh sách ảnh  
        const imageGrid = clone.querySelector(".variant-image-grid");
        // Xóa các ảnh cũ và box upload nếu có
        imageGrid.innerHTML = "";


        // Tạo box ảnh ban đầu
        imageGrid.innerHTML = "";
        variant.list_image?.forEach((imgUrl) => {
          const imgBox = document.createElement("div");
          imgBox.className = "variant-image-item loaded";
          imgBox.innerHTML = `
    <img src="${imgUrl}" alt="Preview" style="width:80px;margin:5px;">
    <button class="remove-image"><i class="fas fa-times"></i></button>
  `;
          imgBox.querySelector(".remove-image").addEventListener("click", function (ev) {
            ev.stopPropagation();
            const img = imgBox.querySelector("img");
            const publicId = extractPublicIdFromUrl(img.src);
            if (publicId) removedImages.push(publicId);
            imgBox.remove();
            if (!imageGrid.querySelector('.variant-upload-box')) {
              imageGrid.appendChild(createUploadBox(imageGrid));
            }
          });
          imageGrid.appendChild(imgBox);
        });

        // Luôn thêm upload box ở cuối
        imageGrid.appendChild(createUploadBox(imageGrid));


        // Lưu lại dữ liệu variant vào node để submit
        clone.variantData = {
          color_id: variant.color_id,
          variant_slug: variant.slug || "",
          quantity: variant.quantity ?? 0,
          price: variant.price ?? 0,
          price_sale: variant.price_sale ?? 0,
          list_image: Array.isArray(variant.list_image) ? variant.list_image : [],
        };

        variantsList.appendChild(clone);
        setupVariantEvents(clone);
      });

      // Nếu muốn render lại dropdown màu cho các select còn lại (ví dụ khi thêm mới biến thể)
      document.querySelectorAll(".variant-color").forEach((select) => {
        if (!select.value) { // chỉ render nếu chưa có giá trị
          select.innerHTML = globalColors.map(
            (color) =>
              `<option value="${color.color_id}">${color.color_name}</option>`
          ).join("");
        }
      });
    } catch (err) {
      console.error("Lỗi load sản phẩm:", err);
      alert("Không thể tải sản phẩm");
    }
    // Gọi hàm để tải danh sách select boxes
    setupAllVariantEvents();
  }

  async function loadProductSelectBoxes(slug, selectedCategoryId, selectedRoomIds, selectedColorId) {
    try {
      // Gọi đồng thời 3 API
      const [categoryRes, roomsRes, colorsRes] = await Promise.all([
        fetch(`${API_URL}/api/categories`),
        fetch(`${API_URL}/api/rooms`),
        fetch(`${API_URL}/api/color/filter`),
      ]);

      const [categories, rooms, colors] = await Promise.all([
        categoryRes.json(),
        roomsRes.json(),
        colorsRes.json(),
      ]);

      globalColors = colors; // Lưu lại danh sách màu cho các nơi khác dùng

      // ===== Category select =====
      productCategorySelect.innerHTML = categories.map(c =>
        `<option value="${c.category_id}" ${c.category_id == selectedCategoryId ? "selected" : ""}>${c.category_name}</option>`
      ).join("");

      // ===== Rooms select =====
      productRoomsSelect.innerHTML = rooms.map(r =>
        `<option value="${r.room_id}" ${r.room_id == selectedRoomIds ? "selected" : ""}>${r.room_name}</option>`
      ).join("");

      // Không cần render dropdown màu ở đây nữa, sẽ render ở loadProductDetail cho từng biến thể
    } catch (error) {
      console.error("Lỗi khi tải select boxes:", error);
      showToast("Lỗi khi tải thông tin danh mục / phòng / màu sắc", "danger");
    }
  }

  // Thêm hàm tạo box upload dấu cộng cho variant
  function createUploadBox(imageGrid) {
    const uploadBox = document.createElement("div");
    uploadBox.className = "variant-image-item active variant-upload-box";
    uploadBox.innerHTML = `
      <div class="upload-placeholder">
        <i class="fas fa-plus"></i>
        <input type="file" hidden accept="image/*" />
      </div>
    `;
    const input = uploadBox.querySelector('input[type="file"]');
    const placeholder = uploadBox.querySelector(".upload-placeholder");
    const maxImages = 7;

    uploadBox.addEventListener("click", () => input.click());

    input.addEventListener("change", function (e) {
      const file = e.target.files[0];
      if (file && file.type.startsWith("image/")) {
        const reader = new FileReader();
        reader.onload = function (e) {

          // Tạo box mới cho ảnh đã chọn
          const loadedBox = document.createElement("div");
          loadedBox.classList.add("loaded"); // 🔥 Cần thiết
          loadedBox.className = "variant-image-item loaded";
          loadedBox.innerHTML = `
            <img src="${e.target.result}" alt="Preview" style="width:80px;margin:5px;">
            <button class="remove-image"><i class="fas fa-times"></i></button>
          `;
          loadedBox.querySelector(".remove-image").addEventListener("click", function (ev) {
            ev.stopPropagation();
            loadedBox.remove();
            // Nếu chưa có box upload thì thêm lại box upload vào cuối
            if (!imageGrid.querySelector('.variant-upload-box')) {
              imageGrid.appendChild(createUploadBox(imageGrid));
            }
          });
          imageGrid.insertBefore(loadedBox, uploadBox);
          input.value = "";
          // Nếu đủ ảnh thì ẩn box upload
          if (imageGrid.querySelectorAll('.variant-image-item.loaded').length >= maxImages) {
            uploadBox.style.display = "none";
          }
        };
        reader.readAsDataURL(file);
      }
    });

    return uploadBox;
  }

  // ==== Gọi khi tải trang ====
  window.addEventListener("DOMContentLoaded", loadProductDetail);



  // ==== Xử lý sự kiện nút lưu ====
  document.querySelector(".btn-save").addEventListener("click", async () => {
    try {
      // ===== LẤY DỮ LIỆU FORM =====
      const name = productNameInput.value.trim();
      const slugValue = productSlugInput.value.trim() || name.toLowerCase().replace(/\s+/g, "-");
      const status = parseInt(productStatusSelect.value);
      const category_id = parseInt(productCategorySelect.value);
      const room_ids = Array.from(productRoomsSelect.selectedOptions).map(opt => parseInt(opt.value));
      const description = productDescriptionTextarea.value.trim();
      const depth = parseFloat(productDepthInput.value) || null;
      const width = parseFloat(productWidthInput.value) || null;
      const height = parseFloat(productHeightInput.value) || null;
      const max_weight_load = parseFloat(productMaxLoadInput.value) || null;
      const seating_height = parseFloat(productSeatHeightInput.value) || null;
      const materials = productMaterialInput.value.trim();

      // Ảnh chính
      let mainImageUrl = mainImagePreview?.src || null;
      // Nếu là base64 thì upload lên cloudinary
      if (mainImageUrl && mainImageUrl.startsWith("data:image/")) {
        try {
          const formData = new FormData();
          // Chuyển base64 thành file
          const res = await fetch(mainImageUrl);
          const blob = await res.blob();
          formData.append("image", blob, "main-image.png");
          formData.append("folder", "SonaSpace/Product");
          formData.append("subfolder", "main");
          const uploadRes = await fetch("http://localhost:3501/api/upload/product", {
            method: "POST",
            body: formData,
          });
          const uploadData = await uploadRes.json();
          mainImageUrl = uploadData.url || mainImageUrl;
        } catch (err) {
          console.error("Lỗi upload ảnh chính:", err);
        }
      }

      // ==== DỮ LIỆU BIẾN THỂ ====
      const variantNodes = Array.from(document.querySelectorAll("#variantsList .variant-item"))
        .filter(variantEl =>
          variantEl.id !== "variantTemplate" &&
          getComputedStyle(variantEl).display !== "none" &&
          !variantEl.hidden
        );

      // Hàm upload ảnh nếu là base64, còn nếu đã là link cloudinary thì giữ nguyên
      async function uploadIfNeeded(src) {
        if (src.startsWith("http")) return src;
        // Nếu là base64, upload lên cloudinary
        try {
          // Kiểm tra kích thước base64 (giới hạn 10MB Cloudinary)
          const base64Length = src.length - (src.indexOf(',') + 1);
          const fileSize = Math.floor(base64Length * 3 / 4); // bytes
          if (fileSize > 10 * 1024 * 1024) {
            showToast("Ảnh biến thể vượt quá 10MB, vui lòng chọn ảnh nhỏ hơn!", "danger");
            return null;
          }
          const formData = new FormData();
          const res = await fetch(src);
          const blob = await res.blob();
          formData.append("image", blob, "variant-image.png");
          formData.append("folder", "SonaSpace/Product");
          formData.append("subfolder", "variant");
          const uploadRes = await fetch("http://localhost:3501/api/upload/product", {
            method: "POST",
            body: formData,
          });
          const uploadData = await uploadRes.json();
          return uploadData.url || null;
        } catch (err) {
          console.error("Lỗi upload ảnh biến thể:", err);
          showToast("Lỗi upload ảnh biến thể!", "danger");
          return null;
        }
      }

      const variants = [];
      for (const variantEl of variantNodes) {
        const colorInput = variantEl.querySelector(".variant-color");
        if (!colorInput) continue;
        const color_id = parseInt(colorInput.value);
        const variant_slug = variantEl.querySelector(".variant-slug").value.trim() || `${slugValue}-${color_id}`;
        const quantity = parseInt(variantEl.querySelector(".variant-quantity").value) || 0;
        const price = parseFloat(variantEl.querySelector(".variant-price").value) || 0;
        const price_sale_raw = variantEl.querySelector(".variant-sale-price").value;
        const price_sale = price_sale_raw === "" ? null : parseFloat(price_sale_raw);

        // Lấy đúng các ảnh của biến thể này
        const imageEls = variantEl.querySelectorAll(".variant-image-item.loaded img");
        let list_image = Array.from(imageEls).map(img => img.src);

        // Upload các ảnh base64 lên cloudinary nếu cần, loại bỏ ảnh lỗi (null)
        const list_image_urls = [];
        for (const src of list_image) {
          const url = await uploadIfNeeded(src);
          if (url) list_image_urls.push(url);
        }

        if (!color_id || !price || !quantity || list_image_urls.length === 0) {
          console.warn("Biến thể không hợp lệ, bỏ qua:", {
            color_id,
            variant_slug,
            quantity,
            price,
            price_sale,
            list_image_urls
          });
          continue;
        }

        variants.push({
          color_id,
          variant_slug,
          quantity,
          price,
          price_sale,
          list_image: list_image_urls,
        });
      }

      console.log("🧪 Biến thể gửi lên:", variants);

      // ==== GỬI YÊU CẦU SỬA ====
      const payload = {
        name,
        slug: slugValue,
        description,
        category_id,
        status,
        materials,
        height,
        width,
        depth,
        seating_height,
        max_weight_load,
        main_image: mainImageUrl,
        room_ids,
        variants,
        removedImages,
      };
      console.log("Payload gửi lên:", payload);

      // Nếu không có biến thể nào hợp lệ, báo lỗi rõ ràng
      if (!variants.length) {
        showToast("Bạn phải nhập ít nhất 1 biến thể hợp lệ (đủ màu, giá, số lượng, ảnh)!", "danger");
        return;
      }

      const res = await fetch(`${API_URL}/api/products/admin/${slug}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(payload)
      });

      const result = await res.json();

      if (!res.ok) {
        console.error("Lỗi cập nhật:", result);
        showToast("Lỗi khi cập nhật sản phẩm: " + (result.error || "Không rõ"), "danger");
        return;
      }
      showToast("Cập nhật sản phẩm thành công!", "success");
      // setTimeout(() => window.location.reload(), 1000);
    } catch (err) {
      console.error("Lỗi gửi yêu cầu:", err);
      showToast("Đã có lỗi xảy ra khi gửi dữ liệu.", "danger");
    }
  });

  // ===== Xử lý Thêm biến thể mới (không popup, giống trang add) =====
  document.querySelector(".btn-add-variant").addEventListener("click", function () {
    // Clone template
    const newVariant = variantTemplate.cloneNode(true);
    newVariant.style.display = "block";
    newVariant.removeAttribute("id");

    // Đặt lại tiêu đề
    const variantCount = variantsList.querySelectorAll(".variant-item:not(#variantTemplate)").length + 1;
    newVariant.querySelector(".variant-title").textContent = `Biến thể ${variantCount}`;

    // Render lại select màu cho biến thể mới
    const colorSelect = newVariant.querySelector(".variant-color");
    colorSelect.innerHTML = globalColors.map(
      (color) =>
        `<option value="${color.color_id}">${color.color_name}</option>`
    ).join("");

    // Setup sự kiện cho biến thể mới
    setupVariantEvents(newVariant);

    // Thêm vào danh sách
    variantsList.appendChild(newVariant);
  });

  // Hàm setup các sự kiện cho biến thể (toggle, remove, auto-slug, upload ảnh)
  function setupVariantEvents(variantElement) {
    // Toggle nội dung biến thể
    variantElement.querySelector(".btn-toggle-variant")?.addEventListener("click", function () {
      const content = variantElement.querySelector(".variant-content");
      const icon = this.querySelector("i");
      // Sửa: Nếu đang ẩn thì hiển thị, nếu đang hiện thì ẩn
      if (content.style.display === "none") {
        content.style.display = "block";
        icon.classList.replace("fa-chevron-down", "fa-chevron-up");
      } else {
        content.style.display = "none";
        icon.classList.replace("fa-chevron-up", "fa-chevron-down");
      }
    });

    // Xóa biến thể
    variantElement.querySelector(".btn-remove-variant")?.addEventListener("click", function () {
      if (confirm("Bạn có chắc muốn xóa biến thể này?")) {
        variantElement.remove();
      }
    });

    // Tự động tạo slug khi chọn màu
    const colorSelect = variantElement.querySelector(".variant-color");
    const slugInput = variantElement.querySelector(".variant-slug");
    if (colorSelect && slugInput) {
      colorSelect.addEventListener("change", () => {
        const selectedOption = colorSelect.options[colorSelect.selectedIndex];
        const colorName = selectedOption?.textContent?.trim() || "";
        if (colorName && !slugInput.value) {
          slugInput.value = colorName
            .toLowerCase()
            .normalize("NFD")
            .replace(/[\u0300-\u036f]/g, "")
            .replace(/[đĐ]/g, "d")
            .replace(/[^a-z0-9]/g, "-")
            .replace(/-+/g, "-")
            .replace(/^-+|-+$/g, "");
        }
      });
    }

    // Xử lý upload ảnh biến thể
    setupVariantImageUpload(variantElement);

    // Luôn đảm bảo phần .variant-content hiển thị khi thêm mới
    const content = variantElement.querySelector(".variant-content");
    if (content) content.style.display = "block";

    // Sửa lỗi: Nếu có sẵn ảnh (khi load từ API), render lại đúng DOM structure cho từng ảnh
    const imageGrid = variantElement.querySelector(".variant-image-grid");

    if (imageGrid && variantElement.variantData?.list_image?.length) {
      // Xóa ảnh cũ
      imageGrid.innerHTML = "";

      variantElement.variantData.list_image.forEach((imgUrl) => {
        const imgBox = document.createElement("div");
        imgBox.className = "variant-image-item loaded";
        imgBox.innerHTML = `
      <img src="${imgUrl}" alt="Preview" style="width:80px;margin:5px;">
      <button class="remove-image"><i class="fas fa-times"></i></button>
    `;

        // Sự kiện xóa ảnh
        imgBox.querySelector(".remove-image").addEventListener("click", function (ev) {
          ev.stopPropagation();
          const publicId = extractPublicIdFromUrl(imgUrl);
          if (publicId) removedImages.push(publicId);
          imgBox.remove();

          // Nếu chưa có box upload thì thêm lại box upload
          if (!imageGrid.querySelector('.variant-upload-box')) {
            imageGrid.appendChild(createUploadBox(imageGrid));
          }
        });

        imageGrid.appendChild(imgBox);
      });

      // Thêm box upload vào cuối
      imageGrid.appendChild(createUploadBox(imageGrid));
    }
  }

  // Hàm xử lý upload ảnh cho variant (giống trang add)
  function setupVariantImageUpload(variantElement) {
    const imageGrid = variantElement.querySelector(".variant-image-grid");
    const maxImages = 7;
    let currentImageCount = 0;

    function createImageBox() {
      const div = document.createElement("div");
      div.className = "variant-image-item active";
      div.innerHTML = `
        <div class="upload-placeholder">
          <i class="fas fa-plus"></i>
          <input type="file" hidden accept="image/*">
        </div>
      `;
      return div;
    }

    function setupImageBox(imageBox) {
      const input = imageBox.querySelector('input[type="file"]');
      const placeholder = imageBox.querySelector(".upload-placeholder");
      imageBox.addEventListener("click", () => input.click());
      input.addEventListener("change", function (e) {
        const file = e.target.files[0];
        if (file && file.type.startsWith("image/")) {
          const reader = new FileReader();
          reader.onload = function (e) {
            imageBox.classList.add("loaded");
            placeholder.style.display = "none";
            const img = document.createElement("img");
            img.src = e.target.result;
            img.alt = "Preview";
            imageBox.appendChild(img);
            const removeBtn = document.createElement("button");
            removeBtn.className = "remove-image";
            removeBtn.innerHTML = `<i class="fas fa-times"></i>`;
            imageBox.appendChild(removeBtn);
            removeBtn.addEventListener("click", function (e) {
              e.stopPropagation();
              imageBox.remove();
              currentImageCount--;
              const lastBox = imageGrid.lastElementChild;
              if (!lastBox || lastBox.classList.contains("loaded")) {
                if (currentImageCount < maxImages) {
                  const newBox = createImageBox();
                  imageGrid.appendChild(newBox);
                  setupImageBox(newBox);
                  currentImageCount++;
                }
              }
            });
            if (currentImageCount < maxImages) {
              const newBox = createImageBox();
              imageGrid.appendChild(newBox);
              setupImageBox(newBox);
              currentImageCount++;
            }
          };
          reader.readAsDataURL(file);
        }
      });
    }

    imageGrid.innerHTML = "";
    const firstBox = createImageBox();
    imageGrid.appendChild(firstBox);
    setupImageBox(firstBox);
    currentImageCount++;
  }

  // Khi load lại sản phẩm từ API, setup lại sự kiện cho các biến thể cũ
  function setupAllVariantEvents() {
    document.querySelectorAll("#variantsList .variant-item").forEach(variantEl => {
      if (variantEl.id !== "variantTemplate") {
        setupVariantEvents(variantEl);
        // Luôn hiển thị phần nội dung biến thể khi load lại
        const content = variantEl.querySelector(".variant-content");
        if (content) content.style.display = "block";
      }
    });
  }

  // Gọi lại sau khi render biến thể từ API
  window.addEventListener("DOMContentLoaded", () => {
    // ...existing code...
    setTimeout(setupAllVariantEvents, 500); // Đảm bảo gọi sau khi render xong
  });

</script>


<div id="toastContainer" class="position-fixed top-0 end-0 p-3" style="z-index:1050"></div>

<script>

  function showToast(message, type = "success") {
    let toastContainer = document.getElementById("toastContainer");
    if (!toastContainer) {
      toastContainer = document.createElement("div");
      toastContainer.id = "toastContainer";
      toastContainer.className = "position-fixed top-0 end-0 p-3";
      toastContainer.style.zIndex = "1050";
      document.body.appendChild(toastContainer);
    }

    const toast = document.createElement("div");
    toast.className = `toast align-items-center text-white bg-${type} border-0`;
    toast.setAttribute("role", "alert");
    toast.setAttribute("aria-live", "assertive");
    toast.setAttribute("aria-atomic", "true");

    toast.innerHTML = `
      <div class="d-flex">
        <div class="toast-body">${message}</div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
      </div>
    `;

    toastContainer.appendChild(toast);
    const bsToast = new bootstrap.Toast(toast, { delay: 3000 });
    bsToast.show();

    toast.addEventListener("hidden.bs.toast", () => toast.remove());
  }

</script>