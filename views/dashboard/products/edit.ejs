<div class="dashboard-header-row">
  <h2 class="dashboard-title">Sửa sản phẩm</h2>
</div>

<div class="add-product-container">
  <div class="product-form-column">
    <div class="form-section">
      <h3 class="section-title">Thông tin sản phẩm</h3>
      <div class="form-row">
        <div class="form-group">
          <label for="productName">Tên sản phẩm</label>
          <input type="text" id="productName" class="form-control" placeholder="Nhập tên sản phẩm" />
          <div class="invalid-feedback"></div>
        </div>
        <div class="form-group">
          <label for="productSlug">Slug</label>
          <input type="text" id="productSlug" class="form-control" placeholder="Có thể tự tạo nếu bỏ trống" />
        </div>
        <div class="form-group">
          <label for="productStatus">Trạng thái</label>
          <div class="select-wrapper">
            <select id="productStatus" class="form-control">
              <option value="">Chọn trạng thái</option>
              <option value="1">Hiển thị</option>
              <option value="0">Ẩn</option>
            </select>
            <i class="fas fa-chevron-down"></i>
          </div>
          <div class="invalid-feedback"></div>
        </div>
      </div>

      <div class="form-row">
        <div class="form-group">
          <label for="productCategory">Danh mục</label>
          <div class="select-wrapper">
            <select id="productCategory" class="form-control"></select>
            <i class="fas fa-chevron-down"></i>
          </div>
          <div class="invalid-feedback"></div>
        </div>
        <div class="form-group">
          <label for="productRooms">Danh mục phòng</label>
          <div class="select-wrapper">
            <select id="productRooms" class="form-control"></select>
            <i class="fas fa-chevron-down"></i>
          </div>
          <div class="invalid-feedback"></div>
        </div>
      </div>

      <div class="form-row">
        <div class="form-group full-width">
          <label for="productDescription">Mô tả</label>
          <textarea id="productDescription" class="form-control" rows="5" placeholder="Nhập mô tả"></textarea>
          <div class="invalid-feedback"></div>
        </div>
      </div>
    </div>

    <div class="form-section">
      <div class="variant-header">
        <h3 class="section-title">Thông tin bổ sung</h3>
        <button type="button" class="btn btn-add-attribute">
          <i class="fas fa-plus"></i> Thêm thuộc tính
        </button>
      </div>
      <div id="newAttributesContainer"></div>
      <div id="dynamicAttributesContainer"></div>
    </div>
  </div>

  <div class="right-column">
    <div class="form-section">
      <h3 class="section-title">Ảnh chính sản phẩm</h3>
      <div class="main-image-upload" id="mainImageUpload" style="display: none">
        <div class="upload-zone">
          <i class="fas fa-cloud-upload-alt"></i>
          <p>Kéo thả hoặc click để tải ảnh</p>
          <p class="upload-hint">Định dạng: JPG, PNG (Tối đa 5MB)</p>
          <input type="file" hidden accept="image/*" />
        </div>
      </div>
      <div class="main-image-preview" style="display: none">
        <img src="" alt="Preview" />
        <button class="remove-image"><i class="fas fa-times"></i></button>
      </div>
    </div>

    <div class="form-section">
      <div class="variant-header">
        <h3 class="section-title">Biến thể sản phẩm</h3>
        <button type="button" class="btn btn-add-variant">
          <i class="fas fa-plus"></i> Thêm biến thể
        </button>
      </div>
      <div id="variantsList">
        <div class="variant-item" style="display: none" id="variantTemplate">
          <div class="variant-header">
            <h4 class="variant-title">Biến thể mới</h4>
            <div class="variant-actions">
              <button class="btn-toggle-variant">
                <i class="fas fa-chevron-down"></i>
              </button>
              <button class="btn-remove-variant">
                <i class="fas fa-trash"></i>
              </button>
            </div>
          </div>

          <div class="variant-content">
            <div class="form-row">
              <div class="form-group">
                <label>Tên màu</label>
                <div class="select-wrapper">
                  <select class="form-control variant-color">
                    <option value="">Chọn màu</option>
                  </select>
                  <i class="fas fa-chevron-down"></i>
                </div>
                <div class="invalid-feedback"></div>
              </div>
              <div class="form-group">
                <label>Slug</label>
                <input type="text" class="form-control variant-slug" placeholder="Tự động tạo nếu để trống" />
                <div class="invalid-feedback"></div>
              </div>
            </div>

            <div class="form-row">
              <div class="form-group">
                <label>Số lượng</label>
                <input type="number" class="form-control variant-quantity" min="0" placeholder="Nhập số lượng" />
                <div class="invalid-feedback"></div>
              </div>
              <div class="form-group">
                <label>Giá gốc</label>
                <input type="number" class="form-control variant-price" min="0" placeholder="Nhập giá gốc" />
                <div class="invalid-feedback"></div>
              </div>
              <div class="form-group">
                <label>Giá giảm</label>
                <input type="number" class="form-control variant-sale-price" min="0" placeholder="Nhập giá giảm" />
                <div class="invalid-feedback"></div>
              </div>
            </div>

            <div class="variant-images">
              <label>Hình ảnh biến thể</label>
              <div class="variant-image-grid"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<div class="form-actions">
  <button type="button" class="btn btn-cancel">Hủy</button>
  <button type="button" class="btn btn-save">Lưu</button>
</div>

<div id="toastContainer" class="position-fixed top-0 end-0 p-3" style="z-index: 1050"></div>

<script>
  let newAttributeCounter = 0;

  function showFieldError(element, message) {
    if (!element) return;
    element.classList.add("is-invalid");
    let feedbackEl = element.nextElementSibling;

    if (!feedbackEl || !feedbackEl.classList.contains("invalid-feedback")) {
      const parentContainer = element.closest(".form-infor") || element.closest(".form-group");
      if (parentContainer) {
        feedbackEl = parentContainer.querySelector(".invalid-feedback");
      }
    }

    if (!feedbackEl && (element.classList.contains("variant-image-grid") || element.id === "mainImageUpload")) {
      let existingSiblingFeedback = element.nextElementSibling;
      if (existingSiblingFeedback && existingSiblingFeedback.classList.contains("invalid-feedback")) {
        feedbackEl = existingSiblingFeedback;
      } else {
        feedbackEl = document.createElement("div");
        feedbackEl.className = "invalid-feedback d-block";
        element.parentNode.insertBefore(feedbackEl, element.nextSibling);
      }
    }

    if (feedbackEl) {
      feedbackEl.textContent = message;
      feedbackEl.style.display = "block";
    }
  }

  function clearFieldError(element) {
    if (!element) return;
    element.classList.remove("is-invalid");
    let feedbackEl = element.nextElementSibling;

    if (!feedbackEl || !feedbackEl.classList.contains("invalid-feedback")) {
      const parentContainer = element.closest(".form-infor") || element.closest(".form-group");
      if (parentContainer) {
        feedbackEl = parentContainer.querySelector(".invalid-feedback");
      }
    }

    if (element.classList.contains("variant-image-grid") || element.id === "mainImageUpload") {
      let existingSiblingFeedback = element.nextElementSibling;
      if (existingSiblingFeedback && existingSiblingFeedback.classList.contains("invalid-feedback")) {
        existingSiblingFeedback.remove();
        return;
      }
    }

    if (feedbackEl) {
      feedbackEl.textContent = "";
      feedbackEl.style.display = "none";
    }
  }

  const slug = window.location.pathname.split("/").pop();
  let globalColors = [];
  let globalMaterials = [];
  let removedImages = [];

  const productNameInput = document.getElementById("productName");
  const productSlugInput = document.getElementById("productSlug");
  const productStatusSelect = document.getElementById("productStatus");
  const productCategorySelect = document.getElementById("productCategory");
  const productRoomsSelect = document.getElementById("productRooms");
  const productDescriptionTextarea = document.getElementById("productDescription");
  const mainImagePreview = document.querySelector(".main-image-preview img");
  const mainImageContainer = document.querySelector(".main-image-preview");
  const mainImageUpload = document.getElementById("mainImageUpload");
  const mainImageUploadInput = mainImageUpload.querySelector('input[type="file"]');
  const variantTemplate = document.getElementById("variantTemplate");
  const variantsList = document.getElementById("variantsList");

  async function loadDynamicAttributes(categoryId, productAttributes = []) {
    const dynamicAttributesContainer = document.getElementById("dynamicAttributesContainer");
    if (!dynamicAttributesContainer) return;

    dynamicAttributesContainer.innerHTML = '';
    if (!categoryId) return;
    try {
      const res = await fetch(`/api/attribute/${categoryId}/attributes`);
      if (!res.ok) throw new Error("Could not fetch category attributes");
      const attributesMeta = await res.json();

      attributesMeta.forEach(attrMeta => {
        const valueType = attrMeta.value_type;
        const formGroup = document.createElement("div");
        formGroup.className = "form-infor";

        let inputHtml = '';
        if (valueType === 'material_id') {
          inputHtml = `
            <div class="select-wrapper">
              <select id="attr-${attrMeta.attribute_id}" class="form-control dynamic-attribute"
                      data-attribute-id="${attrMeta.attribute_id}" data-value-type="material_id" ${attrMeta.is_required ? 'required' : ''}>
                <option value="">Chọn chất liệu</option>
                ${globalMaterials.map(mat => `<option value="${mat.material_id}">${mat.material_name}</option>`).join('')}
              </select>
              <i class="fas fa-chevron-down"></i>
            </div>
          `;
        } else {
          inputHtml = `
            <input type="${valueType === 'number' ? 'number' : 'text'}"
                   id="attr-${attrMeta.attribute_id}" class="form-control dynamic-attribute"
                   data-attribute-id="${attrMeta.attribute_id}" data-value-type="${valueType}" ${attrMeta.is_required ? 'required' : ''}
                   placeholder="Nhập ${attrMeta.attribute_name.toLowerCase()}" />
          `;
        }

        formGroup.innerHTML = `
          <label for="attr-${attrMeta.attribute_id}">${attrMeta.attribute_name} ${attrMeta.is_required ? '<span class="required-asterisk">*</span>' : ''} (${attrMeta.unit || ''})</label>
          ${inputHtml}
          <div class="invalid-feedback"></div>
        `;
        dynamicAttributesContainer.appendChild(formGroup);

        const inputElement = formGroup.querySelector(`.dynamic-attribute`);
        if (inputElement) {
          const existingAttr = productAttributes.find(pa => pa.attribute_id === attrMeta.attribute_id);
          if (existingAttr) {
            if (attrMeta.value_type === 'material_id') {
              inputElement.value = existingAttr.material_id || '';
            } else {
              // Logic để xử lý kiểu 'number' và 'text'
              if (attrMeta.value_type === 'number') {
                // Ưu tiên dùng existingAttr.value nếu có
                if (existingAttr.value !== null && existingAttr.value !== '') {
                  inputElement.value = parseFloat(existingAttr.value);
                }
                // Nếu existingAttr.value rỗng nhưng material_id có giá trị số (trường hợp backend lưu sai)
                else if (existingAttr.material_id !== null && existingAttr.material_id !== '' && !isNaN(parseFloat(existingAttr.material_id))) {
                  inputElement.value = parseFloat(existingAttr.material_id);
                } else {
                  inputElement.value = ''; // Nếu cả hai đều rỗng hoặc không hợp lệ
                }
              } else { // Xử lý kiểu 'text'
                inputElement.value = existingAttr.value ?? '';
              }
            }
          }
          inputElement.addEventListener("input", () => clearFieldError(inputElement));
          inputElement.addEventListener("change", () => clearFieldError(inputElement));
        }
      });
    } catch (error) {
      showToast("Lỗi khi tải thông tin bổ sung cho danh mục này.", "danger");
    }
  }

  function extractPublicIdFromUrl(url) {
    const matches = url.match(
      /upload\/(?:v\d+\/)?([^\.]+)\.(jpg|jpeg|png|webp|gif)/
    );
    if (!matches || !matches[1]) return null;
    return matches[1];
  }

  mainImageContainer
    .querySelector(".remove-image")
    ?.addEventListener("click", () => {
      const publicId = extractPublicIdFromUrl(mainImagePreview.src);
      if (publicId) {
        removedImages.push(publicId);
      }
      mainImagePreview.src = "";
      mainImageContainer.style.display = "none";
      mainImageUpload.style.display = "block";
      mainImageUploadInput.value = "";
    });

  mainImageUpload.addEventListener("click", () =>
    mainImageUploadInput.click()
  );

  mainImageUploadInput.addEventListener("change", function (e) {
    const file = e.target.files[0];
    if (file && file.type.startsWith("image/")) {
      const reader = new FileReader();
      reader.onload = function (e) {
        mainImagePreview.src = e.target.result;
        mainImageContainer.style.display = "block";
        mainImageUpload.style.display = "none";
      };
      reader.readAsDataURL(file);
    }
  });

  async function loadProductDetail() {
    try {
      const res = await fetch(`/api/products/admin/${slug}`);
      if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);
      const data = await res.json();
      const product = data.product;

      productNameInput.value = product.name || "";
      productSlugInput.value = product.slug || "";
      productStatusSelect.value = product.status ?? "";
      productCategorySelect.value = product.category_id ?? "";
      productDescriptionTextarea.value = product.description || "";

      await loadProductSelectBoxes(
        product.category_id,
        data.rooms?.map((r) => r.room_id)
      );
      await loadDynamicAttributes(product.category_id, product.attributes);

      if (product.main_image) {
        mainImagePreview.src = product.main_image;
        mainImageContainer.style.display = "block";
        mainImageUpload.style.display = "none";
      } else {
        mainImagePreview.src = "";
        mainImageContainer.style.display = "none";
        mainImageUpload.style.display = "block";
      }

      variantsList.innerHTML = "";

      product.variants.forEach((variant, idx) => {
        const clone = variantTemplate.cloneNode(true);
        clone.style.display = "block";
        clone.removeAttribute("id");
        clone.setAttribute("data-id", variant.variant_id);
        clone.classList.add("variant-item");

        clone.querySelector(".variant-title").textContent =
          variant.color_name || `Biến thể ${idx + 1}`;
        const colorSelect = clone.querySelector(".variant-color");
        colorSelect.innerHTML = globalColors
          .map(
            (color) =>
              `<option value="${color.color_id}" ${color.color_id == variant.color_id ? "selected" : ""
              }>${color.color_name}</option>`
          )
          .join("");
        colorSelect.value = variant.color_id;
        clone.querySelector(".variant-slug").value = variant.slug || "";
        clone.querySelector(".variant-quantity").value = variant.quantity ?? 0;
        clone.querySelector(".variant-price").value = variant.price ?? 0;
        clone.querySelector(".variant-sale-price").value =
          variant.price_sale ?? 0;

        clone.variantData = {
          color_id: variant.color_id,
          variant_slug: variant.slug || "",
          quantity: variant.quantity,
          price: variant.price ?? 0,
          price_sale: variant.price_sale ?? 0,
          list_image: Array.isArray(variant.list_image)
            ? variant.list_image
            : [],
        };

        variantsList.appendChild(clone);
        setupVariantEvents(clone);
      });
    } catch (err) {
      showToast("Không thể tải sản phẩm", "danger");
    }
  }

  productCategorySelect.addEventListener("change", async () => {
    clearFieldError(productCategorySelect);
    const selectedCategoryId = productCategorySelect.value;
    document.getElementById("newAttributesContainer").innerHTML = '';
    await loadDynamicAttributes(selectedCategoryId, []);
  });

  async function loadProductSelectBoxes(
    selectedCategoryId,
    selectedRoomIds
  ) {
    try {
      const [categoryRes, roomsRes, colorsRes, materialsRes] =
        await Promise.all([
          fetch(`/api/categories`),
          fetch(`/api/rooms`),
          fetch(`/api/color/filter`),
          fetch(`/api/materials`),
        ]);
      const [categories, rooms, colors, materials] = await Promise.all([
        categoryRes.json(),
        roomsRes.json(),
        colorsRes.json(),
        materialsRes.json(),
      ]);

      globalColors = colors;
      globalMaterials = materials;

      productCategorySelect.innerHTML = categories
        .map(
          (c) =>
            `<option value="${c.category_id}" ${c.category_id == selectedCategoryId ? "selected" : ""
            }>${c.category_name}</option>`
        )
        .join("");

      productRoomsSelect.innerHTML = rooms
        .map(
          (r) =>
            `<option value="${r.room_id}" ${selectedRoomIds?.includes(r.room_id) ? "selected" : ""
            }>${r.room_name}</option>`
        )
        .join("");
    } catch (error) {
      showToast(
        "Lỗi khi tải thông tin danh mục / phòng / màu sắc / chất liệu ",
        "danger"
      );
    }
  }

  function createUploadBox(imageGrid) {
    const uploadBox = document.createElement("div");
    uploadBox.className = "variant-image-item active variant-upload-box";
    uploadBox.innerHTML = `
        <div class="upload-placeholder">
          <i class="fas fa-plus"></i>
          <input type="file" hidden accept="image/*" />
        </div>
      `;

    const input = uploadBox.querySelector('input[type="file"]');
    const maxImages = 7;

    uploadBox.addEventListener("click", () => input.click());

    input.addEventListener("change", function (e) {
      const file = e.target.files[0];
      if (file && file.type.startsWith("image/")) {
        const reader = new FileReader();
        reader.onload = function (event) {
          addLoadedImageBox(event.target.result, imageGrid, uploadBox, file);
        };
        reader.readAsDataURL(file);
      }
    });
    return uploadBox;
  }

  function addLoadedImageBox(imgUrl, imageGrid, uploadBox, file) {
    const loadedBox = document.createElement("div");
    loadedBox.className = "variant-image-item loaded";
    loadedBox.dataset.local = "true";
    loadedBox.dataset.filename = file?.name || "";

    loadedBox.innerHTML = `
        <img src="${imgUrl}" alt="Preview" style="width:80px;margin:5px;">
        <button class="remove-image"><i class="fas fa-times"></i></button>
        <input type="file" hidden />
      `;

    const hiddenInput = loadedBox.querySelector('input[type="file"]');
    if (file) {
      const dataTransfer = new DataTransfer();
      dataTransfer.items.add(file);
      hiddenInput.files = dataTransfer.files;
    }

    loadedBox
      .querySelector(".remove-image")
      .addEventListener("click", function (ev) {
        ev.stopPropagation();

        if (!file) {
          const publicId = extractPublicIdFromUrl(imgUrl);
          if (publicId) {
            removedImages.push(publicId);
          }
        }
        loadedBox.remove();
        if (imageGrid.querySelectorAll(".variant-image-item.loaded").length < 7 && !imageGrid.querySelector(".variant-upload-box")) {
          imageGrid.appendChild(createUploadBox(imageGrid));
        }
        if (imageGrid.querySelectorAll(".variant-image-item.loaded").length === 0) {
          showFieldError(imageGrid, "Cần ít nhất 1 ảnh cho biến thể.");
        }
      });

    imageGrid.insertBefore(loadedBox, uploadBox);
    uploadBox.querySelector('input[type="file"]').value = "";

    if (
      imageGrid.querySelectorAll(".variant-image-item.loaded").length >= 7
    ) {
      uploadBox.style.display = "none";
    }

    clearFieldError(imageGrid);
  }

  function setupVariantImageUpload(variantElement) {
    const imageGrid = variantElement.querySelector(".variant-image-grid");
    if (!imageGrid) return;

    imageGrid.innerHTML = "";

    const maxImages = 7;
    const existingImages = variantElement.variantData?.list_image || [];

    existingImages.forEach((imgUrl) => {
      const imgBox = document.createElement("div");
      imgBox.className = "variant-image-item loaded";
      imgBox.innerHTML = `
          <img src="${imgUrl}" alt="Preview" style="width:80px;margin:5px;">
          <button class="remove-image"><i class="fas fa-times"></i></button>
          <input type="file" hidden />
        `;

      imgBox
        .querySelector(".remove-image")
        .addEventListener("click", function (ev) {
          ev.stopPropagation();
          const publicId = extractPublicIdFromUrl(imgUrl);
          if (publicId) {
            removedImages.push(publicId);
          }
          imgBox.remove();
          if (
            !imageGrid.querySelector(".variant-upload-box") &&
            imageGrid.querySelectorAll(".variant-image-item.loaded").length <
            maxImages
          ) {
            imageGrid.appendChild(createUploadBox(imageGrid));
          }
          if (imageGrid.querySelectorAll(".variant-image-item.loaded").length === 0) {
            showFieldError(imageGrid, "Cần ít nhất 1 ảnh cho biến thể.");
          }
        });
      imageGrid.appendChild(imgBox);
    });

    if (existingImages.length < maxImages) {
      imageGrid.appendChild(createUploadBox(imageGrid));
    }
  }

  async function saveNewAttribute(rowElement, counter) {
    const nameInput = rowElement.querySelector(`#newAttributeName-${counter}`);
    const valueTypeSelect = rowElement.querySelector(`#newAttributeValueType-${counter}`);
    const unitInput = rowElement.querySelector(`#newAttributeUnit-${counter}`);
    const selectedCategoryId = document.getElementById("productCategory").value;

    clearFieldError(nameInput);
    clearFieldError(valueTypeSelect);
    clearFieldError(unitInput);

    const attribute_name = nameInput.value.trim();
    const value_type = valueTypeSelect.value;
    const unit = unitInput.value.trim() || null;
    const is_required = false;

    let hasErrors = false;
    if (!attribute_name) {
      showFieldError(nameInput, "Tên thuộc tính là bắt buộc.");
      hasErrors = true;
    }
    if (!value_type) {
      showFieldError(valueTypeSelect, "Loại giá trị là bắt buộc.");
      hasErrors = true;
    }
    if (!selectedCategoryId) {
      showToast("Vui lòng chọn danh mục sản phẩm trước khi thêm thuộc tính.", "danger");
      showFieldError(document.getElementById("productCategory"), "Vui lòng chọn danh mục.");
      hasErrors = true;
    }

    if (hasErrors) {
      return;
    }

    const payload = {
      attribute_name,
      value_type,
      unit,
      is_required,
    };
    try {
      const rawRes = await fetch(`/api/attribute/${selectedCategoryId}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });
      const contentType = rawRes.headers.get("content-type");
      if (!contentType || !contentType.includes("application/json")) {
        const errorText = await rawRes.text();
        showToast("Phản hồi không hợp lệ từ server.", "danger");
        return;
      }
      const addAttributeRes = await rawRes.json();

      if (rawRes.ok && addAttributeRes.success) {
        showToast(`Đã thêm thuộc tính mới: ${attribute_name}`, "success");
        rowElement.remove();
        await loadDynamicAttributes(selectedCategoryId, []);
      } else {
        showToast(addAttributeRes?.message || "Không thể thêm thuộc tính mới.", "danger");
      }

    } catch (error) {
      showToast(`Lỗi khi thêm thuộc tính '${attribute_name}': ${error.message}`, "danger");
    }
  }

  function addCustomAttributeRow() {
    const newAttributesContainer = document.getElementById("newAttributesContainer");
    newAttributeCounter++;
    const rowId = `new-attribute-row-${newAttributeCounter}`;

    const newAttributeHtml = `
      <div class="form-row new-attribute-row" id="${rowId}">
        <div class="form-group col-md-3">
          <label for="newAttributeName-${newAttributeCounter}">Tên thuộc tính</label>
          <input type="text" id="newAttributeName-${newAttributeCounter}" class="form-control new-attribute-input" placeholder="Tên thuộc tính">
          <div class="invalid-feedback"></div>
        </div>
        <div class="form-group col-md-3">
          <label for="newAttributeValueType-${newAttributeCounter}">Loại giá trị</label>
          <div class="select-wrapper">
            <select id="newAttributeValueType-${newAttributeCounter}" class="form-control new-attribute-input">
              <option value="">Chọn loại</option>
              <option value="text">Text</option>
              <option value="number">Number</option>
              <option value="material_id">Chất liệu</option>
            </select>
            <i class="fas fa-chevron-down"></i>
          </div>
          <div class="invalid-feedback"></div>
        </div>
        <div class="form-group col-md-3">
          <label for="newAttributeUnit-${newAttributeCounter}">Đơn vị (nếu có)</label>
          <input type="text" id="newAttributeUnit-${newAttributeCounter}" class="form-control new-attribute-input" placeholder="Ví dụ: cm, kg">
          <div class="invalid-feedback"></div>
        </div>
        <div class="form-group col-md-3 d-flex align-items-end justify-content-end gap-2">
          <button type="button" class="btn btn-primary btn-sm save-new-attribute" data-row-id="${rowId}" data-counter="${newAttributeCounter}">
            Lưu
          </button>
          <button type="button" class="btn btn-danger btn-sm remove-new-attribute" data-row-id="${rowId}">
            Xóa
          </button>
        </div>
      </div>
    `;
    newAttributesContainer.insertAdjacentHTML('beforeend', newAttributeHtml);

    const newRowElement = document.getElementById(rowId);

    newRowElement.querySelector(".remove-new-attribute").addEventListener("click", function () {
      newRowElement.remove();
    });

    newRowElement.querySelector(".save-new-attribute").addEventListener("click", function () {
      const counter = parseInt(this.dataset.counter);
      saveNewAttribute(newRowElement, counter);
    });

    newRowElement.querySelectorAll(".new-attribute-input").forEach(input => {
      input.addEventListener("input", () => clearFieldError(input));
      input.addEventListener("change", () => clearFieldError(input));
    });
  }

  document.querySelector(".btn-add-attribute").addEventListener("click", () => {
    addCustomAttributeRow();
  });

  window.addEventListener("DOMContentLoaded", () => {
    loadProductDetail();

    const staticInputs = [
      productNameInput,
      productSlugInput,
      productCategorySelect,
      productStatusSelect,
      productDescriptionTextarea,
      productRoomsSelect
    ];

    staticInputs.forEach((input) => {
      if (input) {
        input.addEventListener("input", () => clearFieldError(input));
        input.addEventListener("change", () => clearFieldError(input));
      }
    });
  });

  productNameInput.addEventListener("input", function () {
    const productName = this.value.trim();
    if (productName) {
      productSlugInput.value = productName
        .toLowerCase()
        .normalize("NFD")
        .replace(/[\u0300-\u036f]/g, "")
        .replace(/[đĐ]/g, "d")
        .replace(/[^a-z0-9\s-]/g, "")
        .replace(/\s+/g, "-")
        .replace(/^-+|-+$/g, "");
    } else {
      productSlugInput.value = "";
    }
    clearFieldError(productSlugInput);
  });

  async function deleteVariant(variantId) {
    try {
      const res = await fetch(`/api/variants/${variantId}`, {
        method: "DELETE",
      });
      const result = await res.json();
      if (!res.ok) {
        showToast(
          `Xoá biến thể ${variantId} thất bại: ` + (result.error || ""),
          "danger"
        );
        return false;
      }
      return true;
    } catch (err) {
      showToast("Lỗi kết nối khi xoá biến thể", "danger");
      return false;
    }
  }

  document.querySelector(".btn-save").addEventListener("click", async () => {
    const saveButton = document.querySelector(".btn-save");
    const originalButtonText = saveButton.textContent;
    const validationErrors = [];

    try {
      saveButton.disabled = true;
      saveButton.textContent = "Đang lưu...";
      saveButton.classList.add("btn-loading");

      document.querySelectorAll(".is-invalid").forEach((el) => el.classList.remove("is-invalid"));
      document.querySelectorAll(".invalid-feedback").forEach((el) => el.textContent = "");
      clearFieldError(mainImageUpload);
      document.querySelectorAll(".variant-image-grid").forEach((grid) => clearFieldError(grid));

      const name = productNameInput.value.trim();
      const slugValue =
        productSlugInput.value.trim() ||
        name.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "").replace(/[đĐ]/g, "d").replace(/[^a-z0-9\s-]/g, "").replace(/\s+/g, "-").replace(/^-+|-+$/g, "");
      const status = parseInt(productStatusSelect.value);
      const category_id = parseInt(productCategorySelect.value);
      const room_ids = Array.from(productRoomsSelect.selectedOptions).map(
        (opt) => parseInt(opt.value)
      );
      const description = productDescriptionTextarea.value.trim();

      if (!name) {
        showFieldError(productNameInput, "Tên sản phẩm không được để trống.");
        validationErrors.push("name");
      }
      if (!slugValue) {
        showFieldError(productSlugInput, "Slug không được để trống.");
        validationErrors.push("slug");
      }
      if (isNaN(status)) {
        showFieldError(productStatusSelect, "Vui lòng chọn trạng thái.");
        validationErrors.push("status");
      }
      if (isNaN(category_id)) {
        showFieldError(productCategorySelect, "Vui lòng chọn danh mục.");
        validationErrors.push("category_id");
      }
      if (!description) {
        showFieldError(productDescriptionTextarea, "Mô tả không được để trống.");
        validationErrors.push("description");
      }
      if (room_ids.length === 0) {
        showFieldError(productRoomsSelect, "Vui lòng chọn ít nhất một phòng.");
        validationErrors.push("room_ids");
      }

      const attributes = [];
      const dynamicAttributesContainer = document.getElementById("dynamicAttributesContainer");
      const dynamicAttributeInputs = dynamicAttributesContainer.querySelectorAll(".dynamic-attribute");
      let hasAttributeErrors = false;

      const attributesMetaRes = await fetch(`/api/attribute/${category_id}/attributes`);
      const attributesMeta = attributesMetaRes.ok ? await attributesMetaRes.json() : [];
      const attributesMetaMap = new Map(attributesMeta.map((attr) => [attr.attribute_id, attr]));

      dynamicAttributeInputs.forEach((input) => {
        const attribute_id = parseInt(input.dataset.attributeId);
        const attrMeta = attributesMetaMap.get(attribute_id);

        if (!attrMeta) {
          return;
        }

        const valueType = attrMeta.value_type;
        let value = input.value.trim();
        let material_id = null;

        clearFieldError(input);

        if (valueType === "material_id") {
          material_id = value === "" ? null : parseInt(value);
          value = null;
        } else {
          if (valueType === "number") {
            value = value === "" ? null : parseFloat(value);
          } else {
            value = value === "" ? null : value;
          }
          material_id = null; // Đảm bảo material_id là null cho các kiểu text/number
        }

        if (attrMeta.is_required) {
          if (valueType === "material_id") {
            if (material_id === null) {
              showFieldError(input, `"${attrMeta.attribute_name}" là bắt buộc.`);
              hasAttributeErrors = true;
            }
          } else {
            if (value === null || value === "") {
              showFieldError(input, `"${attrMeta.attribute_name}" là bắt buộc.`);
              hasAttributeErrors = true;
            }
          }
        }

        if (valueType === "number" && value !== null && isNaN(value)) {
          showFieldError(input, `"${attrMeta.attribute_name}" phải là số hợp lệ.`);
          hasAttributeErrors = true;
        }

        attributes.push({
          attribute_id: attribute_id,
          value: value,
          material_id: material_id,
        });
      });

      if (hasAttributeErrors) {
        validationErrors.push("attributes");
      }

      let mainImageUrl = mainImagePreview?.src || null;
      if (mainImageUrl && mainImageUrl.startsWith("data:image/")) {
        try {
          const formData = new FormData();
          const resBlob = await fetch(mainImageUrl);
          const blob = await resBlob.blob();
          formData.append("image", blob, "main-image.png");
          formData.append("folder", "SonaSpace/Product");
          formData.append("subfolder", "main");
          const uploadRes = await fetch(`/api/upload/product`, {
            method: "POST",
            body: formData,
          });
          const uploadData = await uploadRes.json();
          if (uploadRes.ok && uploadData.url) {
            mainImageUrl = uploadData.url;
          } else {
            throw new Error(uploadData.error || "Upload ảnh chính thất bại.");
          }
        } catch (err) {
          showToast("Lỗi upload ảnh chính: " + err.message, "danger");
          validationErrors.push("main_image_upload_failed");
        }
      }
      if (!mainImageUrl) {
        showToast("Ảnh chính sản phẩm là bắt buộc.", "danger");
        mainImageUpload.classList.add("is-invalid");
        validationErrors.push("main_image_missing");
      } else {
        mainImageUpload.classList.remove("is-invalid");
      }

      const variantElements = document.querySelectorAll("#variantsList .variant-item");
      let hasVariantValidationErrors = false;
      const variantsData = [];

      for (const variantEl of variantElements) {
        let variantHasErrors = false;

        const colorSelect = variantEl.querySelector(".variant-color");
        const slugInput = variantEl.querySelector(".variant-slug");
        const quantityInput = variantEl.querySelector(".variant-quantity");
        const priceInput = variantEl.querySelector(".variant-price");
        const salePriceInput = variantEl.querySelector(".variant-sale-price");
        const imageGrid = variantEl.querySelector(".variant-image-grid");

        clearFieldError(colorSelect);
        clearFieldError(slugInput);
        clearFieldError(quantityInput);
        clearFieldError(priceInput);
        clearFieldError(salePriceInput);
        clearFieldError(imageGrid);

        const color_id = parseInt(colorSelect?.value);
        const variantSlug = slugInput?.value.trim();
        const quantity = parseInt(quantityInput?.value);
        const price = parseFloat(priceInput?.value);
        const price_sale = parseFloat(salePriceInput?.value);

        if (isNaN(color_id) || color_id === 0) {
          showFieldError(colorSelect, "Vui lòng chọn màu cho biến thể.");
          variantHasErrors = true;
        }

        if (isNaN(quantity) || quantity < 0) {
          showFieldError(quantityInput, "Số lượng phải là số không âm.");
          variantHasErrors = true;
        }
        if (isNaN(price) || price <= 0) {
          showFieldError(priceInput, "Vui lòng nhập giá bán.");
          variantHasErrors = true;
        }

        if (price_sale > price) {
          showFieldError(salePriceInput, "Giá khuyến mãi không được lớn hơn giá bán.");
          variantHasErrors = true;
        }

        const loadedImageBoxes = Array.from(variantEl.querySelectorAll(".variant-image-item.loaded"));
        if (loadedImageBoxes.length === 0) {
          showFieldError(imageGrid, "Cần ít nhất 1 ảnh cho biến thể.");
          variantHasErrors = true;
        }

        if (variantHasErrors) {
          hasVariantValidationErrors = true;
          const firstInvalidInVariant = variantEl.querySelector(".is-invalid");
          if (firstInvalidInVariant) {
            firstInvalidInVariant.scrollIntoView({ behavior: "smooth", block: "center" });
          }
        } else {
          let list_image_urls = [];
          for (const box of loadedImageBoxes) {
            const img = box.querySelector("img");
            const input = box.querySelector('input[type="file"]');
            if (!img) continue;

            const src = img.src;

            if (src.startsWith("data:image/") || (input && input.files && input.files.length > 0)) {
              const file = input.files[0];
              try {
                const uploadedUrl = await uploadVariantImageToServer(variantEl.getAttribute("data-id") || "temp_id", file);
                if (uploadedUrl) {
                  list_image_urls.push(uploadedUrl);
                  img.src = uploadedUrl;
                  input.value = "";
                } else {
                  variantHasErrors = true;
                  showFieldError(imageGrid, "Lỗi tải ảnh biến thể.");
                  hasVariantValidationErrors = true;
                }
              } catch (err) {
                showToast(`Lỗi tải ảnh cho biến thể: ${err.message}`, "danger");
                variantHasErrors = true;
                showFieldError(imageGrid, `Lỗi tải ảnh: ${err.message}`);
                hasVariantValidationErrors = true;
              }
            } else if (src.startsWith("http")) {
              list_image_urls.push(src);
            }
          }

          if (!variantHasErrors) {
            variantsData.push({
              variant_id: variantEl.getAttribute("data-id"),
              color_id,
              slug: variantSlug,
              quantity,
              price,
              price_sale,
              list_image: list_image_urls,
            });
          }
        }
      }

      if (hasVariantValidationErrors) {
        validationErrors.push("variants");
      }

      if (validationErrors.length > 0) {
        showToast("Vui lòng điền đầy đủ và chính xác các thông tin bắt buộc.", "danger");
        const firstInvalid = document.querySelector(".is-invalid");
        if (firstInvalid) {
          firstInvalid.scrollIntoView({ behavior: "smooth", block: "center" });
        }
        return;
      }

      if (removedImages.length > 0) {
        for (const publicId of removedImages) {
          try {
            const res = await fetch(`/api/upload/${publicId}`, {
              method: "DELETE",
            });
            if (!res.ok) {
              const result = await res.json();
            } else {
            }
          } catch (err) {
          }
        }
        removedImages = [];
      }

      const payload = {
        name: name,
        slug: slugValue,
        description: description,
        category_id: category_id,
        status: status,
        main_image: mainImageUrl,
        room_ids: room_ids,
        attributes: attributes,
      };
      const res = await fetch(`/api/products/admin/${slug}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });
      const result = await res.json();
      if (!res.ok) {
        if (result.errors && Array.isArray(result.errors)) {
          result.errors.forEach((err) => {
            const field = err.field;
            const message = err.message;

            if (field === "name") {
              showFieldError(productNameInput, message);
            } else if (field === "slug") {
              showFieldError(productSlugInput, message);
            } else if (field === "category_id") {
              showFieldError(productCategorySelect, message);
            } else if (field === "status") {
              showFieldError(productStatusSelect, message);
            } else if (field === "description") {
              showFieldError(productDescriptionTextarea, message);
            } else if (field === "room_ids") {
              showFieldError(productRoomsSelect, message);
            } else if (field === "main_image") {
              showToast(message, "danger");
              mainImageUpload.classList.add("is-invalid");
            } else if (field.startsWith("attributes[")) {
              const match = field.match(/attributes\[(\d+)\](?:\.(.+))?/);
              if (match) {
                const attributeId = parseInt(match[1], 10);
                const input = document.getElementById(`attr-${attributeId}`);
                if (input) {
                  showFieldError(input, message);
                } else {
                  showToast(`Lỗi thuộc tính ${attributeId}: ${message}`, "danger");
                }
              }
            } else if (field.startsWith("variants[")) {
              const match = field.match(/variants\[(\d+)\]\.(.+)/);
              if (match) {
                const index = parseInt(match[1], 10);
                const fieldName = match[2];

                const variantEl = document.querySelectorAll(
                  "#variantsList .variant-item"
                )[index];
                if (variantEl) {
                  let input;
                  if (fieldName === "slug") {
                    input = variantEl.querySelector(".variant-slug");
                  } else if (fieldName === "quantity") {
                    input = variantEl.querySelector(".variant-quantity");
                  } else if (fieldName === "price") {
                    input = variantEl.querySelector(".variant-price");
                  } else if (fieldName === "price_sale") {
                    input = variantEl.querySelector(".variant-sale-price");
                  } else if (fieldName === "color_id") {
                    input = variantEl.querySelector(".variant-color");
                  } else if (fieldName === "list_image") {
                    const imageGrid = variantEl.querySelector(".variant-image-grid");
                    if (imageGrid) {
                      showFieldError(imageGrid, message);
                    }
                    return;
                  }
                  if (input) {
                    showFieldError(input, message);
                  }
                }
              }
            }
          });
          const firstInvalid = document.querySelector(".is-invalid");
          if (firstInvalid) {
            firstInvalid.scrollIntoView({ behavior: "smooth", block: "center" });
          }
        }
        showToast(result.error || "Lỗi khi cập nhật sản phẩm.", "danger");
        return;
      }

      showToast("Cập nhật thông tin sản phẩm thành công!", "success");

      const productId =
        result.product?.id || result.product?.product_id || result.product_id;

      const currentVariantIdsInDom = new Set(
        Array.from(variantElements)
          .map((el) => el.getAttribute("data-id"))
          .filter((id) => id && id !== "new")
      );

      const allVariantIdsLoadedBefore = Array.from(document.querySelectorAll("#variantsList .variant-item[data-id]"))
        .map(el => el.getAttribute("data-id"))
        .filter(id => id && id !== "new");

      const deletedIds = allVariantIdsLoadedBefore.filter(
        (id) => !currentVariantIdsInDom.has(id)
      );

      for (const delId of deletedIds) {
        if (delId) {
          await deleteVariant(delId);
        }
      }

      let allVariantsProcessedSuccessfully = true;

      for (const variantPayload of variantsData) {
        let variantId = variantPayload.variant_id;

        if (variantId && variantId !== "new") {
          const variantUpdateResult = await updateVariant(variantId, variantPayload);
          if (!variantUpdateResult) {
            allVariantsProcessedSuccessfully = false;
          }
        } else {
          const created = await addVariant(productId, variantPayload);
          if (!created || !created.variant_id) {
            allVariantsProcessedSuccessfully = false;
          } else {
            const variantEl = Array.from(document.querySelectorAll("#variantsList .variant-item[data-id='new']")).find(el => {
              const color_id_dom = parseInt(el.querySelector(".variant-color")?.value);
              const slug_dom = el.querySelector(".variant-slug")?.value.trim();
              return color_id_dom === variantPayload.color_id && slug_dom === variantPayload.slug;
            });
            if (variantEl) {
              variantEl.setAttribute("data-id", created.variant_id);
            }
          }
        }
      }

      if (allVariantsProcessedSuccessfully) {
        showToast("Tất cả biến thể đã được cập nhật thành công!", "success");
      } else {
        showToast(
          "Có lỗi xảy ra khi cập nhật một hoặc nhiều biến thể. Vui lòng kiểm tra lại.",
          "danger"
        );
      }

      // setTimeout(() => {
      //   window.location.href = "/dashboard/products";
      // }, 1500);
    } catch (err) {
      showToast("Lỗi khi lưu sản phẩm: " + err.message, "danger");
    } finally {
      saveButton.disabled = false;
      saveButton.textContent = originalButtonText;
      saveButton.classList.remove("btn-loading");
    }
  });

  async function updateVariant(variantId, data) {
    try {
      const res = await fetch(`/api/variants/${variantId}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(data),
      });

      const result = await res.json();
      if (!res.ok) {
        showToast("Cập nhật biến thể thất bại", "danger");
        return null;
      }
      return result;
    } catch (err) {
      showToast("Lỗi kết nối khi cập nhật biến thể", "danger");
      return null;
    }
  }

  async function addVariant(productId, data) {
    try {
      const res = await fetch(`/api/variants/${productId}`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(data),
      });

      const result = await res.json();
      if (!res.ok) {
        showToast("Tạo biến thể thất bại", "danger");
        return null;
      }
      return result;
    } catch (err) {
      showToast("Lỗi kết nối khi tạo biến thể", "danger");
      return null;
    }
  }

  document
    .querySelector(".btn-add-variant")
    .addEventListener("click", async function () {
      const newVariant = variantTemplate.cloneNode(true);
      newVariant.style.display = "block";
      newVariant.removeAttribute("id");
      newVariant.setAttribute("data-id", "new");
      newVariant.classList.add("variant-item");

      const colorSelect = newVariant.querySelector(".variant-color");
      colorSelect.innerHTML = '<option value="">Chọn màu</option>' + globalColors
        .map(
          (color) =>
            `<option value="${color.color_id}">${color.color_name}</option>`
        )
        .join("");

      setupVariantEvents(newVariant);
      variantsList.appendChild(newVariant);
      showToast("Đã thêm một biến thể mới.", "success");
      newVariant.scrollIntoView({ behavior: "smooth", block: "center" });
    });

  function setupVariantEvents(variantElement) {
    variantElement
      .querySelector(".btn-toggle-variant")
      ?.addEventListener("click", function () {
        const content = variantElement.querySelector(".variant-content");
        const icon = this.querySelector("i");
        if (content.style.display === "none") {
          content.style.display = "block";
          icon.classList.replace("fa-chevron-down", "fa-chevron-up");
        } else {
          content.style.display = "none";
          icon.classList.replace("fa-chevron-up", "fa-chevron-down");
        }
      });
    variantElement.querySelectorAll("input, select").forEach((input) => {
      input.addEventListener("input", () => clearFieldError(input));
      input.addEventListener("change", () => clearFieldError(input));
    });

    variantElement
      .querySelector(".btn-remove-variant")
      ?.addEventListener("click", async function () {
        if (confirm("Bạn có chắc muốn xóa biến thể này?")) {
          const variantId = variantElement.getAttribute("data-id");

          if (variantId && variantId !== "new") {
            const success = await deleteVariant(variantId);
            if (!success) {
              return;
            }
          }
          variantElement.remove();
          showToast("Đã xóa biến thể.", "info");
        }
      });

    const colorSelect = variantElement.querySelector(".variant-color");
    const slugInput = variantElement.querySelector(".variant-slug");
    if (colorSelect && slugInput) {
      colorSelect.addEventListener("change", () => {
        const selectedOption = colorSelect.options[colorSelect.selectedIndex];
        const colorName = selectedOption?.textContent?.trim() || "";

        if (colorName) {
          slugInput.value = colorName
            .toLowerCase()
            .normalize("NFD")
            .replace(/[\u0300-\u036f]/g, "")
            .replace(/[đĐ]/g, "d")
            .replace(/[^a-z0-9\s-]/g, "")
            .replace(/\s+/g, "-")
            .replace(/-+/g, "-")
            .replace(/^-+|-+$/g, "");
        } else {
          slugInput.value = "";
        }
        clearFieldError(slugInput);
      });
    }

    setupVariantImageUpload(variantElement);

    const content = variantElement.querySelector(".variant-content");
    if (content) content.style.display = "block";
  }

  async function uploadVariantImageToServer(variantId, file) {
    const formData = new FormData();
    formData.append("image", file);
    formData.append("folder", "SonaSpace/Product");
    formData.append("subfolder", "variant");

    try {
      const token = localStorage.getItem("token");
      const headers = {};
      if (token) {
        headers["Authorization"] = `Bearer ${token}`;
      }

      const res = await fetch(`/api/upload/product`, {
        method: "POST",
        headers: headers,
        body: formData,
      });

      const result = await res.json();
      if (!res.ok || !result.url) {
        showToast("Lỗi upload ảnh: " + (result.error || "Không rõ"), "danger");
        return null;
      }

      return result.url;
    } catch (error) {
      showToast("Lỗi kết nối khi upload ảnh", "danger");
      return null;
    }
  }

  function showToast(message, type = "success") {
    let toastContainer = document.getElementById("toastContainer");
    if (!toastContainer) {
      toastContainer = document.createElement("div");
      toastContainer.id = "toastContainer";
      toastContainer.className = "position-fixed top-0 end-0 p-3";
      toastContainer.style.zIndex = "1050";
      document.body.appendChild(toastContainer);
    }

    const toast = document.createElement("div");
    toast.className = `toast align-items-center text-white bg-${type} border-0`;
    toast.setAttribute("role", "alert");
    toast.setAttribute("aria-live", "assertive");
    toast.setAttribute("aria-atomic", "true");

    toast.innerHTML = `
        <div class="d-flex">
          <div class="toast-body">${message}</div>
          <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
        </div>
      `;

    toastContainer.appendChild(toast);
    const bsToast = new bootstrap.Toast(toast, { delay: 3000 });
    bsToast.show();

    toast.addEventListener("hidden.bs.toast", () => toast.remove());
  }

  document
    .querySelector(".btn-cancel")
    .addEventListener("click", function () {
      window.location.href = "/dashboard/products";
    });
</script>