<!-- Trang Quản lý Sản phẩm -->

<!-- Tiêu đề và Thanh công cụ -->
<div class="dashboard-header-row">
  <h2 class="dashboard-title">Sản phẩm</h2>
  <div class="action-buttons">
    <button class="add-product-btn" onclick="window.location.href='/dashboard/products/add'">
      <i class="fas fa-plus"></i> Thêm sản phẩm
    </button>
  </div>
</div>
<!-- <div class="stats-container">
  <div class="stat-card">
    <div class="stat-card-title-product">Sản phảm bán chạy</div>
    <div class="stat-card-row">
      <a href="http://localhost:3501/dashboard/products/edit/ban-lam-viec-cupertino" class="stat-card-value-product ">
        Bàn làm việc Cupertino
      </a>

      <span class="green">Luợt mua 30 </span>
    </div>

    <div class="stat-card-row">
      <a href="http://localhost:3501/dashboard/products/edit/ban-lam-viec-cupertino" class="stat-card-value-product ">
        Đèn bàn Stockholm
      </a>
      <span class="green">Luợt mua 25 </span>
    </div>
    <div class="stat-card-row">
      <a href="http://localhost:3501/dashboard/products/edit/ban-lam-viec-cupertino" class="stat-card-value-product ">
        Sofa Amsterdam
      </a>
      <span class="green">Luợt mua 20 </span>

    </div>
    <div class="stat-card-row">
      <a href="http://localhost:3501/dashboard/products/edit/ban-lam-viec-cupertino" class="stat-card-value-product ">
        Tủ Calgary có ngăn kéo
      </a>
      <span class="green">Luợt mua 20 </span>

    </div>

  </div>
  <div class="stat-card">
    <div class="stat-card-title-product">Sản phẩm có lượt mua thấp</div>
    <div class="stat-card-row">
      <a href="http://localhost:3501/dashboard/products/edit/ban-lam-viec-cupertino" class="stat-card-value-product ">
        Modena 2.5 chỗ
      </a>
      <span class="red">Luợt mua 1 </span>
    </div>
    <div class="stat-card-row">
      <a href="http://localhost:3501/dashboard/products/edit/ban-lam-viec-cupertino" class="stat-card-value-product ">
        Bình mưa
      </a>
      <span class="red">Luợt mua 1 </span>
    </div>
    <div class="stat-card-row">
      <a href="http://localhost:3501/dashboard/products/edit/ban-lam-viec-cupertino" class="stat-card-value-product ">
        Sofa Amsterdam

      </a>
      <span class="red">Luợt mua 2 </span>
    </div>
  </div>
  <div class="stat-card">
    <div class="stat-card-title-product">Sản phẩm sắp hết hàng</div>
    <div class="stat-card-row">
      <a href="http://localhost:3501/dashboard/products/edit/ban-lam-viec-cupertino" class="stat-card-value-product ">
        Tủ đựng đồ Fermo
      </a>
      <span class="yellow">Tồn kho 5 </span>
    </div>
    <div class="stat-card-row">
      <a href="http://localhost:3501/dashboard/products/edit/ban-lam-viec-cupertino" class="stat-card-value-product ">
        Tủ quần áo đôi Lugano
      </a>
      <span class="yellow">Tồn kho 6 </span>
    </div>

  </div>
  <div class="stat-card">
    <div class="stat-card-title-product">Sản phẩm hết hàng</div>
    <div class="stat-card-row">
      <a href="http://localhost:3501/dashboard/products/edit/ban-lam-viec-cupertino" class="stat-card-value-product ">
        Đèn bàn Stockholm
      </a>
      <span class="red">Hết hàng </span>
    </div>
    <div class="stat-card-row">
      <a href="http://localhost:3501/dashboard/products/edit/ban-lam-viec-cupertino" class="stat-card-value-product ">
        Đèn mặt dây chuyền mái chèo
      </a>
      <span class="red">Hết hàng </span>
    </div>

  </div>
  <div class="stat-card">
    <div class="stat-card-title-product">Sản phẩm tồn kho lâu ngày</div>
    <div id="cancelled-order" class="stat-card-value red">--</div>
  </div>
</div> -->
<!-- Bộ lọc và Tìm kiếm -->
<div class="filter-row">
  <div class="search-container">
    <i class="fas fa-search search-icon"></i>
    <input type="text" class="search-input" placeholder="Search" />
  </div>
  <!-- <div class="date-range">
    <i class="far fa-calendar-alt"></i>
    <span>1/05/2025 - 31/5/2025</span>
  </div> -->
  <div class="results-info">Hiển thị 1-6 trong tổng số 500</div>
</div>

<!-- Bảng và Checkbox -->
<!-- <div class="product-controls">
  <label class="select-all">
    <input type="checkbox" id="selectAll" />
    <span>Sản phẩm</span>
  </label>

  <div class="product-filters">
    <div class="filter-dropdown">
      <button class="filter-btn">
        Danh mục <i class="fas fa-chevron-down"></i>
      </button>
    </div>
    <div class="filter-dropdown">
      <button class="filter-btn">
        Giá <i class="fas fa-chevron-down"></i>
      </button>
    </div>
    <div class="filter-dropdown">
      <button class="filter-btn">
        Số lượng <i class="fas fa-chevron-down"></i>
      </button>
    </div>
    <div class="filter-dropdown">
      <button class="filter-btn">
        Đã bán <i class="fas fa-chevron-down"></i>
      </button>
    </div>
    <div class="filter-dropdown">
      <button class="filter-btn">
        Đánh giá <i class="fas fa-chevron-down"></i>
      </button>
    </div>
    <div class="filter-dropdown">
      <button class="filter-btn">
        Lượt xem <i class="fas fa-chevron-down"></i>
      </button>
    </div>
    <div class="filter-dropdown">
      <button class="filter-btn">
        Trạng thái <i class="fas fa-chevron-down"></i>
      </button>
    </div>
    <div class="filter-dropdown">
      <button class="filter-btn">
        Ngày tạo <i class="fas fa-chevron-down"></i>
      </button>
    </div>
    <div class="filter-dropdown">
      <button class="filter-btn">
        Ngày cập nhật <i class="fas fa-chevron-down"></i>
      </button>
    </div>
  </div>
</div> -->

<!-- Bảng Sản phẩm -->
<div class="product-table-container">
  <table class="product-table" id="productsTable">
    <thead>
      <tr>
        <th class="checkbox-cell">
          <input type="checkbox" />
        </th>
        <th class="filterable" data-column="product_name">
          Sản phẩm
        </th>
        <th class="filterable" data-column="category_name">
          Danh mục
          <div class="header-filter" id="categoryFilterHeader">
            <i class="fas fa-chevron-down filter-icon"></i>
            <div class="filter-dropdown" id="categoryFilterDropdown">
              <!-- Danh mục sẽ được render bằng JS -->
              <a class="filter-item" href="#" data-filter-value="all">Tất cả</a>
            </div>
          </div>
        </th>
        <th class="filterable" data-column="price">
          Giá
          <div class="header-filter">
            <i class="fas fa-chevron-down filter-icon"></i>
            <div class="filter-dropdown">
              <a class="filter-item" href="#" data-sort-order="desc">Từ cao đến thấp</a>
              <a class="filter-item" href="#" data-sort-order="asc">Từ thấp đến cao</a>
              <a class="filter-item" href="#" data-filter-value="all">Tất cả</a>
            </div>
          </div>
        </th>
        <th class="filterable" data-column="total_quantity">
          Số lượng
          <div class="header-filter">
            <i class="fas fa-chevron-down filter-icon"></i>
            <div class="filter-dropdown">
              <a class="filter-item" href="#" data-sort-order="desc">Từ cao đến thấp</a>
              <a class="filter-item" href="#" data-sort-order="asc">Từ thấp đến cao</a>
              <a class="filter-item" href="#" data-filter-value="all">Tất cả</a>
            </div>
          </div>
        </th>
        <th class="filterable" data-column="product_sold">
          Đã bán
          <div class="header-filter">
            <i class="fas fa-chevron-down filter-icon"></i>
            <div class="filter-dropdown">
              <a class="filter-item" href="#" data-sort-order="desc">Từ cao đến thấp</a>
              <a class="filter-item" href="#" data-sort-order="asc">Từ thấp đến cao</a>
              <a class="filter-item" href="#" data-filter-value="all">Tất cả</a>
            </div>
          </div>
        </th>
        <th class="filterable" data-column="comment_count">
          Đánh giá
          <div class="header-filter">
            <i class="fas fa-chevron-down filter-icon"></i>
            <div class="filter-dropdown">
              <a class="filter-item" href="#" data-sort-order="desc">Từ cao đến thấp</a>
              <a class="filter-item" href="#" data-sort-order="asc">Từ thấp đến cao</a>
              <a class="filter-item" href="#" data-filter-value="all">Tất cả</a>
            </div>
          </div>
        </th>
        <th class="filterable" data-column="product_view">
          Lượt xem
          <div class="header-filter">
            <i class="fas fa-chevron-down filter-icon"></i>
            <div class="filter-dropdown">
              <a class="filter-item" href="#" data-sort-order="desc">Từ cao đến thấp</a>
              <a class="filter-item" href="#" data-sort-order="asc">Từ thấp đến cao</a>
              <a class="filter-item" href="#" data-filter-value="all">Tất cả</a>
            </div>
          </div>
        </th>
        <th class="filterable" data-column="product_status">
          Trạng thái
          <div class="header-filter">
            <i class="fas fa-chevron-down filter-icon"></i>
            <div class="filter-dropdown">
              <a class="filter-item" href="#" data-filter-value="true">Hiển thị</a>
              <a class="filter-item" href="#" data-filter-value="false">Ẩn</a>
              <a class="filter-item" href="#" data-filter-value="all">Tất cả</a>
            </div>
          </div>
        </th>
        <th class="filterable" data-column="product_priority">
          Thứ tự
          <div class="header-filter">
            <i class="fas fa-chevron-down filter-icon"></i>
            <div class="filter-dropdown">
              <a class="filter-item" href="#" data-sort-order="desc">Từ cao đến thấp</a>
              <a class="filter-item" href="#" data-sort-order="asc">Từ thấp đến cao</a>
              <a class="filter-item" href="#" data-filter-value="all">Tất cả</a>
            </div>
          </div>
        </th>
        <th class="filterable" data-column="created_at">
          Ngày tạo
          <div class="header-filter">
            <i class="fas fa-chevron-down filter-icon"></i>
            <div class="filter-dropdown">
              <a class="filter-item" href="#" data-sort-order="desc">Mới nhất</a>
              <a class="filter-item" href="#" data-sort-order="asc">Cũ nhất</a>
              <a class="filter-item" href="#" data-filter-value="all">Tất cả</a>
            </div>
          </div>
        </th>
        <th class="filterable" data-column="updated_at">
          Ngày cập nhật
          <div class="header-filter">
            <i class="fas fa-chevron-down filter-icon"></i>
            <div class="filter-dropdown">
              <a class="filter-item" href="#" data-sort-order="desc">Mới nhất</a>
              <a class="filter-item" href="#" data-sort-order="asc">Cũ nhất</a>
              <a class="filter-item" href="#" data-filter-value="all">Tất cả</a>
            </div>
          </div>
        </th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <!-- Sản phẩm 1 -->
      <tr>
        <td class="checkbox-cell">
          <input type="checkbox" />
        </td>
        <td>
          <div class="product-info">
            <div class="product-image">
              <img src="/images/products/modena-armchair.jpg" alt="Modena armchair" />
            </div>
            <div class="product-name">
              <a href="#">Modena armchair</a>
            </div>
          </div>
        </td>
        <td>Sofas</td>
        <td>
          <div class="product-price">
            <div class="original-price">15.500.000</div>
            <div class="sale-price">15.000.000</div>
          </div>
        </td>
        <td>20</td>
        <td>10</td>
        <td>3 lượt</td>
        <td>20</td>
        <td>
          <span class="status-indicator visible">
            <i class="fas fa-circle"></i> Hiển thị
          </span>
        </td>
        <td>20</td>
        <td>30-10-2025</td>
        <td>30-10-2025</td>
        <td>
          <div class="action-cell">
            <button class="action-button edit" data-id="1" title="Chỉnh sửa">
              <i class="fas fa-edit"></i>
            </button>
            <button class="action-button visibility" data-id="1" data-status="visible" title="Ẩn sản phẩm">
              <i class="fas fa-eye-slash"></i>
            </button>
            <button class="action-button delete" data-id="1" data-name="Modena armchair" title="Xóa sản phẩm">
              <i class="fas fa-trash"></i>
            </button>
          </div>
        </td>
      </tr>

      <!-- Sản phẩm 2 -->
      <tr>
        <td class="checkbox-cell">
          <input type="checkbox" />
        </td>
        <td>
          <div class="product-info">
            <div class="product-image">
              <img src="/images/products/modena-armchair.jpg" alt="Modena armchair" />
            </div>
            <div class="product-name">
              <a href="#">Modena armchair</a>
            </div>
          </div>
        </td>
        <td>Sofas</td>
        <td>
          <div class="product-price">
            <div class="original-price">15.500.000</div>
            <div class="sale-price">15.000.000</div>
          </div>
        </td>
        <td>20</td>
        <td>10</td>
        <td>3 lượt</td>
        <td>20</td>
        <td>
          <span class="status-indicator visible">
            <i class="fas fa-circle"></i> Hiển thị
          </span>
        </td>
        <td>20</td>
        <td>30-10-2025</td>
        <td>30-10-2025</td>
        <td>
          <div class="action-cell">
            <button class="action-button edit" data-id="2" title="Chỉnh sửa">
              <i class="fas fa-edit"></i>
            </button>
            <button class="action-button visibility" data-id="2" data-status="visible" title="Ẩn sản phẩm">
              <i class="fas fa-eye-slash"></i>
            </button>
            <button class="action-button delete" data-id="2" data-name="Modena armchair" title="Xóa sản phẩm">
              <i class="fas fa-trash"></i>
            </button>
          </div>
        </td>
      </tr>
    </tbody>
  </table>
</div>

<!-- Confirmation Modal -->
<div id="confirmationModal" class="modal-overlay" style="display: none;">
  <div class="modal-content">
    <h3>Xác nhận thao tác sản phẩm</h3>
    <p id="modalMessage"></p>
    <div class="modal-actions">
      <button id="confirmActionBtn" class="btn btn-confirm">Có</button>
      <button id="cancelActionBtn" class="btn btn-cancel">Không</button>
    </div>
  </div>
</div>

<style>
  .product-price {
    display: flex;
    flex-direction: column;
    gap: 4px;
  }

  .product-price .original-price {
    text-decoration: none;
    color: #333;
    font-weight: 500;
  }

  .product-price.has-sale .original-price {
    text-decoration: line-through;
    color: #888;
    font-weight: normal;
  }

  .product-price .sale-price {
    color: #e53935;
    font-weight: 600;
  }

  /* Filter dropdown styles */
  .header-filter {
    position: relative;
    display: inline-block;
    margin-left: 8px;
  }

  .filter-icon {
    cursor: pointer;
    color: #666;
    font-size: 12px;
    transition: color 0.2s;
  }

  .filter-icon:hover {
    color: #333;
  }

  .header-filter.active .filter-icon {
    color: #007bff;
  }

  .filter-dropdown {
    position: absolute;
    top: 100%;
    left: 0;
    background: white;
    border: 1px solid #ddd;
    border-radius: 4px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    z-index: 1000;
    min-width: 150px;
    display: none;
    padding: 4px 0;
  }

  .header-filter.active .filter-dropdown {
    display: block;
  }

  .filter-item {
    display: block;
    padding: 8px 12px;
    color: #333;
    text-decoration: none;
    font-size: 14px;
    transition: background-color 0.2s;
  }

  .filter-item:hover {
    background-color: #f8f9fa;
    color: #007bff;
  }

  .filter-item:first-child {
    border-top-left-radius: 4px;
    border-top-right-radius: 4px;
  }

  .filter-item:last-child {
    border-bottom-left-radius: 4px;
    border-bottom-right-radius: 4px;
  }

  /* Modal styles */
  .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;

    transition: opacity 0.3s ease;
  }

  .modal-overlay.active {
    opacity: 1;
  }

  .modal-content {
    background: white;
    padding: 30px;
    border-radius: 8px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
    max-width: 400px;
    width: 90%;
    text-align: center;
    transform: scale(0.7);
    transition: transform 0.3s ease;
  }

  .modal-overlay.active .modal-content {
    transform: scale(1);
  }

  .modal-content h3 {
    margin: 0 0 15px 0;
    color: #333;
    font-size: 18px;
  }

  .modal-content p {
    margin: 0 0 25px 0;
    color: #666;
    line-height: 1.5;
  }

  .modal-actions {
    display: flex;
    gap: 10px;
    justify-content: center;
  }

  .modal-actions .btn {
    padding: 10px 20px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-weight: 500;
    transition: background-color 0.2s;
  }

  .btn-confirm {
    background-color: #dc3545;
    color: white;
  }

  .btn-confirm:hover {
    background-color: #c82333;
  }

  .btn-cancel {
    background-color: #6c757d;
    color: white;
  }

  .btn-cancel:hover {
    background-color: #5a6268;
  }
</style>

<!-- Load Products JS -->
<script>
  let allProducts = []; // Stores the original fetched product data
  let currentFilteredProducts = []; // Stores products after filtering (for search/dropdown filters)
  let currentSortColumn = null;
  let currentSortDirection = 'asc'; // 'asc' or 'desc'

  document.addEventListener("DOMContentLoaded", function () {

    // --- Event Listeners for Filters and Sorts ---

    // Header filter dropdown toggle
    document.querySelectorAll('.header-filter').forEach(filter => {
      filter.addEventListener('click', function (e) {
        e.preventDefault();
        e.stopPropagation();

        this.classList.toggle('active');

        document.querySelectorAll('.header-filter').forEach(otherFilter => {
          if (otherFilter !== this) {
            otherFilter.classList.remove('active');
          }
        });
      });
    });

    // Filter/Sort options within dropdowns
    document.querySelectorAll('.filter-dropdown .filter-item').forEach(item => {
      item.addEventListener('click', function (e) {
        e.preventDefault();
        e.stopPropagation();

        const th = this.closest('th');
        const columnDataName = th.getAttribute('data-column');
        const filterValue = this.getAttribute('data-filter-value');
        const sortOrder = this.getAttribute('data-sort-order');

        if (sortOrder) {
          sortProducts(columnDataName, sortOrder);
        } else if (filterValue) {
          filterProducts(columnDataName, filterValue);
        }

        // Close dropdown after selection
        this.closest('.header-filter').classList.remove('active');
      });
    });

    // Close all dropdowns when clicking outside
    document.addEventListener('click', function () {
      document.querySelectorAll('.header-filter').forEach(filter => {
        filter.classList.remove('active');
      });
    });

    // Search input filtering
    const searchInput = document.querySelector(".search-input");
    if (searchInput) {
      searchInput.addEventListener("input", function () {
        const searchTerm = this.value.toLowerCase();
        filterProductsBySearch(searchTerm);
      });
    }

    // Lấy danh sách danh mục từ API và render filter
    async function loadCategoryFilter() {
      try {
        const response = await fetch('/api/categories/filter/');
        const categories = await response.json();

        const dropdown = document.getElementById('categoryFilterDropdown');
        if (!dropdown) return;

        // Xóa các filter-item cũ (trừ "Tất cả")
        dropdown.querySelectorAll('.filter-item:not([data-filter-value="all"])').forEach(e => e.remove());

        // Thêm các danh mục từ API
        categories.forEach(cat => {
          const a = document.createElement('a');
          a.className = 'filter-item';
          a.href = '#';
          a.setAttribute('data-filter-value', cat.category_name);
          a.textContent = cat.category_name;

          // Thêm event listener trực tiếp
          a.addEventListener('click', function (e) {
            e.preventDefault();
            e.stopPropagation();
            const value = this.getAttribute('data-filter-value');
            filterProducts('category_name', value);
            document.getElementById('categoryFilterHeader').classList.remove('active');
          });

          dropdown.appendChild(a);
        });
      } catch (error) {
      }
    }

    // Sau khi fetch xong sản phẩm:
    function getProducts() {
      fetch("/api/products/admin")
        .then((response) => response.json())
        .then((products) => {
          if (!Array.isArray(products)) {
            document.querySelector(".results-info").textContent =
              "Lỗi định dạng dữ liệu.";
            return;
          }
          allProducts = products;
          currentFilteredProducts = [...allProducts];
          renderProducts(products);
        })
        .catch((error) => {
          document.querySelector(".results-info").textContent =
            "Không thể tải dữ liệu.";
        });
    }

    function formatPrice(price) {
      return new Intl.NumberFormat("vi-VN").format(parseFloat(price));
    }

    function formatDate(dateStr) {
      if (!dateStr) return "-";
      return new Date(dateStr).toLocaleDateString("vi-VN");
    }

    function renderProducts(productsToRender) {
      const tableBody = document.querySelector("#productsTable tbody");
      tableBody.innerHTML = "";

      if (productsToRender.length === 0) {
        tableBody.innerHTML = '<tr><td colspan="13" style="text-align: center; padding: 20px;">Không tìm thấy sản phẩm nào.</td></tr>';
        return;
      }

      productsToRender.forEach((product) => {
        const row = document.createElement("tr");
        // Kiểm tra giá sale
        const price = parseFloat(product.price || 0);
        const priceSale =
          product.price_sale && !isNaN(product.price_sale)
            ? parseFloat(product.price_sale)
            : null;
        const hasSale =
          priceSale !== null && priceSale > 0 && priceSale < price;

        row.innerHTML = `
                    <td class="checkbox-cell">
                        <input type="checkbox">
                    </td>
                    <td>
                        <div class="product-info">
                            <div class="product-image">
                                <img src="${product.product_image ||
          "/images/products/default.jpg"
          }" alt="${product.product_name}">
                            </div>
                            <div class="product-name">
                                <a href="#">${product.product_name}</a>
                            </div>
                        </div>
                    </td>
                    <td>${product.category_name || "-"}</td>
                  <td>
  <div class="product-price ${hasSale ? "has-sale" : ""}">
    <div class="original-price">${formatPrice(price)}đ</div>
    ${hasSale ? `<div class="sale-price">${formatPrice(priceSale)}đ</div>` : ""}
  </div>
</td>
                    <td>${product.total_quantity || 0}</td>
                    <td>${product.product_sold || 0}</td>
                    <td>${product.comment_count || 0} lượt</td>
                    <td>${product.product_view || 0}</td>
                    <td>
                        <span class="status-indicator ${product.product_status ? "visible" : "hidden"
          }">
                            <i class="fas fa-circle"></i> ${product.product_status ? "Hiển thị" : "Ẩn"
          }
                        </span>
                    </td>
                    <td>${product.product_priority || 0}</td>
                    <td>${formatDate(product.created_at)}</td>
                    <td>${formatDate(product.updated_at)}</td>
                    <td>
                        <div class="action-cell">
                            <button class="action-button edit" data-id="${product.product_slug
          }" title="Chỉnh sửa">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="action-button visibility" 
                                data-id="${product.product_id}" 
                                data-name="${product.product_name}"
                                data-status="${product.product_status ? "visible" : "hidden"
          }" 
                                title="${product.product_status
            ? "Ẩn sản phẩm"
            : "Hiển thị sản phẩm"
          }">
                                <i class="fas fa-eye${product.product_status ? "-slash" : ""
          }"></i>
                            </button>
                            <button class="action-button delete" 
                                data-id="${product.product_slug}" 
                                data-name="${product.product_name}"
                                title="Xóa sản phẩm">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </td>
                `;
        tableBody.appendChild(row);
      });

      // Update results info
      document.querySelector(
        ".results-info"
      ).textContent = `Hiển thị ${productsToRender.length} sản phẩm`;

      // Add event listeners for action buttons
      setupActionButtons();
    }

    // Function to sort products
    function sortProducts(columnDataName, sortOrder) {
      let productsToSort = [...currentFilteredProducts];

      productsToSort.sort((a, b) => {
        let valA, valB;

        switch (columnDataName) {
          case 'product_name':
          case 'category_name':
            valA = (a[columnDataName] || '').toLowerCase();
            valB = (b[columnDataName] || '').toLowerCase();
            return sortOrder === 'asc' ? valA.localeCompare(valB, 'vi') : valB.localeCompare(valA, 'vi');
          case 'price':
          case 'total_quantity':
          case 'product_sold':
          case 'comment_count':
          case 'product_view':
          case 'product_priority':
            valA = parseFloat(a[columnDataName] || 0);
            valB = parseFloat(b[columnDataName] || 0);
            return sortOrder === 'asc' ? valA - valB : valB - valA;
          case 'created_at':
          case 'updated_at':
            valA = (a[columnDataName] && a[columnDataName] !== '0000-00-00 00:00:00') ? new Date(a[columnDataName]).getTime() : 0;
            valB = (b[columnDataName] && b[columnDataName] !== '0000-00-00 00:00:00') ? new Date(b[columnDataName]).getTime() : 0;
            return sortOrder === 'asc' ? valA - valB : valB - valA;
          case 'product_status':
            valA = a[columnDataName] ? 1 : 0;
            valB = b[columnDataName] ? 1 : 0;
            return sortOrder === 'asc' ? valA - valB : valB - valA;
          default:
            return 0;
        }
      });

      renderProducts(productsToSort);
    }

    // Function to filter products
    function filterProducts(columnDataName, filterValue) {
      let filteredData = [...allProducts];

      if (filterValue !== 'all') {
        filteredData = filteredData.filter(product => {
          if (columnDataName === 'product_status') {
            return Boolean(product.product_status) === (filterValue === 'true');
          }

          const productValue = String(product[columnDataName] || "").toLowerCase();
          const filterValueLower = String(filterValue).toLowerCase();
          return productValue === filterValueLower;
        });
      }

      currentFilteredProducts = filteredData;
      renderProducts(currentFilteredProducts);
    }

    // Function to filter products based on search input
    function filterProductsBySearch(searchTerm) {
      const filteredBySearch = allProducts.filter(product => {
        const name = (product.product_name || '').toLowerCase();
        const category = (product.category_name || '').toLowerCase();

        return name.includes(searchTerm) || category.includes(searchTerm);
      });
      currentFilteredProducts = filteredBySearch;
      renderProducts(currentFilteredProducts);
    }

    function setupActionButtons() {
      // Delete button handler
      document.querySelectorAll(".action-button.delete").forEach((btn) => {
        btn.addEventListener("click", () => {
          const productSlug = btn
            .closest("tr")
            .querySelector(".action-button.edit")
            .getAttribute("data-id");
          const productName = btn.getAttribute("data-name");
          if (confirm(`Bạn có chắc chắn muốn xóa sản phẩm "${productName}"?`)) {
            deleteProduct(productSlug);
          }
        });
      });

      // Visibility toggle handler
      document.querySelectorAll(".action-button.visibility").forEach((btn) => {
        btn.addEventListener("click", () => {
          const productId = btn.getAttribute("data-id");
          const productName = btn.getAttribute("data-name");
          const currentStatus = btn.getAttribute("data-status");
          const isVisible = currentStatus === "visible";

          showConfirmationModal(productId, productName, isVisible);
        });
      });

      // Edit button handler
      document.querySelectorAll(".action-button.edit").forEach((btn) => {
        btn.addEventListener("click", () => {
          const productId = btn.getAttribute("data-id");
          window.location.href = `/dashboard/products/edit/${productId}`;
        });
      });
    }

    function deleteProduct(productSlug) {
      fetch(`/api/products/${productSlug}`, {
        method: "DELETE",
        headers: {
          Authorization: `Bearer ${localStorage.getItem("token")}`,
        },
      })
        .then((res) => res.json())
        .then((data) => {
          if (data.error) {
            showToast(data.error, "danger");
          } else if (data.message) {
            showToast(data.message, "success");
          }
          getProducts(); // Refresh danh sách
        })
        .catch((error) => {
          showToast("Có lỗi xảy ra khi xoá sản phẩm", "danger");
        });
    }

    function toggleProductVisibility(productId, currentlyVisible) {
      fetch(`/api/products/status/${productId}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${localStorage.getItem("token")}`,
        },
        body: JSON.stringify({
          product_status: currentlyVisible ? 0 : 1,
        }),
      })
        .then((response) => response.json())
        .then((data) => {
          if (data.error) {
            showToast(data.error, "danger");
          } else {
            showToast(`Cập nhật trạng thái sản phẩm thành công!`, "success");
            getProducts(); // Refresh the list
          }
        })
        .catch((error) => {
          showToast("Có lỗi xảy ra khi cập nhật trạng thái sản phẩm", "danger");
        });
    }

    // Initialize by loading products and categories
    getProducts();
    loadCategoryFilter();

    // --- Modal Logic ---
    let currentProductIdToModify = null;
    let currentProductNameToModify = null;
    let currentIsVisibleStatus = null;

    // Get modal elements
    const confirmationModal = document.getElementById('confirmationModal');
    const modalMessage = document.getElementById('modalMessage');
    const confirmActionBtn = document.getElementById('confirmActionBtn');
    const cancelActionBtn = document.getElementById('cancelActionBtn');

    // Function to show the confirmation modal
    function showConfirmationModal(productId, productName, isVisible) {
      currentProductIdToModify = productId;
      currentProductNameToModify = productName;
      currentIsVisibleStatus = isVisible;

      const actionText = isVisible ? "ẩn" : "hiển thị";
      modalMessage.textContent = `Bạn có chắc chắn muốn ${actionText} sản phẩm "${productName}" không?`;
      confirmActionBtn.textContent = `Có, ${actionText}`;
      // Reset classes and add appropriate one for styling
      confirmActionBtn.classList.remove('confirm', 'cancel');
      confirmActionBtn.classList.add(isVisible ? 'confirm' : 'cancel');

      confirmationModal.style.display = 'flex'; // Show modal
      setTimeout(() => confirmationModal.classList.add('active'), 10);
    }

    // Function to hide the confirmation modal
    function hideConfirmationModal() {
      confirmationModal.classList.remove('active');
      // Use a timeout to hide display after transition
      setTimeout(() => {
        confirmationModal.style.display = 'none';
        currentProductIdToModify = null;
        currentProductNameToModify = null;
        currentIsVisibleStatus = null;
      }, 300);
    }

    // Event listeners for modal buttons
    confirmActionBtn.addEventListener('click', async function () {
      if (currentProductIdToModify) {
        const shouldHide = currentIsVisibleStatus;
        await toggleProductVisibility(currentProductIdToModify, shouldHide);
      }
      hideConfirmationModal();
    });

    cancelActionBtn.addEventListener('click', hideConfirmationModal);

    // Debounce helper function
    function debounce(func, wait) {
      let timeout;
      return function executedFunction(...args) {
        const later = () => {
          clearTimeout(timeout);
          func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    }

    // Lắng nghe sự kiện click cho filter danh mục động
    document.addEventListener('click', function (e) {
      // Nếu không phải click vào filter-item, đóng tất cả dropdown
      if (!e.target.closest('.header-filter')) {
        document.querySelectorAll('.header-filter').forEach(filter => {
          filter.classList.remove('active');
        });
      }
    });
  });
</script>
<div id="toastContainer" class="position-fixed top-0 end-0 p-3" style="z-index:1050"></div>
<script>

  function showToast(message, type = "success") {
    let toastContainer = document.getElementById("toastContainer");
    if (!toastContainer) {
      toastContainer = document.createElement("div");
      toastContainer.id = "toastContainer";
      toastContainer.className = "position-fixed top-0 end-0 p-3";
      toastContainer.style.zIndex = "1050";
      document.body.appendChild(toastContainer);
    }

    const toast = document.createElement("div");
    toast.className = `toast align-items-center text-white bg-${type} border-0`;
    toast.setAttribute("role", "alert");
    toast.setAttribute("aria-live", "assertive");
    toast.setAttribute("aria-atomic", "true");

    toast.innerHTML = `
      <div class="d-flex">
        <div class="toast-body">${message}</div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
      </div>
    `;

    toastContainer.appendChild(toast);
    const bsToast = new bootstrap.Toast(toast, { delay: 3000 });
    bsToast.show();

    toast.addEventListener("hidden.bs.toast", () => toast.remove());
  }

</script>