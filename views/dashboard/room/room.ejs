<!-- Tiêu đề và Thanh công cụ -->
<div class="room_page">
  <div class="dashboard-header-row">
    <h2 class="dashboard-title">Không gian</h2>
    <div class="action-buttons">
      <button
        class="add-room-btn"
        onclick="window.location.href='/dashboard/addroom'"
      >
        <i class="fas fa-plus"></i> Thêm không gian mới
      </button>
    </div>
  </div>

  <!-- Bộ lọc và Tìm kiếm -->
  <div class="filter-row">
    <div class="search-container">
      <i class="fas fa-search search-icon"></i>
      <input
        onkeyup="filterRoomsBySearch(this.value)"
        type="text"
        class="search-input"
        placeholder="Tìm kiếm không gian..."
      />
    </div>
    <div class="results-info">Đang tải dữ liệu...</div>
  </div>

  <!-- Bảng Không gian -->
  <div class="room-table-container">
    <table class="room-table" id="roomsTable">
      <thead>
        <tr>
          <th>Không gian</th>
          <th>Sản phẩm</th>
          <th>Trạng thái</th>
          <th>Ngày tạo</th>
          <th>Ngày cập nhật</th>
          <th>Slug</th>
          <th>Thao tác</th>
        </tr>
      </thead>
      <tbody>
        <!-- Dữ liệu sẽ được JS đổ vào -->
      </tbody>
    </table>
  </div>
</div>
<script>
  let allRooms = [];
  let currentFilteredRooms = [];
  // --- Utility: bỏ dấu tiếng Việt + chuẩn hóa ---
  function normalizeText(str = "") {
    return String(str)
      .normalize("NFD")
      .replace(/[\u0300-\u036f]/g, "") // bỏ dấu
      .replace(/đ/g, "d")
      .replace(/Đ/g, "D")
      .toLowerCase()
      .trim();
  }

  // --- Utility: debounce để tránh lọc liên tục khi gõ ---
  function debounce(fn, delay = 250) {
    let t;
    return (...args) => {
      clearTimeout(t);
      t = setTimeout(() => fn.apply(this, args), delay);
    };
  }

  // Safe setter cho .results-info (nếu chưa có trong DOM thì tạo)
  function setResultsInfo(text) {
    let info = document.querySelector(".results-info");
    if (!info) {
      // chèn thêm dưới .filter-row nếu thiếu
      const holder = document.createElement("div");
      holder.className = "results-info";
      const filterRow = document.querySelector(".filter-row");
      if (filterRow) {
        filterRow.insertAdjacentElement("afterend", holder);
        info = holder;
      }
    }
    if (info) info.textContent = text;
  }

  // format ngày
  function formatDate(dateStr) {
    if (!dateStr) return "-";
    const d = new Date(dateStr);
    if (Number.isNaN(d.getTime())) return "-";
    return d.toLocaleDateString("vi-VN");
  }

  document.addEventListener("DOMContentLoaded", function () {
    function getRooms() {
      fetch("/api/rooms/admin")
        .then((response) => response.json())
        .then((data) => {
          allRooms = Array.isArray(data) ? data : [];
          currentFilteredRooms = [...allRooms];
          renderRooms(data);
          // 
        })
        .catch((error) => {
          // 
          setResultsInfo("Không thể tải dữ liệu.");
        });
    }

    function renderRooms(rooms) {
      const tableBody = document.querySelector("#roomsTable tbody");
      tableBody.innerHTML = "";

      rooms.forEach((room) => {
        const row = document.createElement("tr");

        // Gán mặc định nếu không có status
        const status = room.status === 1 ? "visible" : "hidden";

        row.innerHTML = `
            <td>
              <div class="room-info">
                <div class="room-image">
                  <img src="${room.room_image || "/images/default.jpg"}" alt="${
          room.room_name
        }">
                </div>
                <div class="room-name">${room.room_name}</div>
              </div>
            </td>
            <td>${room.product_count || 0}</td>
            <td>
              <span class="status-indicator ${
                status === "visible" ? "visible" : "hidden"
              }">
                <i class="fas ${
                  status === "visible" ? "fa-eye" : "fa-eye-slash"
                }"></i>
                ${status === "visible" ? "Hiển thị" : "Ẩn"}
              </span>
            </td>
            <td>${formatDate(room.created_at)}</td>
            <td>${formatDate(room.updated_at)}</td>
            <td>${room.slug || "-"}</td>
            <td>
              <div class="action-cell">
                <button class="action-button edit" data-id="${
                  room.slug
                }" onclick="window.location.href='/dashboard/editroom/${
          room.slug
        }'" title="Chỉnh sửa">
                  <i class="fas fa-edit"></i>
                </button>
                <button class="action-button visibility" data-slug="${
                  room.slug
                }" data-status="${status}" title="${
          status === "visible" ? "Ẩn không gian" : "Hiển thị không gian"
        }">
                  <i class="fas ${
                    status === "visible" ? "fa-eye-slash" : "fa-eye"
                  }"></i>
                </button>
                <button class="action-button delete" data-slug="${
                  room.slug
                }" data-name="${room.room_name}" title="Xóa không gian">
                  <i class="fas fa-trash"></i>
                </button>
              </div>
            </td>
          `;

        tableBody.appendChild(row);
      });

      document.querySelectorAll(".action-button.delete").forEach((btn) => {
        btn.addEventListener("click", () => {
          const roomSlug = btn.getAttribute("data-slug");
          const roomName = btn.getAttribute("data-name");
          deleteRoom(roomSlug, roomName);
        });
      });

      document.querySelectorAll(".action-button.visibility").forEach((btn) => {
        btn.addEventListener("click", () => {
          const roomSlug = btn.getAttribute("data-slug");
          const roomStatus = btn.getAttribute("data-status");
          changeStatus(roomSlug, roomStatus);
        });
      });

      setResultsInfo(`Hiển thị ${rooms.length} kết quả`);
    }
    // SEARCH
    window.filterRoomsBySearch = debounce(function (rawTerm) {
      const term = normalizeText(rawTerm);
      if (!term) {
        currentFilteredRooms = [...allRooms];
        renderRooms(currentFilteredRooms);
        return;
      }

      const filtered = allRooms.filter((r) => {
        const nameN = normalizeText(r.room_name);
        const slugN = normalizeText(r.slug);
        const status = r.status === 1 ? "visible" : "hidden";
        const statusN = normalizeText(status);

        const createdN = normalizeText(formatDate(r.created_at));
        const updatedN = normalizeText(formatDate(r.updated_at));
        const idN = normalizeText(r.room_id);

        return (
          nameN.includes(term) ||
          slugN.includes(term) ||
          statusN.includes(term) ||
          createdN.includes(term) ||
          updatedN.includes(term) ||
          idN.includes(term)
        );
      });

      currentFilteredRooms = filtered;
      renderRooms(currentFilteredRooms);
    }, 250);
    function changeStatus(roomSlug, roomStatus) {
      const token = localStorage.getItem("token");
      fetch(`/api/rooms/${roomSlug}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({ status: roomStatus === "visible" ? 0 : 1 }),
      })
        .then((res) => res.json())
        .then((data) => {
          if (data.error) {
            showToast(data.error, "danger");
          } else {
            showToast("Cập nhật trạng thái thành công", "success");
            setTimeout(() => location.reload(), 1500);
          }
        });
    }

    function deleteRoom(roomSlug, roomName) {
      showConfirm({
        message: `Bạn có chắc chắn muốn xóa không gian "${roomName}"?`,
        confirmText: "Xác nhận",
        cancelText: "Hủy",
        onConfirm: () => {
          fetch(`/api/rooms/${roomSlug}`, {
            method: "DELETE",
            headers: {
              Authorization: `Bearer ${localStorage.getItem("token")}`,
            },
          })
            .then((res) => res.json())
            .then((data) => {
              if (data.error) {
                showToast(data.error, "danger");
              } else {
                showToast("Xóa không gian thành công", "success");
                setTimeout(() => location.reload(), 1000);
              }
            })
            .catch((err) => {
              showToast("Xảy ra lỗi khi xóa không gian", "danger");
            });
        },
      });
    }

    getRooms();
  });

  function showConfirm({
    message = "Are you sure?",
    confirmText = "Xác nhận",
    cancelText = "Hủy",
    onConfirm = () => {},
    onCancel = () => {},
  } = {}) {
    let confirmPopup = document.getElementById("confirmPopup");
    if (confirmPopup) confirmPopup.remove(); // Remove old popup if exists

    // Create popup container
    confirmPopup = document.createElement("div");
    confirmPopup.id = "confirmPopup";
    confirmPopup.innerHTML = `
    <div class="confirm-dialog">
      <div class="confirm-message">${message}</div>
      <div class="confirm-actions">
        <button class="btn btn-confirm">${confirmText}</button>
        <button class="btn btn-cancel">${cancelText}</button>
      </div>
    </div>
    <div class="confirm-overlay"></div>
  `;

    document.body.appendChild(confirmPopup);

    // Add event listeners
    confirmPopup.querySelector(".btn-confirm").onclick = () => {
      confirmPopup.remove();
      onConfirm();
    };
    confirmPopup.querySelector(".btn-cancel").onclick = () => {
      confirmPopup.remove();
      onCancel();
    };
    // Click overlay to cancel
    confirmPopup.querySelector(".confirm-overlay").onclick = () => {
      confirmPopup.remove();
      onCancel();
    };
  }
</script>
