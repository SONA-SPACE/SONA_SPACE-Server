<div class="dashboard-header-row">
    <h2 class="dashboard-title">Cập nhật thông tin người dùng</h2>
</div>

<div class="add-room-container">
    <div class="room-form-column">
        <div class="form-section">
            <h3 class="section-title">Thông tin người dùng</h3>

            <div class="form-row">
                <div class="form-group">
                    <label for="userName">Tên người dùng</label>
                    <input type="text" id="userName" class="form-control" placeholder="Nhập tên người dùng" />
                </div>
                <div class="form-group">
                    <label for="userPhone">Số điện thoại</label>
                    <input type="text" id="userPhone" class="form-control" placeholder="Nhập số điện thoại" />
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label for="userBirth">Ngày sinh</label>
                    <input type="date" id="userBirth" class="form-control" placeholder="Nhập ngày sinh" />
                </div>
                <div class="form-group">
                    <label for="userRole">Quyền</label>
                    <div class="select-wrapper">
                        <select id="userRole" class="form-control">
                            <option value="user">User</option>
                            <option value="admin">Admin</option>
                            <option value="staff">Staff</option>
                        </select>
                        <i class="fas fa-chevron-down"></i>
                    </div>
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label for="userGender">Giới tính</label>
                    <input type="text" id="userGender" class="form-control" placeholder="Nhập giới tính" />
                </div>
                <div class="form-group">
                    <label for="userStatus">Trạng thái tài khoản</label>
                    <div class="select-wrapper">
                        <select id="userStatus" class="form-control">
                            <option value="active">Hoạt động</option>
                            <option value="disabled">Vô hiệu</option>
                        </select>
                        <i class="fas fa-chevron-down"></i>
                    </div>
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label for="userEmail">Email</label>
                    <input type="text" id="userEmail" class="form-control readonly-field" placeholder="Nhập email"
                        readonly />
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label for="userAddress">Địa chỉ</label>
                    <input type="text" id="userAddress" class="form-control" placeholder="Nhập địa chỉ" />
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label for="totalSuccessOrders">Tổng đơn hàng thành công</label>
                    <input type="text" id="totalSuccessOrders" class="form-control readonly-field"
                        placeholder="Số đơn hàng thành công" readonly />
                </div>
                <div class="form-group">
                    <label for="totalCancelledOrders">Tổng đơn hàng đã hủy</label>
                    <input type="text" id="totalCancelledOrders" class="form-control readonly-field"
                        placeholder="Số đơn hàng đã hủy" readonly />
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label for="userCategory">Loại khách hàng</label>
                    <div class="select-wrapper">
                        <select id="userCategory" class="form-control" disabled>
                            <option value="Khách hàng mới">Khách hàng mới</option>
                            <option value="Khách hàng cũ">Khách hàng cũ</option>
                        </select>
                        <i class="fas fa-chevron-down"></i>
                    </div>
                </div>
                <div class="form-group">
                    <label for="emailStatusDisplay">Trạng thái email</label>
                    <input type="text" id="emailStatusDisplay" class="form-control readonly-field"
                        placeholder="Trạng thái kích hoạt email" readonly />
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label for="userVerifiedAt">Ngày xác thực tài khoản</label>
                    <input type="text" id="userVerifiedAt" class="form-control readonly-field"
                        placeholder="Ngày xác thực tài khoản" readonly />
                </div>
                <div class="form-group">
                    <label for="userDisabledAtDisplay">Ngày vô hiệu hoá tài khoản</label>
                    <input type="text" id="userDisabledAtDisplay" class="form-control readonly-field"
                        placeholder="Ngày vô hiệu hoá tài khoản" readonly />
                </div>
            </div>
        </div>

        <div class="form-actions">
            <button type="button" class="btn btn-cancel">Hủy</button>
            <button type="button" class="btn btn-save" id="btnSaveUser">Lưu</button>
        </div>
    </div>

    <div class="image-upload-column">
        <div class="image-upload-container">
            <div class="upload-title">Ảnh đại diện</div>
            <div class="main-upload-area">
                <div class="upload-placeholder" id="avatarDropArea">
                    <input type="file" id="userImageInput" accept="image/*" style="display: none;" />
                    <i class="fas fa-cloud-upload-alt"></i>
                    <p>Kéo thả hoặc click để tải ảnh</p>
                    <p class="upload-hint">Định dạng: JPG, PNG (Tối đa 5MB)</p>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="toastContainer" class="position-fixed top-0 end-0 p-3" style="z-index:1050"></div>

<script>
    let isRemoveImage = false;
    let currentImageUrl = '';
    let selectedImageFile = null;

    document.addEventListener('DOMContentLoaded', async () => {
        const urlParams = new URLSearchParams(window.location.search);
        const userId = urlParams.get('id');

        if (!userId) {
            showToast('Không tìm thấy ID người dùng trên URL.', 'danger');
            return;
        }

        const userRoleSelect = document.getElementById('userRole');
        const userStatusSelect = document.getElementById('userStatus');
        const userRoleFormGroup = userRoleSelect ? userRoleSelect.closest('.form-group') : null;
        const selectWrapperRole = userRoleSelect ? userRoleSelect.closest('.select-wrapper') : null;

        let currentUserRole = null;
        const storedUser = localStorage.getItem('user');
        if (storedUser) {
            try {
                const userData = JSON.parse(storedUser);
                currentUserRole = userData.role;
            } catch (e) {
            }
        }

        if (userRoleSelect && userRoleFormGroup && selectWrapperRole) {
            userRoleFormGroup.style.display = '';
            userRoleFormGroup.style.visibility = 'visible';
            selectWrapperRole.style.display = '';
            selectWrapperRole.style.visibility = 'visible';

            if (currentUserRole && currentUserRole.toLowerCase() === 'admin') {
                userRoleSelect.disabled = false;
                userRoleSelect.classList.remove('disabled-field');
            } else {
                userRoleSelect.disabled = true;
                userRoleSelect.classList.add('disabled-field');
                const adminOption = userRoleSelect.querySelector('option[value="admin"]');
                if (adminOption) {
                    adminOption.remove();
                }
            }
        } else {
        }

        try {
            const res = await fetch(`/api/users/admin/${userId}`);

            if (!res.ok) {
                const errorData = await res.json();
                throw new Error(errorData.error || `HTTP error! status: ${res.status}`);
            }

            const user = await res.json();

            currentImageUrl = user.image || '';

            document.getElementById('userName').value = user.full_name || '';
            document.getElementById('userPhone').value = user.phone || '';
            document.getElementById('userBirth').value = user.birth ? new Date(user.birth).toISOString().split('T')[0] : '';

            if (userRoleSelect) {
                userRoleSelect.value = user.role || 'user';
            }
            document.getElementById('userGender').value = user.gender || '';

            if (userStatusSelect) {
                userStatusSelect.value = user.account_status === "Hoạt động" ? "active" : "disabled";
            }

            document.getElementById('userEmail').value = user.email || '';
            document.getElementById('userAddress').value = user.address || '';

            document.getElementById('totalSuccessOrders').value = user.total_success_orders;
            document.getElementById('totalCancelledOrders').value = user.total_cancelled_orders;

            const userCategorySelect = document.getElementById('userCategory');
            if (userCategorySelect) {
                userCategorySelect.value = user.category || 'Khách hàng mới';
            }

            document.getElementById('emailStatusDisplay').value = user.email_status || '';

            document.getElementById('userVerifiedAt').value = user.verified_at ? new Date(user.verified_at).toLocaleString('vi-VN') : '';
            document.getElementById('userDisabledAtDisplay').value = user.disabled_at ? new Date(user.disabled_at).toLocaleString('vi-VN') : '';

            if (currentImageUrl) {
                renderImagePreview(currentImageUrl);
            } else {
                renderUploadPrompt();
            }

        } catch (err) {
            showToast('Không thể tải dữ liệu người dùng: ' + err.message, 'danger');
        }
    });

    document.getElementById('btnSaveUser').addEventListener('click', async () => {
        const userId = new URLSearchParams(window.location.search).get('id');
        if (!userId) {
            showToast('Không tìm thấy ID người dùng để cập nhật.', 'danger');
            return;
        }

        const token = localStorage.getItem('token');
        if (!token) {
            showToast('Bạn chưa đăng nhập hoặc phiên làm việc đã hết hạn. Vui lòng đăng nhập lại.', 'danger');
            return;
        }

        const submitBtn = document.getElementById('btnSaveUser');
        const originalBtnText = submitBtn.innerHTML;
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Đang lưu...';

        const formData = new FormData();
        formData.append('user_name', document.getElementById('userName').value);
        formData.append('user_number', document.getElementById('userPhone').value);
        formData.append('user_gender', document.getElementById('userGender').value);
        formData.append('user_birth', document.getElementById('userBirth').value);
        formData.append('user_role', document.getElementById('userRole').value);
        formData.append('user_address', document.getElementById('userAddress').value);

        const userStatusValue = document.getElementById('userStatus').value;
        if (userStatusValue === 'disabled') {
            formData.append('user_disabled_at', new Date().toISOString());
        } else {
            formData.append('user_disabled_at', null);
        }

        formData.append('remove_image', isRemoveImage ? '1' : '0');

        if (selectedImageFile) {
            formData.append('image', selectedImageFile);
        }

        try {
            const response = await fetch(`/api/users/admin/${userId}`, {
                method: 'PUT',
                headers: {
                    'Authorization': `Bearer ${token}`,
                },
                body: formData,
            });

            const result = await response.json();
            if (response.ok) {
                showToast('Cập nhật thành công!', 'success');
                selectedImageFile = null;
                isRemoveImage = false;
                document.dispatchEvent(new Event('DOMContentLoaded'));
            } else {
                showToast(result.error || 'Cập nhật thất bại', 'danger');
            }
        } catch (err) {
            showToast('Có lỗi xảy ra khi gửi dữ liệu: ' + err.message, 'danger');
        } finally {
            submitBtn.disabled = false;
            submitBtn.innerHTML = originalBtnText;
        }
    });

    function handleImageChange(e) {
        const file = e.target.files[0];
        if (file) {
            selectedImageFile = file;
            const reader = new FileReader();
            reader.onload = (ev) => {
                renderImagePreview(ev.target.result);
                isRemoveImage = false;
            };
            reader.readAsDataURL(file);
        }
    }

    function renderUploadPrompt() {
        const avatarDropArea = document.getElementById('avatarDropArea');
        if (!avatarDropArea) return;

        avatarDropArea.innerHTML = `
            <i class="fas fa-cloud-upload-alt"></i>
            <p>Kéo thả hoặc click để tải ảnh</p>
            <p class="upload-hint">Định dạng: JPG, PNG (Tối đa 5MB)</p>
            <input type="file" id="userImageInput" accept="image/*" style="display: none;" />
        `;
        const userImageInput = document.getElementById('userImageInput');
        if (userImageInput) userImageInput.addEventListener('change', handleImageChange);

        avatarDropArea.onclick = () => {
            const input = document.getElementById('userImageInput');
            if (input) input.click();
        };
    }

    function renderImagePreview(imageSrc) {
        const avatarDropArea = document.getElementById('avatarDropArea');
        if (!avatarDropArea) return;

        avatarDropArea.innerHTML = `
            <div class="avatar-preview">
                <img src="${imageSrc}" alt="avatar" style="max-width: 100%; border-radius: 8px;" />
                <button type="button" id="removeAvatarBtn" class="remove-avatar-btn">×</button>
                <input type="file" id="userImageInput" accept="image/*" style="display: none;" />
            </div>
        `;
        const userImageInput = document.getElementById('userImageInput');
        if (userImageInput) userImageInput.addEventListener('change', handleImageChange);

        const removeAvatarBtn = document.getElementById('removeAvatarBtn');
        if (removeAvatarBtn) {
            removeAvatarBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                isRemoveImage = true;
                currentImageUrl = '';
                selectedImageFile = null;
                renderUploadPrompt();
            });
        }

        avatarDropArea.onclick = (event) => {
            if (event.target.id === 'removeAvatarBtn') {
                return;
            }
            const input = document.getElementById('userImageInput');
            if (input) input.click();
        };
    }

    function showToast(message, type = "success") {
        let toastContainer = document.getElementById("toastContainer");
        if (!toastContainer) {
            toastContainer = document.createElement("div");
            toastContainer.id = "toastContainer";
            toastContainer.className = "position-fixed top-0 end-0 p-3";
            toastContainer.style.zIndex = "1050";
            document.body.appendChild(toastContainer);
        }

        const toast = document.createElement("div");
        toast.className = `toast align-items-center text-white bg-${type} border-0`;
        toast.setAttribute("role", "alert");
        toast.setAttribute("aria-live", "assertive");
        toast.setAttribute("aria-atomic", "true");

        toast.innerHTML = `
            <div class="d-flex">
                <div class="toast-body">${message}</div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
            </div>
        `;

        toastContainer.appendChild(toast);
        const bsToast = new bootstrap.Toast(toast, { delay: 3000 });
        bsToast.show();
        toast.addEventListener("hidden.bs.toast", () => toast.remove());
    }
</script>

<style>
    .disabled-field {
        opacity: 0.7;
        cursor: not-allowed;
        background-color: #e9ecef;
    }

    .select-wrapper .fas.fa-chevron-down {
        opacity: 0.7;
    }

    .readonly-field {
        background-color: #e9ecef;
        cursor: not-allowed;
    }
</style>